
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007000  08007000  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007008  08007008  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000070  08007080  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08007080  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160c7  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cf  00000000  00000000  00036161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00039630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001338  00000000  00000000  0003aac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ea41  00000000  00000000  0003bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d99  00000000  00000000  0005a839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9077  00000000  00000000  000705d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  0012969c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006c70 	.word	0x08006c70

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006c70 	.word	0x08006c70

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800054c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000550:	f023 0218 	bic.w	r2, r3, #24
 8000554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4313      	orrs	r3, r2
 800055c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800056a:	b480      	push	{r7}
 800056c:	b085      	sub	sp, #20
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4313      	orrs	r3, r2
 8000580:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4013      	ands	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <LL_DBGMCU_APB1_GRP1_FreezePeriph>:
  *         @arg @ref LL_DBGMCU_APB1_GRP1_I2C3_STOP
  *         @arg @ref LL_DBGMCU_APB1_GRP1_LPTIM1_STOP
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB1FZR1, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 80005a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a8:	4904      	ldr	r1, [pc, #16]	; (80005bc <LL_DBGMCU_APB1_GRP1_FreezePeriph+0x20>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e0042000 	.word	0xe0042000

080005c0 <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80005c8:	f003 ff10 	bl	80043ec <calendar_AlarmA_ISR>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <event_start>:

void event_start(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	activate_led(BLUE_LED);
 80005d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005dc:	f004 fc86 	bl	8004eec <activate_led>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <event_end>:

void event_end(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	deactivate_led(BLUE_LED);
 80005e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80005ec:	f004 fcb2 	bl	8004f54 <deactivate_led>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09a      	sub	sp, #104	; 0x68
 80005f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fb6d 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f8b5 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 fa05 	bl	8000a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f9ad 	bl	8000964 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800060a:	f000 f90d 	bl	8000828 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_DBGMCU_FREEZE_RTC();	// freezes RTC during debugging pause
 800060e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000612:	f7ff ffc3 	bl	800059c <LL_DBGMCU_APB1_GRP1_FreezePeriph>
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 ff4e 	bl	80014b8 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  desktopAppSession_init(&huart2);
 800061c:	484e      	ldr	r0, [pc, #312]	; (8000758 <main+0x164>)
 800061e:	f004 fdc1 	bl	80051a4 <desktopAppSession_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000622:	484e      	ldr	r0, [pc, #312]	; (800075c <main+0x168>)
 8000624:	f003 fe0e 	bl	8004244 <calendar_init>

  // begin listening for messages from desktop
  if (desktopAppSession_start() == SESSION_OKAY)
 8000628:	f004 fe0a 	bl	8005240 <desktopAppSession_start>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <main+0x46>
  {
	  activate_led(GREEN_LED);
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f004 fc59 	bl	8004eec <activate_led>

  // initialize main loop variables
  char messageHeader[UART_PACKET_HEADER_SIZE];
  char messageBody[UART_PACKET_PAYLOAD_SIZE];
  enum AppActions commandCode;
  DateTime newDateTime = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	809a      	strh	r2, [r3, #4]
  struct CalendarEvent tempEvent = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  // main loop
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_update();
 8000652:	f003 fea9 	bl	80043a8 <calendar_update>

	  // try to open connection if not present
	  desktopAppSession_start();
 8000656:	f004 fdf3 	bl	8005240 <desktopAppSession_start>

	  // led debug for if a communication is in session
	  if (sessionOpen())
 800065a:	f004 fdd9 	bl	8005210 <sessionOpen>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d004      	beq.n	800066e <main+0x7a>
		  activate_led(GREEN_LED);
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f004 fc40 	bl	8004eec <activate_led>
 800066c:	e003      	b.n	8000676 <main+0x82>
	  else
		  deactivate_led(GREEN_LED);
 800066e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000672:	f004 fc6f 	bl	8004f54 <deactivate_led>

	  // if a session is open, listen and execute messages/commands
	  if (sessionOpen())
 8000676:	f004 fdcb 	bl	8005210 <sessionOpen>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d067      	beq.n	8000750 <main+0x15c>
	  {
		  // if message present, handle message
		  desktopAppSession_update();
 8000680:	f004 fe06 	bl	8005290 <desktopAppSession_update>

		  // get command if present
		  if (desktopAppSession_dequeueMessage(messageHeader, messageBody) == SESSION_OKAY)
 8000684:	f107 021c 	add.w	r2, r7, #28
 8000688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f004 fe32 	bl	80052f8 <desktopAppSession_dequeueMessage>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d15a      	bne.n	8000750 <main+0x15c>
		  {
			  // execute command
			  commandCode = code_to_appActions(messageHeader);
 800069a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fc78 	bl	8004f94 <code_to_appActions>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			  switch (commandCode) {
 80006aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006ae:	3b01      	subs	r3, #1
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d84f      	bhi.n	8000754 <main+0x160>
 80006b4:	a201      	add	r2, pc, #4	; (adr r2, 80006bc <main+0xc8>)
 80006b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ba:	bf00      	nop
 80006bc:	080006d9 	.word	0x080006d9
 80006c0:	080006f7 	.word	0x080006f7
 80006c4:	08000727 	.word	0x08000727
 80006c8:	08000755 	.word	0x08000755
 80006cc:	08000755 	.word	0x08000755
 80006d0:	08000755 	.word	0x08000755
 80006d4:	0800074b 	.word	0x0800074b
				  case SET_CALENDAR_DATETIME:
					  parseDateTime(&newDateTime, messageBody);
 80006d8:	f107 021c 	add.w	r2, r7, #28
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f004 fcb4 	bl	8005050 <parseDateTime>
					  calendar_setDateTime(newDateTime);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f0:	f003 fdec 	bl	80042cc <calendar_setDateTime>
					  break;
 80006f4:	e02f      	b.n	8000756 <main+0x162>

				  case GET_CALENDAR_DATETIME:
					  calendar_getDateTime(&newDateTime);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fe06 	bl	800430c <calendar_getDateTime>
					  formatDateTime(messageBody, &newDateTime);
 8000700:	f107 0214 	add.w	r2, r7, #20
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f004 fcc8 	bl	80050a0 <formatDateTime>
					  memcpy(messageHeader, "ECHO", UART_PACKET_HEADER_SIZE*sizeof(char));
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <main+0x16c>)
 8000712:	65bb      	str	r3, [r7, #88]	; 0x58
					  desktopAppSession_enqueueMessage(messageHeader, messageBody);
 8000714:	f107 021c 	add.w	r2, r7, #28
 8000718:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fdce 	bl	80052c0 <desktopAppSession_enqueueMessage>
					  break;
 8000724:	e017      	b.n	8000756 <main+0x162>

				  case ADD_CALENDAR_EVENT:
					  parseEvent(&tempEvent, messageBody);
 8000726:	f107 021c 	add.w	r2, r7, #28
 800072a:	463b      	mov	r3, r7
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f004 fcec 	bl	800510c <parseEvent>
					  tempEvent.start_callback = &(event_start);
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <main+0x170>)
 8000736:	60fb      	str	r3, [r7, #12]
					  tempEvent.end_callback = &(event_end);
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <main+0x174>)
 800073a:	613b      	str	r3, [r7, #16]
					  calendar_addEvent(tempEvent);
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	463b      	mov	r3, r7
 8000742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000744:	f003 fe04 	bl	8004350 <calendar_addEvent>
					  break;
 8000748:	e005      	b.n	8000756 <main+0x162>

				  case CLEAR_CALENDAR_EVENTS:
					  break;

				  case START_CALENDAR:
					  calendar_start();
 800074a:	f003 fda1 	bl	8004290 <calendar_start>
					  break;
 800074e:	e002      	b.n	8000756 <main+0x162>

				  default:
					  break;
			  }
		  }
 8000750:	bf00      	nop
 8000752:	e77e      	b.n	8000652 <main+0x5e>
					  break;
 8000754:	bf00      	nop
	  calendar_update();
 8000756:	e77c      	b.n	8000652 <main+0x5e>
 8000758:	200000c4 	.word	0x200000c4
 800075c:	2000008c 	.word	0x2000008c
 8000760:	4f484345 	.word	0x4f484345
 8000764:	080005d5 	.word	0x080005d5
 8000768:	080005e5 	.word	0x080005e5

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09a      	sub	sp, #104	; 0x68
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2248      	movs	r2, #72	; 0x48
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 f936 	bl	80059ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
 800078e:	615a      	str	r2, [r3, #20]
 8000790:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000792:	f000 fe69 	bl	8001468 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff fed2 	bl	8000540 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <SystemClock_Config+0xb8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007a4:	4a1f      	ldr	r2, [pc, #124]	; (8000824 <SystemClock_Config+0xb8>)
 80007a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <SystemClock_Config+0xb8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007b8:	232c      	movs	r3, #44	; 0x2c
 80007ba:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007bc:	2381      	movs	r3, #129	; 0x81
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f92d 	bl	8001a3c <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007e8:	f000 f91f 	bl	8000a2a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80007ec:	236f      	movs	r3, #111	; 0x6f
 80007ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fc97 	bl	8002140 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000818:	f000 f907 	bl	8000a2a <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3768      	adds	r7, #104	; 0x68
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	58000400 	.word	0x58000400

08000828 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b092      	sub	sp, #72	; 0x48
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800082e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800083e:	2300      	movs	r3, #0
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	222c      	movs	r2, #44	; 0x2c
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f005 f8cf 	bl	80059ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800084e:	4b43      	ldr	r3, [pc, #268]	; (800095c <MX_RTC_Init+0x134>)
 8000850:	4a43      	ldr	r2, [pc, #268]	; (8000960 <MX_RTC_Init+0x138>)
 8000852:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000854:	4b41      	ldr	r3, [pc, #260]	; (800095c <MX_RTC_Init+0x134>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800085a:	4b40      	ldr	r3, [pc, #256]	; (800095c <MX_RTC_Init+0x134>)
 800085c:	227f      	movs	r2, #127	; 0x7f
 800085e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000860:	4b3e      	ldr	r3, [pc, #248]	; (800095c <MX_RTC_Init+0x134>)
 8000862:	22ff      	movs	r2, #255	; 0xff
 8000864:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_RTC_Init+0x134>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800086c:	4b3b      	ldr	r3, [pc, #236]	; (800095c <MX_RTC_Init+0x134>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_RTC_Init+0x134>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <MX_RTC_Init+0x134>)
 800087a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000880:	4b36      	ldr	r3, [pc, #216]	; (800095c <MX_RTC_Init+0x134>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000886:	4b35      	ldr	r3, [pc, #212]	; (800095c <MX_RTC_Init+0x134>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088c:	4833      	ldr	r0, [pc, #204]	; (800095c <MX_RTC_Init+0x134>)
 800088e:	f002 f931 	bl	8002af4 <HAL_RTC_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000898:	f000 f8c7 	bl	8000a2a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4827      	ldr	r0, [pc, #156]	; (800095c <MX_RTC_Init+0x134>)
 80008c0:	f002 f99a 	bl	8002bf8 <HAL_RTC_SetTime>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80008ca:	f000 f8ae 	bl	8000a2a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008ce:	2301      	movs	r3, #1
 80008d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80008da:	2301      	movs	r3, #1
 80008dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ea:	2201      	movs	r2, #1
 80008ec:	4619      	mov	r1, r3
 80008ee:	481b      	ldr	r0, [pc, #108]	; (800095c <MX_RTC_Init+0x134>)
 80008f0:	f002 fa80 	bl	8002df4 <HAL_RTC_SetDate>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 80008fa:	f000 f896 	bl	8000a2a <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80008fe:	2300      	movs	r3, #0
 8000900:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000902:	2300      	movs	r3, #0
 8000904:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000906:	2300      	movs	r3, #0
 8000908:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000922:	2301      	movs	r3, #1
 8000924:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2201      	movs	r2, #1
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_RTC_Init+0x134>)
 8000936:	f002 fb31 	bl	8002f9c <HAL_RTC_SetAlarm_IT>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000940:	f000 f873 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	202a      	movs	r0, #42	; 0x2a
 800094a:	f000 fb12 	bl	8000f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800094e:	202a      	movs	r0, #42	; 0x2a
 8000950:	f000 fb29 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3748      	adds	r7, #72	; 0x48
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000008c 	.word	0x2000008c
 8000960:	40002800 	.word	0x40002800

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800096a:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <MX_USART2_UART_Init+0xa8>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800097e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000982:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800098c:	220c      	movs	r2, #12
 800098e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009aa:	2230      	movs	r2, #48	; 0x30
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009c0:	f002 fd7a 	bl	80034b8 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f82e 	bl	8000a2a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009d2:	f003 fb6e 	bl	80040b2 <HAL_UARTEx_SetTxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f825 	bl	8000a2a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009e4:	f003 fba3 	bl	800412e <HAL_UARTEx_SetRxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80009ee:	f000 f81c 	bl	8000a2a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009f4:	f003 fb25 	bl	8004042 <HAL_UARTEx_DisableFifoMode>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 80009fe:	f000 f814 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000c4 	.word	0x200000c4
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fda8 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f7ff fda5 	bl	800056a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff fda2 	bl	800056a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i
}
 8000a30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <Error_Handler+0x8>

08000a34 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <LL_AHB2_GRP1_EnableClock>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a78:	68fb      	ldr	r3, [r7, #12]
}
 8000a7a:	bf00      	nop
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b090      	sub	sp, #64	; 0x40
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2238      	movs	r2, #56	; 0x38
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f004 ff8b 	bl	80059ec <memset>
  if(hrtc->Instance==RTC)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_RTC_MspInit+0x64>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d11d      	bne.n	8000b1c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ae0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fee5 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000afc:	f7ff ff95 	bl	8000a2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b00:	f7ff ff98 	bl	8000a34 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b08:	f7ff ffbc 	bl	8000a84 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	202a      	movs	r0, #42	; 0x2a
 8000b12:	f000 fa2e 	bl	8000f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000b16:	202a      	movs	r0, #42	; 0x2a
 8000b18:	f000 fa45 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3740      	adds	r7, #64	; 0x40
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40002800 	.word	0x40002800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b096      	sub	sp, #88	; 0x58
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2238      	movs	r2, #56	; 0x38
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 ff4f 	bl	80059ec <memset>
  if(huart->Instance==USART2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d126      	bne.n	8000ba6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b5c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000b60:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 feaa 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff ff5a 	bl	8000a2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b7a:	f7ff ff83 	bl	8000a84 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff ff68 	bl	8000a54 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b84:	230c      	movs	r3, #12
 8000b86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b94:	2307      	movs	r3, #7
 8000b96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fa1b 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3758      	adds	r7, #88	; 0x58
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr

08000bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfa:	f000 f8c7 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <RTC_Alarm_IRQHandler+0x10>)
 8000c0a:	f002 fb2f 	bl	800326c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000008c 	.word	0x2000008c

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f004 fe98 	bl	800597c <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20008000 	.word	0x20008000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000158 	.word	0x20000158
 8000c80:	200005e0 	.word	0x200005e0

08000c84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c88:	f7ff fc54 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <LoopForever+0xe>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	; (8000cd0 <LoopForever+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cb2:	f004 fe69 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb6:	f7ff fc9d 	bl	80005f4 <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   r0, =_estack
 8000cbc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc8:	08007010 	.word	0x08007010
  ldr r2, =_sbss
 8000ccc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd0:	200005dc 	.word	0x200005dc

08000cd4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	f000 f93a 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ce8:	f001 fc0c 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_Init+0x3c>)
 8000cf0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f810 	bl	8000d18 <HAL_InitTick>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	e001      	b.n	8000d08 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d04:	f7ff fed6 	bl	8000ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000000 	.word	0x20000000

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d024      	beq.n	8000d76 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d2c:	f001 fbea 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8000d30:	4602      	mov	r2, r0
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <HAL_InitTick+0x6c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f93c 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10f      	bne.n	8000d70 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b0f      	cmp	r3, #15
 8000d54:	d809      	bhi.n	8000d6a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d56:	2200      	movs	r2, #0
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5e:	f000 f908 	bl	8000f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_InitTick+0x70>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e007      	b.n	8000d7a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e004      	b.n	8000d7a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e001      	b.n	8000d7a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000004 	.word	0x20000004

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x20>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <HAL_IncTick+0x20>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	20000008 	.word	0x20000008
 8000dac:	2000015c 	.word	0x2000015c

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_GetTick+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	2000015c 	.word	0x2000015c

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4906      	ldr	r1, [pc, #24]	; (8000e5c <__NVIC_EnableIRQ+0x34>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f3c:	f7ff ff90 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff2d 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff44 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff92 	bl	8000eb4 <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff61 	bl	8000e60 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff37 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa4 	bl	8000f18 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e140      	b.n	800126e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8132 	beq.w	8001268 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 808c 	beq.w	8001268 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001150:	4a4e      	ldr	r2, [pc, #312]	; (800128c <HAL_GPIO_Init+0x2b0>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	2207      	movs	r2, #7
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800117a:	d00d      	beq.n	8001198 <HAL_GPIO_Init+0x1bc>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_GPIO_Init+0x2b4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x1b8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_GPIO_Init+0x2b8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_GPIO_Init+0x1b4>
 800118c:	2302      	movs	r3, #2
 800118e:	e004      	b.n	800119a <HAL_GPIO_Init+0x1be>
 8001190:	2307      	movs	r3, #7
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x1be>
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <HAL_GPIO_Init+0x1be>
 8001198:	2300      	movs	r3, #0
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	f002 0203 	and.w	r2, r2, #3
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	4093      	lsls	r3, r2
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011aa:	4938      	ldr	r1, [pc, #224]	; (800128c <HAL_GPIO_Init+0x2b0>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011dc:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001206:	4a24      	ldr	r2, [pc, #144]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 800120e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001212:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001232:	4a19      	ldr	r2, [pc, #100]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 800123c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001240:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <HAL_GPIO_Init+0x2bc>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f aeb7 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	58000800 	.word	0x58000800

0800129c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80012aa:	e0af      	b.n	800140c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80012ac:	2201      	movs	r2, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a2 	beq.w	8001406 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80012c2:	4a59      	ldr	r2, [pc, #356]	; (8001428 <HAL_GPIO_DeInit+0x18c>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	2207      	movs	r2, #7
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_DeInit+0x6c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a4f      	ldr	r2, [pc, #316]	; (800142c <HAL_GPIO_DeInit+0x190>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_DeInit+0x68>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a4e      	ldr	r2, [pc, #312]	; (8001430 <HAL_GPIO_DeInit+0x194>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_DeInit+0x64>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e004      	b.n	800130a <HAL_GPIO_DeInit+0x6e>
 8001300:	2307      	movs	r3, #7
 8001302:	e002      	b.n	800130a <HAL_GPIO_DeInit+0x6e>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_DeInit+0x6e>
 8001308:	2300      	movs	r3, #0
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	429a      	cmp	r2, r3
 8001318:	d136      	bne.n	8001388 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 800131c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	4943      	ldr	r1, [pc, #268]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 8001326:	4013      	ands	r3, r2
 8001328:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 800132e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	493f      	ldr	r1, [pc, #252]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 8001338:	4013      	ands	r3, r2
 800133a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	493b      	ldr	r1, [pc, #236]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 8001348:	4013      	ands	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_DeInit+0x198>)
 8001356:	4013      	ands	r3, r2
 8001358:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	2207      	movs	r2, #7
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800136a:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <HAL_GPIO_DeInit+0x18c>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43da      	mvns	r2, r3
 800137a:	482b      	ldr	r0, [pc, #172]	; (8001428 <HAL_GPIO_DeInit+0x18c>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	400a      	ands	r2, r1
 8001382:	3302      	adds	r3, #2
 8001384:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2103      	movs	r1, #3
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	08d2      	lsrs	r2, r2, #3
 80013bc:	4019      	ands	r1, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2103      	movs	r1, #3
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	2101      	movs	r1, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2103      	movs	r1, #3
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	401a      	ands	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	f47f af49 	bne.w	80012ac <HAL_GPIO_DeInit+0x10>
  }
}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40010000 	.word	0x40010000
 800142c:	48000400 	.word	0x48000400
 8001430:	48000800 	.word	0x48000800
 8001434:	58000800 	.word	0x58000800

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001454:	e002      	b.n	800145c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
	...

08001468 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_PWR_EnableBkUpAccess+0x18>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001476:	6013      	str	r3, [r2, #0]
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	58000400 	.word	0x58000400

08001484 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <LL_PWR_EnableBootC2+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <LL_PWR_EnableBootC2+0x18>)
 800148e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	58000400 	.word	0x58000400

080014a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_PWREx_GetVoltageRange+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	58000400 	.word	0x58000400

080014b8 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80014c0:	f7ff ffe0 	bl	8001484 <LL_PWR_EnableBootC2>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <LL_PWR_IsEnabledBkUpAccess>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014dc:	d101      	bne.n	80014e2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	58000400 	.word	0x58000400

080014f0 <LL_RCC_HSE_EnableTcxo>:
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <LL_RCC_HSE_DisableTcxo>:
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800153a:	d101      	bne.n	8001540 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <LL_RCC_HSE_Enable>:
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <LL_RCC_HSE_Disable>:
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <LL_RCC_HSE_IsReady>:
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001594:	d101      	bne.n	800159a <LL_RCC_HSE_IsReady+0x18>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <LL_RCC_HSE_IsReady+0x1a>
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <LL_RCC_HSI_Enable>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <LL_RCC_HSI_Disable>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <LL_RCC_HSI_IsReady>:
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d101      	bne.n	80015f4 <LL_RCC_HSI_IsReady+0x18>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_RCC_HSI_IsReady+0x1a>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <LL_RCC_HSI_SetCalibTrimming>:
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	061b      	lsls	r3, r3, #24
 8001614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001618:	4313      	orrs	r3, r2
 800161a:	604b      	str	r3, [r1, #4]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <LL_RCC_LSE_IsReady>:
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800162a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d101      	bne.n	800163e <LL_RCC_LSE_IsReady+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_RCC_LSE_IsReady+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <LL_RCC_LSI_Enable>:
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <LL_RCC_LSI_Disable>:
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <LL_RCC_LSI_IsReady>:
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800168c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d101      	bne.n	80016a0 <LL_RCC_LSI_IsReady+0x18>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <LL_RCC_LSI_IsReady+0x1a>
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <LL_RCC_MSI_Enable>:
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6013      	str	r3, [r2, #0]
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <LL_RCC_MSI_Disable>:
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <LL_RCC_MSI_IsReady>:
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d101      	bne.n	80016f8 <LL_RCC_MSI_IsReady+0x16>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_RCC_MSI_IsReady+0x18>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b08      	cmp	r3, #8
 8001712:	d101      	bne.n	8001718 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <LL_RCC_MSI_GetRange>:
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <LL_RCC_SetSysClkSource>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <LL_RCC_GetSysClkSource>:
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_SetAHBPrescaler>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <LL_C2_RCC_SetAHBPrescaler>:
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <LL_RCC_SetAHB3Prescaler>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001810:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001814:	f023 020f 	bic.w	r2, r3, #15
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001820:	4313      	orrs	r3, r2
 8001822:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <LL_RCC_SetAPB1Prescaler>:
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <LL_RCC_SetAPB2Prescaler>:
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LL_RCC_GetAHBPrescaler>:
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <LL_RCC_GetAHB3Prescaler>:
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <LL_RCC_GetAPB1Prescaler>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <LL_RCC_GetAPB2Prescaler>:
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001922:	d101      	bne.n	8001928 <LL_RCC_PLL_IsReady+0x18>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <LL_RCC_PLL_IsReady+0x1a>
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0303 	and.w	r3, r3, #3
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199e:	d101      	bne.n	80019a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019c2:	d101      	bne.n	80019c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d101      	bne.n	80019ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a08:	d101      	bne.n	8001a0e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001a2a:	d101      	bne.n	8001a30 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e36f      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4e:	f7ff fea6 	bl	800179e <LL_RCC_GetSysClkSource>
 8001a52:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a54:	f7ff ff8f 	bl	8001976 <LL_RCC_PLL_GetMainSource>
 8001a58:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80c4 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3e>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d176      	bne.n	8001b62 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d173      	bne.n	8001b62 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e353      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x68>
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa2:	e006      	b.n	8001ab2 <HAL_RCC_OscConfig+0x76>
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d222      	bcs.n	8001afc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fd5a 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e331      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fe2b 	bl	8001750 <LL_RCC_MSI_SetCalibTrimming>
 8001afa:	e021      	b.n	8001b40 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fe12 	bl	8001750 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fd1f 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e2f6      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b40:	f000 fce0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4aa7      	ldr	r2, [pc, #668]	; (8001de4 <HAL_RCC_OscConfig+0x3a8>)
 8001b48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001b4a:	4ba7      	ldr	r3, [pc, #668]	; (8001de8 <HAL_RCC_OscConfig+0x3ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8e2 	bl	8000d18 <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001b58:	7cfb      	ldrb	r3, [r7, #19]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d047      	beq.n	8001bee <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001b5e:	7cfb      	ldrb	r3, [r7, #19]
 8001b60:	e2e5      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d02c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b6a:	f7ff fd9e 	bl	80016aa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b6e:	f7ff f91f 	bl	8000db0 <HAL_GetTick>
 8001b72:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b76:	f7ff f91b 	bl	8000db0 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e2d2      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001b88:	f7ff fdab 	bl	80016e2 <LL_RCC_MSI_IsReady>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f1      	beq.n	8001b76 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fdc7 	bl	8001750 <LL_RCC_MSI_SetCalibTrimming>
 8001bc2:	e015      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc4:	f7ff fd7f 	bl	80016c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f8f2 	bl	8000db0 <HAL_GetTick>
 8001bcc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd0:	f7ff f8ee 	bl	8000db0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e2a5      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001be2:	f7ff fd7e 	bl	80016e2 <LL_RCC_MSI_IsReady>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f1      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x194>
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bee:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d058      	beq.n	8001cae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b0c      	cmp	r3, #12
 8001c06:	d108      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d14b      	bne.n	8001cae <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e289      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0x204>
 8001c3a:	f7ff fc86 	bl	800154a <LL_RCC_HSE_Enable>
 8001c3e:	e00d      	b.n	8001c5c <HAL_RCC_OscConfig+0x220>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001c48:	d104      	bne.n	8001c54 <HAL_RCC_OscConfig+0x218>
 8001c4a:	f7ff fc51 	bl	80014f0 <LL_RCC_HSE_EnableTcxo>
 8001c4e:	f7ff fc7c 	bl	800154a <LL_RCC_HSE_Enable>
 8001c52:	e003      	b.n	8001c5c <HAL_RCC_OscConfig+0x220>
 8001c54:	f7ff fc87 	bl	8001566 <LL_RCC_HSE_Disable>
 8001c58:	f7ff fc58 	bl	800150c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff f8a4 	bl	8000db0 <HAL_GetTick>
 8001c68:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff f8a0 	bl	8000db0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e257      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c7e:	f7ff fc80 	bl	8001582 <LL_RCC_HSE_IsReady>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f1      	beq.n	8001c6c <HAL_RCC_OscConfig+0x230>
 8001c88:	e011      	b.n	8001cae <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f891 	bl	8000db0 <HAL_GetTick>
 8001c8e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c92:	f7ff f88d 	bl	8000db0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b64      	cmp	r3, #100	; 0x64
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e244      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001ca4:	f7ff fc6d 	bl	8001582 <LL_RCC_HSE_IsReady>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f1      	bne.n	8001c92 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d046      	beq.n	8001d48 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_OscConfig+0x290>
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0c      	cmp	r3, #12
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e22a      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fc8e 	bl	80015fe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ce2:	e031      	b.n	8001d48 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d019      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	f7ff fc5a 	bl	80015a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f85e 	bl	8000db0 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7ff f85a 	bl	8000db0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e211      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d0a:	f7ff fc67 	bl	80015dc <LL_RCC_HSI_IsReady>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f1      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fc70 	bl	80015fe <LL_RCC_HSI_SetCalibTrimming>
 8001d1e:	e013      	b.n	8001d48 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d20:	f7ff fc4e 	bl	80015c0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f844 	bl	8000db0 <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f840 	bl	8000db0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1f7      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d3e:	f7ff fc4d 	bl	80015dc <LL_RCC_HSI_IsReady>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f1      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d06e      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d056      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d64:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69da      	ldr	r2, [r3, #28]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d031      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e1d0      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d013      	beq.n	8001dbe <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001d96:	f7ff fc67 	bl	8001668 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d9a:	f7ff f809 	bl	8000db0 <HAL_GetTick>
 8001d9e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff f805 	bl	8000db0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b11      	cmp	r3, #17
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1bc      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001db4:	f7ff fc68 	bl	8001688 <LL_RCC_LSI_IsReady>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f1      	bne.n	8001da2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	f023 0210 	bic.w	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd8:	f7ff fc36 	bl	8001648 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7fe ffe8 	bl	8000db0 <HAL_GetTick>
 8001de0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001de2:	e00c      	b.n	8001dfe <HAL_RCC_OscConfig+0x3c2>
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7fe ffe0 	bl	8000db0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b11      	cmp	r3, #17
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e197      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001dfe:	f7ff fc43 	bl	8001688 <LL_RCC_LSI_IsReady>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f1      	beq.n	8001dec <HAL_RCC_OscConfig+0x3b0>
 8001e08:	e013      	b.n	8001e32 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	f7ff fc2d 	bl	8001668 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7fe ffcf 	bl	8000db0 <HAL_GetTick>
 8001e12:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e16:	f7fe ffcb 	bl	8000db0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b11      	cmp	r3, #17
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e182      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e28:	f7ff fc2e 	bl	8001688 <LL_RCC_LSI_IsReady>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f1      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80d8 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e40:	f7ff fb44 	bl	80014cc <LL_PWR_IsEnabledBkUpAccess>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d113      	bne.n	8001e72 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e4a:	f7ff fb0d 	bl	8001468 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ffaf 	bl	8000db0 <HAL_GetTick>
 8001e52:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7fe ffab 	bl	8000db0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e162      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e68:	f7ff fb30 	bl	80014cc <LL_PWR_IsEnabledBkUpAccess>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f1      	beq.n	8001e56 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07b      	beq.n	8001f72 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b85      	cmp	r3, #133	; 0x85
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe ff87 	bl	8000db0 <HAL_GetTick>
 8001ea2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe ff79 	bl	8000db0 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e12e      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ed0:	f7ff fba9 	bl	8001626 <LL_RCC_LSE_IsReady>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ef      	beq.n	8001eba <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b81      	cmp	r3, #129	; 0x81
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b85      	cmp	r3, #133	; 0x85
 8001ee8:	d121      	bne.n	8001f2e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe ff61 	bl	8000db0 <HAL_GetTick>
 8001eee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe ff53 	bl	8000db0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e108      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ec      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f2c:	e060      	b.n	8001ff0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7fe ff3f 	bl	8000db0 <HAL_GetTick>
 8001f32:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe ff31 	bl	8000db0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0e6      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ec      	bne.n	8001f4a <HAL_RCC_OscConfig+0x50e>
 8001f70:	e03e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7fe ff1d 	bl	8000db0 <HAL_GetTick>
 8001f76:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe ff0f 	bl	8000db0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0c4      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ec      	bne.n	8001f8e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7fe fefc 	bl	8000db0 <HAL_GetTick>
 8001fb8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc6:	f023 0301 	bic.w	r3, r3, #1
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fce:	e00a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f7fe feee 	bl	8000db0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0a3      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001fe6:	f7ff fb1e 	bl	8001626 <LL_RCC_LSE_IsReady>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1ef      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8099 	beq.w	800212c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d06c      	beq.n	80020da <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	2b02      	cmp	r3, #2
 8002006:	d14b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002008:	f7ff fc74 	bl	80018f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fed0 	bl	8000db0 <HAL_GetTick>
 8002010:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe fecc 	bl	8000db0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b0a      	cmp	r3, #10
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e083      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002026:	f7ff fc73 	bl	8001910 <LL_RCC_PLL_IsReady>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f1      	bne.n	8002014 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	4b40      	ldr	r3, [pc, #256]	; (8002138 <HAL_RCC_OscConfig+0x6fc>)
 8002038:	4013      	ands	r3, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002048:	0212      	lsls	r2, r2, #8
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002050:	4311      	orrs	r1, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800205c:	430a      	orrs	r2, r1
 800205e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002062:	4313      	orrs	r3, r2
 8002064:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002066:	f7ff fc37 	bl	80018d8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fe99 	bl	8000db0 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7fe fe95 	bl	8000db0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b0a      	cmp	r3, #10
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e04c      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002094:	f7ff fc3c 	bl	8001910 <LL_RCC_PLL_IsReady>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f1      	beq.n	8002082 <HAL_RCC_OscConfig+0x646>
 800209e:	e045      	b.n	800212c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a0:	f7ff fc28 	bl	80018f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7fe fe84 	bl	8000db0 <HAL_GetTick>
 80020a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7fe fe80 	bl	8000db0 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b0a      	cmp	r3, #10
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e037      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80020be:	f7ff fc27 	bl	8001910 <LL_RCC_PLL_IsReady>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f1      	bne.n	80020ac <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_RCC_OscConfig+0x700>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
 80020d8:	e028      	b.n	800212c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e023      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d115      	bne.n	8002128 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	429a      	cmp	r2, r3
 8002108:	d10e      	bne.n	8002128 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	429a      	cmp	r2, r3
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	11c1808c 	.word	0x11c1808c
 800213c:	eefefffc 	.word	0xeefefffc

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e12c      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002154:	4b98      	ldr	r3, [pc, #608]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d91b      	bls.n	800219a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b95      	ldr	r3, [pc, #596]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4993      	ldr	r1, [pc, #588]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002172:	f7fe fe1d 	bl	8000db0 <HAL_GetTick>
 8002176:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002178:	e008      	b.n	800218c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800217a:	f7fe fe19 	bl	8000db0 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e110      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218c:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d1ef      	bne.n	800217a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d016      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fb02 	bl	80017b4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fdfe 	bl	8000db0 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021b8:	f7fe fdfa 	bl	8000db0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0f1      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021ca:	f7ff fbdf 	bl	800198c <LL_RCC_IsActiveFlag_HPRE>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f1      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d016      	beq.n	800220e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff faf8 	bl	80017da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021ea:	f7fe fde1 	bl	8000db0 <HAL_GetTick>
 80021ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021f2:	f7fe fddd 	bl	8000db0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0d4      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002204:	f7ff fbd3 	bl	80019ae <LL_RCC_IsActiveFlag_C2HPRE>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f1      	beq.n	80021f2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff faf0 	bl	8001804 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002224:	f7fe fdc4 	bl	8000db0 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800222c:	f7fe fdc0 	bl	8000db0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e0b7      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800223e:	f7ff fbc8 	bl	80019d2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f1      	beq.n	800222c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d016      	beq.n	8002282 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fae9 	bl	8001830 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800225e:	f7fe fda7 	bl	8000db0 <HAL_GetTick>
 8002262:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002266:	f7fe fda3 	bl	8000db0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e09a      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002278:	f7ff fbbd 	bl	80019f6 <LL_RCC_IsActiveFlag_PPRE1>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f1      	beq.n	8002266 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d017      	beq.n	80022be <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff fade 	bl	8001856 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800229a:	f7fe fd89 	bl	8000db0 <HAL_GetTick>
 800229e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022a2:	f7fe fd85 	bl	8000db0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e07c      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022b4:	f7ff fbb0 	bl	8001a18 <LL_RCC_IsActiveFlag_PPRE2>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f1      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d043      	beq.n	8002352 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80022d2:	f7ff f956 	bl	8001582 <LL_RCC_HSE_IsReady>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11e      	bne.n	800231a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e066      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80022e8:	f7ff fb12 	bl	8001910 <LL_RCC_PLL_IsReady>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d113      	bne.n	800231a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e05b      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80022fe:	f7ff f9f0 	bl	80016e2 <LL_RCC_MSI_IsReady>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d108      	bne.n	800231a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e050      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800230c:	f7ff f966 	bl	80015dc <LL_RCC_HSI_IsReady>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e049      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fa2a 	bl	8001778 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002324:	f7fe fd44 	bl	8000db0 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7fe fd40 	bl	8000db0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e035      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	f7ff fa2c 	bl	800179e <LL_RCC_GetSysClkSource>
 8002346:	4602      	mov	r2, r0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	429a      	cmp	r2, r3
 8002350:	d1ec      	bne.n	800232c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d21b      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 0207 	bic.w	r2, r3, #7
 8002368:	4913      	ldr	r1, [pc, #76]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7fe fd1e 	bl	8000db0 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	e008      	b.n	800238a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002378:	f7fe fd1a 	bl	8000db0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e011      	b.n	80023ae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_ClockConfig+0x278>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d1ef      	bne.n	8002378 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002398:	f000 f8b4 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 800239c:	4603      	mov	r3, r0
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_RCC_ClockConfig+0x27c>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <HAL_RCC_ClockConfig+0x280>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fcb6 	bl	8000d18 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	58004000 	.word	0x58004000
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d2:	f7ff f9e4 	bl	800179e <LL_RCC_GetSysClkSource>
 80023d6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d8:	f7ff facd 	bl	8001976 <LL_RCC_PLL_GetMainSource>
 80023dc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x2c>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d139      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d136      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80023f0:	f7ff f987 	bl	8001702 <LL_RCC_MSI_IsEnabledRangeSelect>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x62>
 80023fa:	f7ff f982 	bl	8001702 <LL_RCC_MSI_IsEnabledRangeSelect>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0x4e>
 8002404:	f7ff f98d 	bl	8001722 <LL_RCC_MSI_GetRange>
 8002408:	4603      	mov	r3, r0
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	e005      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x5a>
 8002412:	f7ff f991 	bl	8001738 <LL_RCC_MSI_GetRangeAfterStandby>
 8002416:	4603      	mov	r3, r0
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	e014      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x8c>
 8002426:	f7ff f96c 	bl	8001702 <LL_RCC_MSI_IsEnabledRangeSelect>
 800242a:	4603      	mov	r3, r0
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x7a>
 8002430:	f7ff f977 	bl	8001722 <LL_RCC_MSI_GetRange>
 8002434:	4603      	mov	r3, r0
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	e005      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x86>
 800243e:	f7ff f97b 	bl	8001738 <LL_RCC_MSI_GetRangeAfterStandby>
 8002442:	4603      	mov	r3, r0
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x134>)
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d115      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800245c:	e012      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d102      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e00c      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d109      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002470:	f7ff f85a 	bl	8001528 <LL_RCC_HSE_IsEnabledDiv2>
 8002474:	4603      	mov	r3, r0
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_GetSysClockFreq+0x138>)
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e001      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002482:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002484:	f7ff f98b 	bl	800179e <LL_RCC_GetSysClkSource>
 8002488:	4603      	mov	r3, r0
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d12f      	bne.n	80024ee <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800248e:	f7ff fa72 	bl	8001976 <LL_RCC_PLL_GetMainSource>
 8002492:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d003      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0xde>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80024a0:	e00d      	b.n	80024be <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_RCC_GetSysClockFreq+0x138>)
 80024a4:	60fb      	str	r3, [r7, #12]
        break;
 80024a6:	e00d      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024a8:	f7ff f83e 	bl	8001528 <LL_RCC_HSE_IsEnabledDiv2>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_GetSysClockFreq+0x138>)
 80024b4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80024b6:	e005      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024ba:	60fb      	str	r3, [r7, #12]
        break;
 80024bc:	e002      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	60fb      	str	r3, [r7, #12]
        break;
 80024c2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80024c4:	f7ff fa35 	bl	8001932 <LL_RCC_PLL_GetN>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	fb03 f402 	mul.w	r4, r3, r2
 80024d0:	f7ff fa46 	bl	8001960 <LL_RCC_PLL_GetDivider>
 80024d4:	4603      	mov	r3, r0
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	3301      	adds	r3, #1
 80024da:	fbb4 f4f3 	udiv	r4, r4, r3
 80024de:	f7ff fa34 	bl	800194a <LL_RCC_PLL_GetR>
 80024e2:	4603      	mov	r3, r0
 80024e4:	0f5b      	lsrs	r3, r3, #29
 80024e6:	3301      	adds	r3, #1
 80024e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80024ec:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80024ee:	697b      	ldr	r3, [r7, #20]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd90      	pop	{r4, r7, pc}
 80024f8:	08006de8 	.word	0x08006de8
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	01e84800 	.word	0x01e84800

08002504 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b598      	push	{r3, r4, r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002508:	f7ff ff5c 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 800250c:	4604      	mov	r4, r0
 800250e:	f7ff f9b5 	bl	800187c <LL_RCC_GetAHBPrescaler>
 8002512:	4603      	mov	r3, r0
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_RCC_GetHCLKFreq+0x24>)
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd98      	pop	{r3, r4, r7, pc}
 8002528:	08006d88 	.word	0x08006d88

0800252c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b598      	push	{r3, r4, r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002530:	f7ff ffe8 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002534:	4604      	mov	r4, r0
 8002536:	f7ff f9b9 	bl	80018ac <LL_RCC_GetAPB1Prescaler>
 800253a:	4603      	mov	r3, r0
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	4a03      	ldr	r2, [pc, #12]	; (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd98      	pop	{r3, r4, r7, pc}
 800254c:	08006dc8 	.word	0x08006dc8

08002550 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002550:	b598      	push	{r3, r4, r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002554:	f7ff ffd6 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002558:	4604      	mov	r4, r0
 800255a:	f7ff f9b2 	bl	80018c2 <LL_RCC_GetAPB2Prescaler>
 800255e:	4603      	mov	r3, r0
 8002560:	0adb      	lsrs	r3, r3, #11
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	fa24 f303 	lsr.w	r3, r4, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd98      	pop	{r3, r4, r7, pc}
 8002570:	08006dc8 	.word	0x08006dc8

08002574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800258c:	f7ff f981 	bl	8001892 <LL_RCC_GetAHB3Prescaler>
 8002590:	4603      	mov	r3, r0
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	0c9c      	lsrs	r4, r3, #18
 80025b0:	f7fe ff76 	bl	80014a0 <HAL_PWREx_GetVoltageRange>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4619      	mov	r1, r3
 80025b8:	4620      	mov	r0, r4
 80025ba:	f000 f80b 	bl	80025d4 <RCC_SetFlashLatency>
 80025be:	4603      	mov	r3, r0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	08006de8 	.word	0x08006de8
 80025cc:	08006d88 	.word	0x08006d88
 80025d0:	431bde83 	.word	0x431bde83

080025d4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80025de:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <RCC_SetFlashLatency+0xf4>)
 80025e0:	f107 0320 	add.w	r3, r7, #32
 80025e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025e8:	6018      	str	r0, [r3, #0]
 80025ea:	3304      	adds	r3, #4
 80025ec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80025ee:	4a37      	ldr	r2, [pc, #220]	; (80026cc <RCC_SetFlashLatency+0xf8>)
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025f8:	6018      	str	r0, [r3, #0]
 80025fa:	3304      	adds	r3, #4
 80025fc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80025fe:	4a34      	ldr	r2, [pc, #208]	; (80026d0 <RCC_SetFlashLatency+0xfc>)
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	ca07      	ldmia	r2, {r0, r1, r2}
 8002606:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002614:	d11b      	bne.n	800264e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002616:	2300      	movs	r3, #0
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
 800261a:	e014      	b.n	8002646 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	3338      	adds	r3, #56	; 0x38
 8002622:	443b      	add	r3, r7
 8002624:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002628:	461a      	mov	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4293      	cmp	r3, r2
 800262e:	d807      	bhi.n	8002640 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	3338      	adds	r3, #56	; 0x38
 8002636:	443b      	add	r3, r7
 8002638:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800263e:	e021      	b.n	8002684 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002642:	3301      	adds	r3, #1
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	2b02      	cmp	r3, #2
 800264a:	d9e7      	bls.n	800261c <RCC_SetFlashLatency+0x48>
 800264c:	e01a      	b.n	8002684 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800264e:	2300      	movs	r3, #0
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002652:	e014      	b.n	800267e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	3338      	adds	r3, #56	; 0x38
 800265a:	443b      	add	r3, r7
 800265c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002660:	461a      	mov	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4293      	cmp	r3, r2
 8002666:	d807      	bhi.n	8002678 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	3338      	adds	r3, #56	; 0x38
 800266e:	443b      	add	r3, r7
 8002670:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002676:	e005      	b.n	8002684 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	3301      	adds	r3, #1
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b02      	cmp	r3, #2
 8002682:	d9e7      	bls.n	8002654 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <RCC_SetFlashLatency+0x100>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 0207 	bic.w	r2, r3, #7
 800268c:	4911      	ldr	r1, [pc, #68]	; (80026d4 <RCC_SetFlashLatency+0x100>)
 800268e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002694:	f7fe fb8c 	bl	8000db0 <HAL_GetTick>
 8002698:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800269a:	e008      	b.n	80026ae <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800269c:	f7fe fb88 	bl	8000db0 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e007      	b.n	80026be <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <RCC_SetFlashLatency+0x100>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1ef      	bne.n	800269c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3738      	adds	r7, #56	; 0x38
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	08006c88 	.word	0x08006c88
 80026cc:	08006c90 	.word	0x08006c90
 80026d0:	08006c98 	.word	0x08006c98
 80026d4:	58004000 	.word	0x58004000

080026d8 <LL_RCC_LSE_IsReady>:
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d101      	bne.n	80026f0 <LL_RCC_LSE_IsReady+0x18>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <LL_RCC_LSE_IsReady+0x1a>
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_SetUSARTClockSource>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	43db      	mvns	r3, r3
 8002710:	401a      	ands	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <LL_RCC_SetI2SClockSource>:
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800273e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <LL_RCC_SetLPUARTClockSource>:
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <LL_RCC_SetI2CClockSource>:
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002796:	43db      	mvns	r3, r3
 8002798:	401a      	ands	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80027a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_SetLPTIMClockSource>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	43db      	mvns	r3, r3
 80027ce:	401a      	ands	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <LL_RCC_SetRNGClockSource>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <LL_RCC_SetADCClockSource>:
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <LL_RCC_SetRTCClockSource>:
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <LL_RCC_GetRTCClockSource>:
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <LL_RCC_ForceBackupDomainReset>:
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <LL_RCC_ReleaseBackupDomainReset>:
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80028cc:	2300      	movs	r3, #0
 80028ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80028d0:	2300      	movs	r3, #0
 80028d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d058      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80028e0:	f7fe fdc2 	bl	8001468 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fa64 	bl	8000db0 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80028ea:	e009      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7fe fa60 	bl	8000db0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d902      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	74fb      	strb	r3, [r7, #19]
        break;
 80028fe:	e006      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002900:	4b7b      	ldr	r3, [pc, #492]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290c:	d1ee      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d13c      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002914:	f7ff ffa7 	bl	8002866 <LL_RCC_GetRTCClockSource>
 8002918:	4602      	mov	r2, r0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	429a      	cmp	r2, r3
 8002920:	d00f      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002930:	f7ff ffa5 	bl	800287e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002934:	f7ff ffb3 	bl	800289e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d014      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fa30 	bl	8000db0 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002952:	e00b      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe fa2c 	bl	8000db0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d902      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	74fb      	strb	r3, [r7, #19]
            break;
 800296a:	e004      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800296c:	f7ff feb4 	bl	80026d8 <LL_RCC_LSE_IsReady>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d1ee      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002976:	7cfb      	ldrb	r3, [r7, #19]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5b 	bl	800283c <LL_RCC_SetRTCClockSource>
 8002986:	e004      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002988:	7cfb      	ldrb	r3, [r7, #19]
 800298a:	74bb      	strb	r3, [r7, #18]
 800298c:	e001      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298e:	7cfb      	ldrb	r3, [r7, #19]
 8002990:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fea9 	bl	80026fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fe9e 	bl	80026fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fec0 	bl	8002754 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fee6 	bl	80027b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fedb 	bl	80027b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fed0 	bl	80027b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fea9 	bl	800277e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe9e 	bl	800277e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fe93 	bl	800277e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d011      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe5e 	bl	800272a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a76:	d107      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fea5 	bl	80027e8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d011      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fea3 	bl	8002812 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002ae6:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	58000400 	.word	0x58000400

08002af4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d071      	beq.n	8002bea <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fd ffd0 	bl	8000ac0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b28:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d051      	beq.n	8002bd8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b36:	22ca      	movs	r2, #202	; 0xca
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24
 8002b3a:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b3c:	2253      	movs	r2, #83	; 0x53
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fbe3 	bl	800330c <RTC_EnterInitMode>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d13f      	bne.n	8002bd0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a27      	ldr	r2, [pc, #156]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b56:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002b60:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4319      	orrs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	430b      	orrs	r3, r1
 8002b74:	491f      	ldr	r1, [pc, #124]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	491b      	ldr	r1, [pc, #108]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	4915      	ldr	r1, [pc, #84]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fbe6 	bl	8003374 <RTC_ExitInitMode>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a19      	ldr	r1, [r3, #32]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4319      	orrs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	490a      	ldr	r1, [pc, #40]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <HAL_RTC_Init+0x100>)
 8002bd2:	22ff      	movs	r2, #255	; 0xff
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
 8002bd6:	e001      	b.n	8002bdc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40002800 	.word	0x40002800

08002bf8 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_RTC_SetTime+0x1a>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e088      	b.n	8002d24 <HAL_RTC_SetTime+0x12c>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c22:	4b42      	ldr	r3, [pc, #264]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002c24:	22ca      	movs	r2, #202	; 0xca
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
 8002c28:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002c2a:	2253      	movs	r2, #83	; 0x53
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fb6c 	bl	800330c <RTC_EnterInitMode>
 8002c34:	4603      	mov	r3, r0
 8002c36:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002c38:	7cfb      	ldrb	r3, [r7, #19]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d15e      	bne.n	8002cfc <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4a:	d057      	beq.n	8002cfc <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d125      	bne.n	8002c9e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2200      	movs	r2, #0
 8002c62:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fbc1 	bl	80033f0 <RTC_ByteToBcd2>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fbba 	bl	80033f0 <RTC_ByteToBcd2>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c80:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	789b      	ldrb	r3, [r3, #2]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fbb2 	bl	80033f0 <RTC_ByteToBcd2>
 8002c8c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002c8e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	78db      	ldrb	r3, [r3, #3]
 8002c96:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e017      	b.n	8002cce <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002c9e:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2200      	movs	r2, #0
 8002cae:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cbc:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002cc2:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	78db      	ldrb	r3, [r3, #3]
 8002cc8:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8002cce:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cd6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002cda:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	68d9      	ldr	r1, [r3, #12]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	490d      	ldr	r1, [pc, #52]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fb39 	bl	8003374 <RTC_ExitInitMode>
 8002d02:	4603      	mov	r3, r0
 8002d04:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RTC_SetTime+0x134>)
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40002800 	.word	0x40002800

08002d30 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <HAL_RTC_GetTime+0xc0>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RTC_GetTime+0xc0>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d50:	d049      	beq.n	8002de6 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_RTC_GetTime+0xc0>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RTC_GetTime+0xc0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002d66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d6a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	0d9b      	lsrs	r3, r3, #22
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d11a      	bne.n	8002de6 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fb3a 	bl	800342e <RTC_Bcd2ToByte>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fb31 	bl	800342e <RTC_Bcd2ToByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fb28 	bl	800342e <RTC_Bcd2ToByte>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40002800 	.word	0x40002800

08002df4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_RTC_SetDate+0x1a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e071      	b.n	8002ef2 <HAL_RTC_SetDate+0xfe>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10e      	bne.n	8002e42 <HAL_RTC_SetDate+0x4e>
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	f023 0310 	bic.w	r3, r3, #16
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	330a      	adds	r3, #10
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11c      	bne.n	8002e82 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	78db      	ldrb	r3, [r3, #3]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 facf 	bl	80033f0 <RTC_ByteToBcd2>
 8002e52:	4603      	mov	r3, r0
 8002e54:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fac8 	bl	80033f0 <RTC_ByteToBcd2>
 8002e60:	4603      	mov	r3, r0
 8002e62:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e64:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	789b      	ldrb	r3, [r3, #2]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fac0 	bl	80033f0 <RTC_ByteToBcd2>
 8002e70:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002e72:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e00e      	b.n	8002ea0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	78db      	ldrb	r3, [r3, #3]
 8002e86:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e8e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002e94:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea0:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_RTC_SetDate+0x108>)
 8002ea2:	22ca      	movs	r2, #202	; 0xca
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_RTC_SetDate+0x108>)
 8002ea8:	2253      	movs	r2, #83	; 0x53
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fa2d 	bl	800330c <RTC_EnterInitMode>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <HAL_RTC_SetDate+0x108>)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ec4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ec8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa52 	bl	8003374 <RTC_ExitInitMode>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ed4:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RTC_SetDate+0x108>)
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40002800 	.word	0x40002800

08002f00 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8002f0c:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <HAL_RTC_GetDate+0x98>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f18:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	0b5b      	lsrs	r3, r3, #13
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11a      	bne.n	8002f8e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	78db      	ldrb	r3, [r3, #3]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa66 	bl	800342e <RTC_Bcd2ToByte>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fa5d 	bl	800342e <RTC_Bcd2ToByte>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	789b      	ldrb	r3, [r3, #2]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa54 	bl	800342e <RTC_Bcd2ToByte>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40002800 	.word	0x40002800

08002f9c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_RTC_SetAlarm_IT+0x1e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e0f3      	b.n	80031a2 <HAL_RTC_SetAlarm_IT+0x206>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8002fca:	4b78      	ldr	r3, [pc, #480]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fda:	d06a      	beq.n	80030b2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d13a      	bne.n	8003058 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002fe2:	4b72      	ldr	r3, [pc, #456]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f9f5 	bl	80033f0 <RTC_ByteToBcd2>
 8003006:	4603      	mov	r3, r0
 8003008:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f9ee 	bl	80033f0 <RTC_ByteToBcd2>
 8003014:	4603      	mov	r3, r0
 8003016:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003018:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	789b      	ldrb	r3, [r3, #2]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f9e6 	bl	80033f0 <RTC_ByteToBcd2>
 8003024:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003026:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	78db      	ldrb	r3, [r3, #3]
 800302e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003030:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303a:	4618      	mov	r0, r3
 800303c:	f000 f9d8 	bl	80033f0 <RTC_ByteToBcd2>
 8003040:	4603      	mov	r3, r0
 8003042:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003044:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800304c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e02c      	b.n	80030b2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003060:	d00d      	beq.n	800307e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800306a:	d008      	beq.n	800307e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800306c:	4b4f      	ldr	r3, [pc, #316]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2200      	movs	r2, #0
 800307c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	785b      	ldrb	r3, [r3, #1]
 8003088:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800308a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003090:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	78db      	ldrb	r3, [r3, #3]
 8003096:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003098:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80030a2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80030a8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030b4:	22ca      	movs	r2, #202	; 0xca
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
 80030b8:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030ba:	2253      	movs	r2, #83	; 0x53
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c6:	d12c      	bne.n	8003122 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80030c8:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a37      	ldr	r2, [pc, #220]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030d2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e0:	d107      	bne.n	80030f2 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4930      	ldr	r1, [pc, #192]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	644b      	str	r3, [r1, #68]	; 0x44
 80030f0:	e006      	b.n	8003100 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80030f2:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80030f8:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003100:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003114:	4b25      	ldr	r3, [pc, #148]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 800311a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800311e:	6193      	str	r3, [r2, #24]
 8003120:	e02b      	b.n	800317a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003122:	4b22      	ldr	r3, [pc, #136]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003128:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800312c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800312e:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003130:	2202      	movs	r2, #2
 8003132:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313a:	d107      	bne.n	800314c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	699a      	ldr	r2, [r3, #24]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	4919      	ldr	r1, [pc, #100]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003146:	4313      	orrs	r3, r2
 8003148:	64cb      	str	r3, [r1, #76]	; 0x4c
 800314a:	e006      	b.n	800315a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800314c:	4a17      	ldr	r2, [pc, #92]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 8003174:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003178:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_RTC_SetAlarm_IT+0x214>)
 800317c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003180:	4a0b      	ldr	r2, [pc, #44]	; (80031b0 <HAL_RTC_SetAlarm_IT+0x214>)
 8003182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003186:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800318a:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_RTC_SetAlarm_IT+0x210>)
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd90      	pop	{r4, r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40002800 	.word	0x40002800
 80031b0:	58000800 	.word	0x58000800

080031b4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_RTC_DeactivateAlarm+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e048      	b.n	800325e <HAL_RTC_DeactivateAlarm+0xaa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031de:	22ca      	movs	r2, #202	; 0xca
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
 80031e2:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031e4:	2253      	movs	r2, #83	; 0x53
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ee:	d115      	bne.n	800321c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031fa:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003206:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f023 0201 	bic.w	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003216:	2201      	movs	r2, #1
 8003218:	65da      	str	r2, [r3, #92]	; 0x5c
 800321a:	e014      	b.n	8003246 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003222:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003226:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 800322a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 800322e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003232:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	f023 0202 	bic.w	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003242:	2202      	movs	r2, #2
 8003244:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	40002800 	.word	0x40002800

0800326c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RTC_AlarmIRQHandler+0x50>)
 8003276:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RTC_AlarmIRQHandler+0x50>)
 800328c:	2201      	movs	r2, #1
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fd f995 	bl	80005c0 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RTC_AlarmIRQHandler+0x50>)
 80032a2:	2202      	movs	r2, #2
 80032a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f8dc 	bl	8003464 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40002800 	.word	0x40002800

080032c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <HAL_RTC_WaitForSynchro+0x48>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a0e      	ldr	r2, [pc, #56]	; (8003308 <HAL_RTC_WaitForSynchro+0x48>)
 80032ce:	f023 0320 	bic.w	r3, r3, #32
 80032d2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80032d4:	f7fd fd6c 	bl	8000db0 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80032da:	e009      	b.n	80032f0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032dc:	f7fd fd68 	bl	8000db0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ea:	d901      	bls.n	80032f0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e006      	b.n	80032fe <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RTC_WaitForSynchro+0x48>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ef      	beq.n	80032dc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40002800 	.word	0x40002800

0800330c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <RTC_EnterInitMode+0x64>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d120      	bne.n	8003366 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <RTC_EnterInitMode+0x64>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <RTC_EnterInitMode+0x64>)
 800332a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800332e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003330:	f7fd fd3e 	bl	8000db0 <HAL_GetTick>
 8003334:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003336:	e00d      	b.n	8003354 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003338:	f7fd fd3a 	bl	8000db0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003346:	d905      	bls.n	8003354 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2203      	movs	r2, #3
 8003350:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <RTC_EnterInitMode+0x64>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <RTC_EnterInitMode+0x5a>
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d1e8      	bne.n	8003338 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40002800 	.word	0x40002800

08003374 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <RTC_ExitInitMode+0x78>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <RTC_ExitInitMode+0x78>)
 8003386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <RTC_ExitInitMode+0x78>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10c      	bne.n	80033b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff91 	bl	80032c0 <HAL_RTC_WaitForSynchro>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01e      	beq.n	80033e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2203      	movs	r2, #3
 80033a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e017      	b.n	80033e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	4a0d      	ldr	r2, [pc, #52]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033b8:	f023 0320 	bic.w	r3, r3, #32
 80033bc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ff7e 	bl	80032c0 <HAL_RTC_WaitForSynchro>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80033d6:	4b05      	ldr	r3, [pc, #20]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	4a04      	ldr	r2, [pc, #16]	; (80033ec <RTC_ExitInitMode+0x78>)
 80033dc:	f043 0320 	orr.w	r3, r3, #32
 80033e0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40002800 	.word	0x40002800

080033f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003402:	e005      	b.n	8003410 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	3b0a      	subs	r3, #10
 800340e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	2b09      	cmp	r3, #9
 8003414:	d8f6      	bhi.n	8003404 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	b2da      	uxtb	r2, r3
 800341e:	7afb      	ldrb	r3, [r7, #11]
 8003420:	4313      	orrs	r3, r2
 8003422:	b2db      	uxtb	r3, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4413      	add	r3, r2
 8003458:	b2db      	uxtb	r3, r3
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <LL_RCC_GetUSARTClockSource>:
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800347e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003482:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	401a      	ands	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	4313      	orrs	r3, r2
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <LL_RCC_GetLPUARTClockSource>:
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80034a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4013      	ands	r3, r2
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e042      	b.n	8003550 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fd fb23 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2224      	movs	r2, #36	; 0x24
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f976 	bl	80037ec <UART_SetConfig>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fbde 	bl	8003cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fc64 	bl	8003e16 <UART_CheckIdleState>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	2b20      	cmp	r3, #32
 8003570:	d173      	bne.n	800365a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_UART_Transmit+0x26>
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06c      	b.n	800365c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2221      	movs	r2, #33	; 0x21
 800358e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003592:	f7fd fc0d 	bl	8000db0 <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b0:	d108      	bne.n	80035c4 <HAL_UART_Transmit+0x6c>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d104      	bne.n	80035c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e003      	b.n	80035cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035cc:	e02c      	b.n	8003628 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fc6a 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e039      	b.n	800365c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	3302      	adds	r3, #2
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e007      	b.n	8003616 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	3301      	adds	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1cc      	bne.n	80035ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	2140      	movs	r1, #64	; 0x40
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fc37 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e006      	b.n	800365c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367a:	2b20      	cmp	r3, #32
 800367c:	f040 80b1 	bne.w	80037e2 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Receive+0x28>
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0a9      	b.n	80037e4 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2222      	movs	r2, #34	; 0x22
 800369c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a6:	f7fd fb83 	bl	8000db0 <HAL_GetTick>
 80036aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	88fa      	ldrh	r2, [r7, #6]
 80036b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	88fa      	ldrh	r2, [r7, #6]
 80036b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d10e      	bne.n	80036e4 <HAL_UART_Receive+0x80>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_UART_Receive+0x76>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036d8:	e02d      	b.n	8003736 <HAL_UART_Receive+0xd2>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036e2:	e028      	b.n	8003736 <HAL_UART_Receive+0xd2>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <HAL_UART_Receive+0xa4>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d104      	bne.n	80036fe <HAL_UART_Receive+0x9a>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	22ff      	movs	r2, #255	; 0xff
 80036f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80036fc:	e01b      	b.n	8003736 <HAL_UART_Receive+0xd2>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	227f      	movs	r2, #127	; 0x7f
 8003702:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003706:	e016      	b.n	8003736 <HAL_UART_Receive+0xd2>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003710:	d10d      	bne.n	800372e <HAL_UART_Receive+0xca>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Receive+0xc0>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	227f      	movs	r2, #127	; 0x7f
 800371e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003722:	e008      	b.n	8003736 <HAL_UART_Receive+0xd2>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	223f      	movs	r2, #63	; 0x3f
 8003728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800372c:	e003      	b.n	8003736 <HAL_UART_Receive+0xd2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800373c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	d108      	bne.n	800375a <HAL_UART_Receive+0xf6>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	e003      	b.n	8003762 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003762:	e032      	b.n	80037ca <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	2120      	movs	r1, #32
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fb9f 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e032      	b.n	80037e4 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10c      	bne.n	800379e <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b29a      	uxth	r2, r3
 800378c:	8a7b      	ldrh	r3, [r7, #18]
 800378e:	4013      	ands	r3, r2
 8003790:	b29a      	uxth	r2, r3
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3302      	adds	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e00c      	b.n	80037b8 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	8a7b      	ldrh	r3, [r7, #18]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4013      	ands	r3, r2
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1c6      	bne.n	8003764 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80037e2:	2302      	movs	r3, #2
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b08c      	sub	sp, #48	; 0x30
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	431a      	orrs	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4313      	orrs	r3, r2
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b94      	ldr	r3, [pc, #592]	; (8003a6c <UART_SetConfig+0x280>)
 800381c:	4013      	ands	r3, r2
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003824:	430b      	orrs	r3, r1
 8003826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a89      	ldr	r2, [pc, #548]	; (8003a70 <UART_SetConfig+0x284>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003854:	4313      	orrs	r3, r2
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003862:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800386c:	430b      	orrs	r3, r1
 800386e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f023 010f 	bic.w	r1, r3, #15
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <UART_SetConfig+0x288>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d127      	bne.n	80038e0 <UART_SetConfig+0xf4>
 8003890:	2003      	movs	r0, #3
 8003892:	f7ff fdf0 	bl	8003476 <LL_RCC_GetUSARTClockSource>
 8003896:	4603      	mov	r3, r0
 8003898:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800389c:	2b03      	cmp	r3, #3
 800389e:	d81b      	bhi.n	80038d8 <UART_SetConfig+0xec>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <UART_SetConfig+0xbc>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038b9 	.word	0x080038b9
 80038ac:	080038c9 	.word	0x080038c9
 80038b0:	080038c1 	.word	0x080038c1
 80038b4:	080038d1 	.word	0x080038d1
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038be:	e080      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80038c0:	2302      	movs	r3, #2
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038c6:	e07c      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80038c8:	2304      	movs	r3, #4
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ce:	e078      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80038d0:	2308      	movs	r3, #8
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d6:	e074      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80038d8:	2310      	movs	r3, #16
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	e070      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a64      	ldr	r2, [pc, #400]	; (8003a78 <UART_SetConfig+0x28c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d138      	bne.n	800395c <UART_SetConfig+0x170>
 80038ea:	200c      	movs	r0, #12
 80038ec:	f7ff fdc3 	bl	8003476 <LL_RCC_GetUSARTClockSource>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d82c      	bhi.n	8003954 <UART_SetConfig+0x168>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <UART_SetConfig+0x114>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003935 	.word	0x08003935
 8003904:	08003955 	.word	0x08003955
 8003908:	08003955 	.word	0x08003955
 800390c:	08003955 	.word	0x08003955
 8003910:	08003945 	.word	0x08003945
 8003914:	08003955 	.word	0x08003955
 8003918:	08003955 	.word	0x08003955
 800391c:	08003955 	.word	0x08003955
 8003920:	0800393d 	.word	0x0800393d
 8003924:	08003955 	.word	0x08003955
 8003928:	08003955 	.word	0x08003955
 800392c:	08003955 	.word	0x08003955
 8003930:	0800394d 	.word	0x0800394d
 8003934:	2300      	movs	r3, #0
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393a:	e042      	b.n	80039c2 <UART_SetConfig+0x1d6>
 800393c:	2302      	movs	r3, #2
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003942:	e03e      	b.n	80039c2 <UART_SetConfig+0x1d6>
 8003944:	2304      	movs	r3, #4
 8003946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394a:	e03a      	b.n	80039c2 <UART_SetConfig+0x1d6>
 800394c:	2308      	movs	r3, #8
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e036      	b.n	80039c2 <UART_SetConfig+0x1d6>
 8003954:	2310      	movs	r3, #16
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e032      	b.n	80039c2 <UART_SetConfig+0x1d6>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a43      	ldr	r2, [pc, #268]	; (8003a70 <UART_SetConfig+0x284>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d12a      	bne.n	80039bc <UART_SetConfig+0x1d0>
 8003966:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800396a:	f7ff fd96 	bl	800349a <LL_RCC_GetLPUARTClockSource>
 800396e:	4603      	mov	r3, r0
 8003970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003974:	d01a      	beq.n	80039ac <UART_SetConfig+0x1c0>
 8003976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397a:	d81b      	bhi.n	80039b4 <UART_SetConfig+0x1c8>
 800397c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003980:	d00c      	beq.n	800399c <UART_SetConfig+0x1b0>
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003986:	d815      	bhi.n	80039b4 <UART_SetConfig+0x1c8>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x1a8>
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003990:	d008      	beq.n	80039a4 <UART_SetConfig+0x1b8>
 8003992:	e00f      	b.n	80039b4 <UART_SetConfig+0x1c8>
 8003994:	2300      	movs	r3, #0
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399a:	e012      	b.n	80039c2 <UART_SetConfig+0x1d6>
 800399c:	2302      	movs	r3, #2
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a2:	e00e      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80039a4:	2304      	movs	r3, #4
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039aa:	e00a      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80039ac:	2308      	movs	r3, #8
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b2:	e006      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80039b4:	2310      	movs	r3, #16
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ba:	e002      	b.n	80039c2 <UART_SetConfig+0x1d6>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <UART_SetConfig+0x284>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	f040 80a4 	bne.w	8003b16 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d823      	bhi.n	8003a1e <UART_SetConfig+0x232>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0x1f0>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a1f 	.word	0x08003a1f
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a0f 	.word	0x08003a0f
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a1f 	.word	0x08003a1f
 80039fc:	08003a17 	.word	0x08003a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a00:	f7fe fd94 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a06:	e010      	b.n	8003a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <UART_SetConfig+0x290>)
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a0c:	e00d      	b.n	8003a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7fe fcd9 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8003a12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a14:	e009      	b.n	8003a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a1c:	e005      	b.n	8003a2a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8137 	beq.w	8003ca0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <UART_SetConfig+0x294>)
 8003a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d305      	bcc.n	8003a62 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d910      	bls.n	8003a84 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a68:	e11a      	b.n	8003ca0 <UART_SetConfig+0x4b4>
 8003a6a:	bf00      	nop
 8003a6c:	cfff69f3 	.word	0xcfff69f3
 8003a70:	40008000 	.word	0x40008000
 8003a74:	40013800 	.word	0x40013800
 8003a78:	40004400 	.word	0x40004400
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	08006e28 	.word	0x08006e28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	2200      	movs	r2, #0
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	4a8e      	ldr	r2, [pc, #568]	; (8003ccc <UART_SetConfig+0x4e0>)
 8003a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2200      	movs	r2, #0
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa6:	f7fc fbc3 	bl	8000230 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	020b      	lsls	r3, r1, #8
 8003abc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ac0:	0202      	lsls	r2, r0, #8
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	6849      	ldr	r1, [r1, #4]
 8003ac6:	0849      	lsrs	r1, r1, #1
 8003ac8:	2000      	movs	r0, #0
 8003aca:	460c      	mov	r4, r1
 8003acc:	4605      	mov	r5, r0
 8003ace:	eb12 0804 	adds.w	r8, r2, r4
 8003ad2:	eb43 0905 	adc.w	r9, r3, r5
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	469a      	mov	sl, r3
 8003ade:	4693      	mov	fp, r2
 8003ae0:	4652      	mov	r2, sl
 8003ae2:	465b      	mov	r3, fp
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	f7fc fba2 	bl	8000230 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4613      	mov	r3, r2
 8003af2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afa:	d308      	bcc.n	8003b0e <UART_SetConfig+0x322>
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b02:	d204      	bcs.n	8003b0e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a3a      	ldr	r2, [r7, #32]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e0c8      	b.n	8003ca0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b14:	e0c4      	b.n	8003ca0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1e:	d167      	bne.n	8003bf0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003b20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d828      	bhi.n	8003b7a <UART_SetConfig+0x38e>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0x344>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b7b 	.word	0x08003b7b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7fe fcea 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003b58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b5a:	e014      	b.n	8003b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7fe fcf8 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8003b60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b62:	e010      	b.n	8003b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b5a      	ldr	r3, [pc, #360]	; (8003cd0 <UART_SetConfig+0x4e4>)
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b68:	e00d      	b.n	8003b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7fe fc2b 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b70:	e009      	b.n	8003b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b78:	e005      	b.n	8003b86 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8089 	beq.w	8003ca0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	4a4e      	ldr	r2, [pc, #312]	; (8003ccc <UART_SetConfig+0x4e0>)
 8003b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba0:	005a      	lsls	r2, r3, #1
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	441a      	add	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	d916      	bls.n	8003be8 <UART_SetConfig+0x3fc>
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d212      	bcs.n	8003be8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f023 030f 	bic.w	r3, r3, #15
 8003bca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	8bfa      	ldrh	r2, [r7, #30]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	e05b      	b.n	8003ca0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bee:	e057      	b.n	8003ca0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d828      	bhi.n	8003c4a <UART_SetConfig+0x45e>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <UART_SetConfig+0x414>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c2d 	.word	0x08003c2d
 8003c08:	08003c35 	.word	0x08003c35
 8003c0c:	08003c4b 	.word	0x08003c4b
 8003c10:	08003c3b 	.word	0x08003c3b
 8003c14:	08003c4b 	.word	0x08003c4b
 8003c18:	08003c4b 	.word	0x08003c4b
 8003c1c:	08003c4b 	.word	0x08003c4b
 8003c20:	08003c43 	.word	0x08003c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c24:	f7fe fc82 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c2a:	e014      	b.n	8003c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c2c:	f7fe fc90 	bl	8002550 <HAL_RCC_GetPCLK2Freq>
 8003c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c32:	e010      	b.n	8003c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c34:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <UART_SetConfig+0x4e4>)
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c38:	e00d      	b.n	8003c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c3a:	f7fe fbc3 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8003c3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c40:	e009      	b.n	8003c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c48:	e005      	b.n	8003c56 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c54:	bf00      	nop
    }

    if (pclk != 0U)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d021      	beq.n	8003ca0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <UART_SetConfig+0x4e0>)
 8003c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	441a      	add	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	d909      	bls.n	8003c9a <UART_SetConfig+0x4ae>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d205      	bcs.n	8003c9a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	e002      	b.n	8003ca0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003cbc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3730      	adds	r7, #48	; 0x30
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cca:	bf00      	nop
 8003ccc:	08006e28 	.word	0x08006e28
 8003cd0:	00f42400 	.word	0x00f42400

08003cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01a      	beq.n	8003dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd2:	d10a      	bne.n	8003dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af02      	add	r7, sp, #8
 8003e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e26:	f7fc ffc3 	bl	8000db0 <HAL_GetTick>
 8003e2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d10e      	bne.n	8003e58 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f832 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e028      	b.n	8003eaa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d10e      	bne.n	8003e84 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f81c 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e012      	b.n	8003eaa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b09c      	sub	sp, #112	; 0x70
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec2:	e0a9      	b.n	8004018 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eca:	f000 80a5 	beq.w	8004018 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fc ff6f 	bl	8000db0 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d140      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e6      	bne.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f36:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e069      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d051      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f82:	d149      	bne.n	8004018 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
 8003fae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fe0:	623a      	str	r2, [r7, #32]
 8003fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69f9      	ldr	r1, [r7, #28]
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e010      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	429a      	cmp	r2, r3
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	429a      	cmp	r2, r3
 8004034:	f43f af46 	beq.w	8003ec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3770      	adds	r7, #112	; 0x70
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_UARTEx_DisableFifoMode+0x16>
 8004054:	2302      	movs	r3, #2
 8004056:	e027      	b.n	80040a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004086:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e02d      	b.n	8004126 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2224      	movs	r2, #36	; 0x24
 80040d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f850 	bl	80041ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004142:	2302      	movs	r3, #2
 8004144:	e02d      	b.n	80041a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2224      	movs	r2, #36	; 0x24
 8004152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f812 	bl	80041ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d108      	bne.n	80041ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041cc:	e031      	b.n	8004232 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041ce:	2308      	movs	r3, #8
 80041d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041d2:	2308      	movs	r3, #8
 80041d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	0e5b      	lsrs	r3, r3, #25
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	0f5b      	lsrs	r3, r3, #29
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041f6:	7bbb      	ldrb	r3, [r7, #14]
 80041f8:	7b3a      	ldrb	r2, [r7, #12]
 80041fa:	4910      	ldr	r1, [pc, #64]	; (800423c <UARTEx_SetNbDataToProcess+0x90>)
 80041fc:	5c8a      	ldrb	r2, [r1, r2]
 80041fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004202:	7b3a      	ldrb	r2, [r7, #12]
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <UARTEx_SetNbDataToProcess+0x94>)
 8004206:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004208:	fb93 f3f2 	sdiv	r3, r3, r2
 800420c:	b29a      	uxth	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	7b7a      	ldrb	r2, [r7, #13]
 8004218:	4908      	ldr	r1, [pc, #32]	; (800423c <UARTEx_SetNbDataToProcess+0x90>)
 800421a:	5c8a      	ldrb	r2, [r1, r2]
 800421c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004220:	7b7a      	ldrb	r2, [r7, #13]
 8004222:	4907      	ldr	r1, [pc, #28]	; (8004240 <UARTEx_SetNbDataToProcess+0x94>)
 8004224:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004226:	fb93 f3f2 	sdiv	r3, r3, r2
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	08006e40 	.word	0x08006e40
 8004240:	08006e48 	.word	0x08006e48

08004244 <calendar_init>:
 * this module.
 *
 * Note: will not reinitialize/reset if already initialized.
 */
CalendarStatus calendar_init(RTC_HandleTypeDef* hrtc)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	// check for pointer to initialized RTC handle
	if (hrtc != NULL && hrtc->Instance != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d015      	beq.n	800427e <calendar_init+0x3a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d011      	beq.n	800427e <calendar_init+0x3a>
	{
		// initialize only if not already initialized
		if (!_isInit)
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <calendar_init+0x44>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	f083 0301 	eor.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <calendar_init+0x36>
		{
			// pass pointer to alarm control
			rtcCalendarControl_init(hrtc);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fbc1 	bl	80049f0 <rtcCalendarControl_init>

			// initialize the calendar
			eventSLL_reset(&_eventQueue);
 800426e:	4807      	ldr	r0, [pc, #28]	; (800428c <calendar_init+0x48>)
 8004270:	f000 f93c 	bl	80044ec <eventSLL_reset>

			// set init flag
			_isInit = true;
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <calendar_init+0x44>)
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
		}

		return CALENDAR_OKAY;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <calendar_init+0x3c>
	}

	// module already initialized
	else
	{
		return CALENDAR_ERROR;
 800427e:	2301      	movs	r3, #1
	}
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20000160 	.word	0x20000160
 800428c:	20000164 	.word	0x20000164

08004290 <calendar_start>:
 * and sets RTC Alarm A for the next event transition (start or end of event).
 * Executes start of event callback if starting within an event.  Ignores past
 * events.
 */
CalendarStatus calendar_start(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
	// if the module has been initialized
	if (_isInit)
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <calendar_start+0x34>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00f      	beq.n	80042bc <calendar_start+0x2c>
	{
		// only start if the calendar has been paused
		if (!_isRunning)
 800429c:	4b0a      	ldr	r3, [pc, #40]	; (80042c8 <calendar_start+0x38>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	f083 0301 	eor.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <calendar_start+0x28>
		{
			_update();
 80042aa:	f000 f8ab 	bl	8004404 <_update>

			// set is running flag
			_isRunning = true;
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <calendar_start+0x38>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]

			return CALENDAR_OKAY;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e002      	b.n	80042be <calendar_start+0x2e>
		}

		// report that the calendar is already running
		else
		{
			return CALENDAR_RUNNING;
 80042b8:	2306      	movs	r3, #6
 80042ba:	e000      	b.n	80042be <calendar_start+0x2e>
	}

	// module is not initialized
	else
	{
		return CALENDAR_NOT_INIT;
 80042bc:	2302      	movs	r3, #2
	}
}
 80042be:	4618      	mov	r0, r3
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000160 	.word	0x20000160
 80042c8:	20000161 	.word	0x20000161

080042cc <calendar_setDateTime>:
/* calendar_setDateTime
 *
 * Set the date/time within the RTC.
 */
CalendarStatus calendar_setDateTime(const DateTime dateTime)
{
 80042cc:	b5b0      	push	{r4, r5, r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	463b      	mov	r3, r7
 80042d4:	e883 0003 	stmia.w	r3, {r0, r1}
	// if the module has been initialized
	if (_isInit)
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <calendar_setDateTime+0x3c>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <calendar_setDateTime+0x30>
	{
		// set the date and time in the RTC
		rtcCalendarControl_setDateTime(dateTime.year, dateTime.month, dateTime.day,
 80042e0:	7838      	ldrb	r0, [r7, #0]
 80042e2:	7879      	ldrb	r1, [r7, #1]
 80042e4:	78bc      	ldrb	r4, [r7, #2]
 80042e6:	78fd      	ldrb	r5, [r7, #3]
 80042e8:	793b      	ldrb	r3, [r7, #4]
 80042ea:	797a      	ldrb	r2, [r7, #5]
 80042ec:	9201      	str	r2, [sp, #4]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	462b      	mov	r3, r5
 80042f2:	4622      	mov	r2, r4
 80042f4:	f000 fb96 	bl	8004a24 <rtcCalendarControl_setDateTime>
				dateTime.hour, dateTime.minute, dateTime.second);

		return CALENDAR_OKAY;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <calendar_setDateTime+0x32>
	}

	// if the module has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 80042fc:	2302      	movs	r3, #2
	}
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bdb0      	pop	{r4, r5, r7, pc}
 8004306:	bf00      	nop
 8004308:	20000160 	.word	0x20000160

0800430c <calendar_getDateTime>:
/* calendar_getDateTime
 *
 * Get the date/time within the RTC.
 */
CalendarStatus calendar_getDateTime(DateTime* const dateTime)
{
 800430c:	b5b0      	push	{r4, r5, r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
	// if the module is initialized
	if (_isInit)
 8004314:	4b0d      	ldr	r3, [pc, #52]	; (800434c <calendar_getDateTime+0x40>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d012      	beq.n	8004342 <calendar_getDateTime+0x36>
	{
		// get the date and time in the RTC
		rtcCalendarControl_getDateTime(&(dateTime->year), &(dateTime->month),
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	1c59      	adds	r1, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1c9c      	adds	r4, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	1cdd      	adds	r5, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3304      	adds	r3, #4
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	3205      	adds	r2, #5
 8004332:	9201      	str	r2, [sp, #4]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	462b      	mov	r3, r5
 8004338:	4622      	mov	r2, r4
 800433a:	f000 fc49 	bl	8004bd0 <rtcCalendarControl_getDateTime>
				&(dateTime->day), &(dateTime->hour), &(dateTime->minute),
				&(dateTime->second));

		return CALENDAR_OKAY;
 800433e:	2300      	movs	r3, #0
 8004340:	e000      	b.n	8004344 <calendar_getDateTime+0x38>
	}

	// the module has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004342:	2302      	movs	r3, #2
	}
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bdb0      	pop	{r4, r5, r7, pc}
 800434c:	20000160 	.word	0x20000160

08004350 <calendar_addEvent>:
 *
 * Note: does not sort events in monotonic order, nor does it check for
 * 	overlapping events.
 */
CalendarStatus calendar_addEvent(const struct CalendarEvent event)
{
 8004350:	b084      	sub	sp, #16
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af02      	add	r7, sp, #8
 8004358:	f107 0c08 	add.w	ip, r7, #8
 800435c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// add only if the calendar has been initialized
	if (_isInit)
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <calendar_addEvent+0x50>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <calendar_addEvent+0x40>
	{
		// attempt to add event and report success/failure
		if (eventSLL_insert(&_eventQueue, event))
 8004368:	466a      	mov	r2, sp
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004372:	e882 0003 	stmia.w	r2, {r0, r1}
 8004376:	f107 0308 	add.w	r3, r7, #8
 800437a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800437c:	4809      	ldr	r0, [pc, #36]	; (80043a4 <calendar_addEvent+0x54>)
 800437e:	f000 f906 	bl	800458e <eventSLL_insert>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <calendar_addEvent+0x3c>
		{
			return CALENDAR_OKAY;
 8004388:	2300      	movs	r3, #0
 800438a:	e002      	b.n	8004392 <calendar_addEvent+0x42>
		}
		else
		{
			return CALENDAR_FULL;
 800438c:	2303      	movs	r3, #3
 800438e:	e000      	b.n	8004392 <calendar_addEvent+0x42>
	}

	// the calendar has not been initialized
	else
	{
		return CALENDAR_NOT_INIT;
 8004390:	2302      	movs	r3, #2
	}
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800439a:	b004      	add	sp, #16
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000160 	.word	0x20000160
 80043a4:	20000164 	.word	0x20000164

080043a8 <calendar_update>:
 * Note:
 * 	Will not run if the module has not been initialized and if the calendar
 * 	is not running.
 */
CalendarStatus calendar_update(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
	// if the calendar module has been initialized
	if (_isInit)
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <calendar_update+0x38>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d011      	beq.n	80043d8 <calendar_update+0x30>
	{
		// only update if the calendar is running
		if (_isRunning)
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <calendar_update+0x3c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <calendar_update+0x2c>
		{
			// only update if an alarm has fired
			if (_alarmAFired) {
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <calendar_update+0x40>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <calendar_update+0x28>
				// update the calendar's state
				_update();
 80043c6:	f000 f81d 	bl	8004404 <_update>

				// reset alarm fired flag
				_alarmAFired = false;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <calendar_update+0x40>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
			}

			return CALENDAR_OKAY;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e002      	b.n	80043da <calendar_update+0x32>
		}

		// report that the calendar is paused
		else
		{
			return CALENDAR_PAUSED;
 80043d4:	2305      	movs	r3, #5
 80043d6:	e000      	b.n	80043da <calendar_update+0x32>
	}

	// the module is not initialized
	else
	{
		return CALENDAR_NOT_INIT;
 80043d8:	2302      	movs	r3, #2
	}
}
 80043da:	4618      	mov	r0, r3
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000160 	.word	0x20000160
 80043e4:	20000161 	.word	0x20000161
 80043e8:	20000162 	.word	0x20000162

080043ec <calendar_AlarmA_ISR>:
 *
 * RTC Alarm A interrupt service routine.  To only be called within the
 * RTC Alarm A ISR (HAL_RTC_AlarmAEventCallback()).
 */
void calendar_AlarmA_ISR(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <calendar_AlarmA_ISR+0x14>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000162 	.word	0x20000162

08004404 <_update>:
 * appropriately.
 *
 * Also handles reseting the alarm for events that occur in a following month/year.
 */
void _update(void)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af02      	add	r7, sp, #8
	DateTime nextAlarm;
	DateTime now;
	int prevInProgress;

	// get calendar alarm for next alarm in event list relative to now
	rtcCalendarControl_getDateTime(&(now.year), &(now.month), &(now.day),
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	1cdc      	adds	r4, r3, #3
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	1c9a      	adds	r2, r3, #2
 8004412:	1d3b      	adds	r3, r7, #4
 8004414:	1c59      	adds	r1, r3, #1
 8004416:	1d38      	adds	r0, r7, #4
 8004418:	1d3b      	adds	r3, r7, #4
 800441a:	3305      	adds	r3, #5
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	3304      	adds	r3, #4
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	4623      	mov	r3, r4
 8004426:	f000 fbd3 	bl	8004bd0 <rtcCalendarControl_getDateTime>
			&(now.hour), &(now.minute), &(now.second));

	// store the currently running event to test index to check if an
	// event change has occurred
	prevInProgress = _eventQueue.inProgress;
 800442a:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <_update+0xe4>)
 800442c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004430:	617b      	str	r3, [r7, #20]

	// if there is an alarm to set upon updating the events queue
	if (eventSLL_getNextAlarm(&_eventQueue, now, &nextAlarm))
 8004432:	f107 030c 	add.w	r3, r7, #12
 8004436:	1d3a      	adds	r2, r7, #4
 8004438:	ca06      	ldmia	r2, {r1, r2}
 800443a:	482b      	ldr	r0, [pc, #172]	; (80044e8 <_update+0xe4>)
 800443c:	f000 f9b2 	bl	80047a4 <eventSLL_getNextAlarm>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d006      	beq.n	8004454 <_update+0x50>
	{
		// set Alarm A
		rtcCalendarControl_setAlarm_A(nextAlarm.day, nextAlarm.hour,
 8004446:	7bb8      	ldrb	r0, [r7, #14]
 8004448:	7bf9      	ldrb	r1, [r7, #15]
 800444a:	7c3a      	ldrb	r2, [r7, #16]
 800444c:	7c7b      	ldrb	r3, [r7, #17]
 800444e:	f000 fc53 	bl	8004cf8 <rtcCalendarControl_setAlarm_A>
 8004452:	e001      	b.n	8004458 <_update+0x54>
	}

	// if there is no alarm to set, disable the alarm
	else
	{
		rtcCalendarControl_diableAlarm_A();
 8004454:	f000 fcf2 	bl	8004e3c <rtcCalendarControl_diableAlarm_A>
	}

	// if exiting an event
	if (_eventQueue.inProgress != prevInProgress
 8004458:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <_update+0xe4>)
 800445a:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	429a      	cmp	r2, r3
 8004462:	d018      	beq.n	8004496 <_update+0x92>
			&& prevInProgress != EVENTS_SLL_NO_EVENT)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800446a:	d014      	beq.n	8004496 <_update+0x92>
	{
		// call end event callback for exited event (if registered)
		if (_eventQueue.events[prevInProgress].event.end_callback != NULL)
 800446c:	491e      	ldr	r1, [pc, #120]	; (80044e8 <_update+0xe4>)
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3310      	adds	r3, #16
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <_update+0x92>
			(*_eventQueue.events[prevInProgress].event.end_callback)();
 8004482:	4919      	ldr	r1, [pc, #100]	; (80044e8 <_update+0xe4>)
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3310      	adds	r3, #16
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4798      	blx	r3
	}

	// if entering an event
	if (_eventQueue.inProgress != EVENTS_SLL_NO_EVENT
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <_update+0xe4>)
 8004498:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a0:	d01e      	beq.n	80044e0 <_update+0xdc>
			&& _eventQueue.inProgress != prevInProgress)
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <_update+0xe4>)
 80044a4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d018      	beq.n	80044e0 <_update+0xdc>
	{
		// call start event callback for entered event (if registered)
		if (_eventQueue.events[_eventQueue.inProgress].event.start_callback != NULL)
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <_update+0xe4>)
 80044b0:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 80044b4:	490c      	ldr	r1, [pc, #48]	; (80044e8 <_update+0xe4>)
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	330c      	adds	r3, #12
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <_update+0xdc>
			(*_eventQueue.events[_eventQueue.inProgress].event.start_callback)();
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <_update+0xe4>)
 80044ca:	f8d3 2388 	ldr.w	r2, [r3, #904]	; 0x388
 80044ce:	4906      	ldr	r1, [pc, #24]	; (80044e8 <_update+0xe4>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	1a9b      	subs	r3, r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	330c      	adds	r3, #12
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4798      	blx	r3
	}
}
 80044e0:	bf00      	nop
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd90      	pop	{r4, r7, pc}
 80044e8:	20000164 	.word	0x20000164

080044ec <eventSLL_reset>:
/* eventSLL_reset
 *
 * Resets operation variables and clears events storage.
 */
bool eventSLL_reset(Event_SLL* const sll)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	if (sll != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d044      	beq.n	8004584 <eventSLL_reset+0x98>
	{
		int idx;

		sll->inProgress = EVENTS_SLL_NO_EVENT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004500:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
		sll->freeHead = 0;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
		sll->usedHead = EVENTS_SLL_NO_EVENT;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004512:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
		sll->count = 0;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

		memset(sll->events, 0, sizeof(struct EventSLL_Node) * MAX_NUM_EVENTS);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f44f 7260 	mov.w	r2, #896	; 0x380
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f001 fa60 	bl	80059ec <memset>
		for (idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e018      	b.n	8004564 <eventSLL_reset+0x78>
		{
			sll->events[idx].id = EVENTS_SLL_NO_EVENT;
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3314      	adds	r3, #20
 8004542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004546:	601a      	str	r2, [r3, #0]
			sll->events[idx].next = idx + 1;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1c59      	adds	r1, r3, #1
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4613      	mov	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	1a9b      	subs	r3, r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4403      	add	r3, r0
 800455a:	3318      	adds	r3, #24
 800455c:	6019      	str	r1, [r3, #0]
		for (idx = 0; idx < MAX_NUM_EVENTS - 1; idx++)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b1e      	cmp	r3, #30
 8004568:	dde3      	ble.n	8004532 <eventSLL_reset+0x46>
		}
		sll->events[idx].next = EVENTS_SLL_NO_EVENT;
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4613      	mov	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3318      	adds	r3, #24
 800457a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800457e:	601a      	str	r2, [r3, #0]

		return true;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <eventSLL_reset+0x9a>
	}

	else
	{
		return false;
 8004584:	2300      	movs	r3, #0
	}
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <eventSLL_insert>:
/* eventSLL_insert
 *
 * Inserts an event while maintaining monotonic ordering on event start times.
 */
bool eventSLL_insert(Event_SLL* const sll, const struct CalendarEvent event)
{
 800458e:	b084      	sub	sp, #16
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800459c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int prevToInsertIdx;
	int toInsertIdx;
	int tempIdx;

	// if list is not full
	if (sll->count < MAX_NUM_EVENTS)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 80045a6:	2b1f      	cmp	r3, #31
 80045a8:	f200 80f4 	bhi.w	8004794 <eventSLL_insert+0x206>
	{
		// if the list is empty, insert at beginning
		if (sll->usedHead == EVENTS_SLL_NO_EVENT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b6:	d123      	bne.n	8004600 <eventSLL_insert+0x72>
		{
			// set used and free heads
			sll->usedHead = sll->freeHead;							// point head of used to head of free
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			sll->freeHead = sll->events[sll->freeHead].next;		// point head of free to next of free
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	3318      	adds	r3, #24
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
			toInsertIdx = sll->usedHead;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80045e6:	613b      	str	r3, [r7, #16]
			sll->events[toInsertIdx].next = EVENTS_SLL_NO_EVENT;	// point head of used to none
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	3318      	adds	r3, #24
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e0a9      	b.n	8004754 <eventSLL_insert+0x1c6>
		}

		// the list is not empty
		// iterate over list and insert where appropriate for monotonic ordering
		else if (sll->count < MAX_NUM_EVENTS)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 8004606:	2b1f      	cmp	r3, #31
 8004608:	f200 80a4 	bhi.w	8004754 <eventSLL_insert+0x1c6>
		{
			// if inserting at start
			if (_compareDateTime(event.start, sll->events[sll->usedHead].event.start) < 0)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	cb0c      	ldmia	r3, {r2, r3}
 8004620:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004624:	c903      	ldmia	r1, {r0, r1}
 8004626:	f000 f990 	bl	800494a <_compareDateTime>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	da2e      	bge.n	800468e <eventSLL_insert+0x100>
			{
				// take from head of free nodes and move to start of used nodes
				tempIdx = sll->usedHead;							// store head of used in temp
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004636:	60fb      	str	r3, [r7, #12]
				sll->events[sll->usedHead].next = sll->freeHead;	// point head of used to head of free
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 2380 	ldr.w	r2, [r3, #896]	; 0x380
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4403      	add	r3, r0
 8004650:	3318      	adds	r3, #24
 8004652:	6019      	str	r1, [r3, #0]
				sll->freeHead = sll->events[sll->freeHead].next;	// point head of free to next of free
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3318      	adds	r3, #24
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
				toInsertIdx = sll->usedHead;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004676:	613b      	str	r3, [r7, #16]
				sll->events[toInsertIdx].next = tempIdx;			// point head of used to stored in temp
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3318      	adds	r3, #24
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	e062      	b.n	8004754 <eventSLL_insert+0x1c6>

			// if inserting not at the start
			else
			{
				// find node previous to where to insert
				prevToInsertIdx = sll->usedHead;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004694:	617b      	str	r3, [r7, #20]
				// while insert event's start time is less than each event's start time
				// already in the list, iterate list
				// if the start times are equal, then inserting after the current iteration
				// does not care about end times of events
				while (_compareDateTime(event.start, sll->events[prevToInsertIdx].event.start) >= 0
 8004696:	e009      	b.n	80046ac <eventSLL_insert+0x11e>
						&& sll->events[prevToInsertIdx].next != EVENTS_SLL_NO_EVENT)
					prevToInsertIdx = sll->events[prevToInsertIdx].next;
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3318      	adds	r3, #24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	617b      	str	r3, [r7, #20]
				while (_compareDateTime(event.start, sll->events[prevToInsertIdx].event.start) >= 0
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	cb0c      	ldmia	r3, {r2, r3}
 80046bc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80046c0:	c903      	ldmia	r1, {r0, r1}
 80046c2:	f000 f942 	bl	800494a <_compareDateTime>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db0b      	blt.n	80046e4 <eventSLL_insert+0x156>
						&& sll->events[prevToInsertIdx].next != EVENTS_SLL_NO_EVENT)
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3318      	adds	r3, #24
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e2:	d1d9      	bne.n	8004698 <eventSLL_insert+0x10a>

				// perform insert
				tempIdx = sll->events[prevToInsertIdx].next;		// store previous to insert in temp
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	3318      	adds	r3, #24
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]
				sll->events[prevToInsertIdx].next = sll->freeHead;	// point next to insert to head of free
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4403      	add	r3, r0
 800470c:	3318      	adds	r3, #24
 800470e:	6019      	str	r1, [r3, #0]
				sll->freeHead = sll->events[sll->freeHead].next;	// point head of free to next of free
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	3318      	adds	r3, #24
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
				toInsertIdx = sll->events[prevToInsertIdx].next;
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3318      	adds	r3, #24
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	613b      	str	r3, [r7, #16]
				sll->events[toInsertIdx].next = tempIdx;			// point new node to stored in temp
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3318      	adds	r3, #24
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]
			}
		}

		// copy event into new node
		_copyEvent(&(sll->events[toInsertIdx].event), &event);
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4413      	add	r3, r2
 8004762:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004766:	4611      	mov	r1, r2
 8004768:	4618      	mov	r0, r3
 800476a:	f000 f88a 	bl	8004882 <_copyEvent>

		// set ID
		sll->events[toInsertIdx].id = toInsertIdx;
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	3314      	adds	r3, #20
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	601a      	str	r2, [r3, #0]

		// increment count
		(sll->count)++;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 338c 	ldr.w	r3, [r3, #908]	; 0x38c
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

		return true;
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <eventSLL_insert+0x208>
	}

	// if the list is full
	else
	{
		return false;
 8004794:	2300      	movs	r3, #0
	}
}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a0:	b004      	add	sp, #16
 80047a2:	4770      	bx	lr

080047a4 <eventSLL_getNextAlarm>:
 *
 * Finds the next alarm to set to a given DateTime.  This will be either the start
 * or end alarm for an event.
 */
bool eventSLL_getNextAlarm(Event_SLL* const sll, const DateTime dateTime, DateTime* const alarm)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	1d38      	adds	r0, r7, #4
 80047ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80047b2:	603b      	str	r3, [r7, #0]
	int idx;

	idx = sll->usedHead;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80047ba:	617b      	str	r3, [r7, #20]
	while (idx != EVENTS_SLL_NO_EVENT)
 80047bc:	e053      	b.n	8004866 <eventSLL_getNextAlarm+0xc2>
	{
		// if the current iteration's end time has past
		// mark as past
		if (_compareDateTime(dateTime, sll->events[idx].event.end) >= 0)
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3306      	adds	r3, #6
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4611      	mov	r1, r2
 80047d2:	889a      	ldrh	r2, [r3, #4]
 80047d4:	2300      	movs	r3, #0
 80047d6:	f362 030f 	bfi	r3, r2, #0, #16
 80047da:	460a      	mov	r2, r1
 80047dc:	1d39      	adds	r1, r7, #4
 80047de:	c903      	ldmia	r1, {r0, r1}
 80047e0:	f000 f8b3 	bl	800494a <_compareDateTime>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0a      	blt.n	8004800 <eventSLL_getNextAlarm+0x5c>
		{
			// go to next event
			idx = sll->events[idx].next;
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3318      	adds	r3, #24
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	e032      	b.n	8004866 <eventSLL_getNextAlarm+0xc2>
		}

		// now is within event
		// return alarm for end of event
		else if (_compareDateTime(dateTime, sll->events[idx].event.start) >= 0)
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	cb0c      	ldmia	r3, {r2, r3}
 8004810:	1d39      	adds	r1, r7, #4
 8004812:	c903      	ldmia	r1, {r0, r1}
 8004814:	f000 f899 	bl	800494a <_compareDateTime>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	db11      	blt.n	8004842 <eventSLL_getNextAlarm+0x9e>
		{
			// set sll inProgress pointer to this event and exit
			sll->inProgress = idx;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
			_copyDateTime(alarm, &(sll->events[idx].event.end));
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	3306      	adds	r3, #6
 8004836:	4619      	mov	r1, r3
 8004838:	6838      	ldr	r0, [r7, #0]
 800483a:	f000 f864 	bl	8004906 <_copyDateTime>
			return true;
 800483e:	2301      	movs	r3, #1
 8004840:	e01b      	b.n	800487a <eventSLL_getNextAlarm+0xd6>

		// event is in the future (next)
		// return alarm for start of event
		else
		{
			sll->inProgress = EVENTS_SLL_NO_EVENT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004848:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
			_copyDateTime(alarm, &(sll->events[idx].event.start));
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4613      	mov	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	4619      	mov	r1, r3
 800485c:	6838      	ldr	r0, [r7, #0]
 800485e:	f000 f852 	bl	8004906 <_copyDateTime>
			return true;
 8004862:	2301      	movs	r3, #1
 8004864:	e009      	b.n	800487a <eventSLL_getNextAlarm+0xd6>
	while (idx != EVENTS_SLL_NO_EVENT)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486c:	d1a7      	bne.n	80047be <eventSLL_getNextAlarm+0x1a>
		}
	}

	// no alarms to set
	sll->inProgress = EVENTS_SLL_NO_EVENT;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004874:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	return false;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <_copyEvent>:
/* _copyEvent
 *
 * Copy the contents of one CalenderEvent into another.
 */
void _copyEvent(struct CalendarEvent* const to, const struct CalendarEvent* const from)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
	to->start.year = from->start.year;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	701a      	strb	r2, [r3, #0]
	to->start.month = from->start.month;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	785a      	ldrb	r2, [r3, #1]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	705a      	strb	r2, [r3, #1]
	to->start.day = from->start.day;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	789a      	ldrb	r2, [r3, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	709a      	strb	r2, [r3, #2]
	to->start.hour = from->start.hour;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	78da      	ldrb	r2, [r3, #3]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	70da      	strb	r2, [r3, #3]
	to->start.minute = from->start.minute;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	791a      	ldrb	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	711a      	strb	r2, [r3, #4]
	to->start.second = from->start.second;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	795a      	ldrb	r2, [r3, #5]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	715a      	strb	r2, [r3, #5]
	to->start_callback = from->start_callback;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60da      	str	r2, [r3, #12]
	to->end.year = from->end.year;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	799a      	ldrb	r2, [r3, #6]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	719a      	strb	r2, [r3, #6]
	to->end.month = from->end.month;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	79da      	ldrb	r2, [r3, #7]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	71da      	strb	r2, [r3, #7]
	to->end.day = from->end.day;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	7a1a      	ldrb	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	721a      	strb	r2, [r3, #8]
	to->end.hour = from->end.hour;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	7a5a      	ldrb	r2, [r3, #9]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	725a      	strb	r2, [r3, #9]
	to->end.minute = from->end.minute;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	7a9a      	ldrb	r2, [r3, #10]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	729a      	strb	r2, [r3, #10]
	to->end.second = from->end.second;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	7ada      	ldrb	r2, [r3, #11]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	72da      	strb	r2, [r3, #11]
	to->end_callback = from->end_callback;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	611a      	str	r2, [r3, #16]
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr

08004906 <_copyDateTime>:
/* _copyDateTime
 *
 * Copy the contents of one DateTime into another.
 */
void _copyDateTime(DateTime* const to, DateTime* const from)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
	to->year = from->year;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	701a      	strb	r2, [r3, #0]
	to->month = from->month;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	785a      	ldrb	r2, [r3, #1]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	705a      	strb	r2, [r3, #1]
	to->day = from->day;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	789a      	ldrb	r2, [r3, #2]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	709a      	strb	r2, [r3, #2]
	to->hour = from->hour;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	78da      	ldrb	r2, [r3, #3]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	70da      	strb	r2, [r3, #3]
	to->minute = from->minute;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	791a      	ldrb	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	711a      	strb	r2, [r3, #4]
	to->second = from->second;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	795a      	ldrb	r2, [r3, #5]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	715a      	strb	r2, [r3, #5]
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr

0800494a <_compareDateTime>:
 * Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t _compareDateTime(DateTime dateTime_1, DateTime dateTime_2)
{
 800494a:	b590      	push	{r4, r7, lr}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	f107 0408 	add.w	r4, r7, #8
 8004954:	e884 0003 	stmia.w	r4, {r0, r1}
 8004958:	4639      	mov	r1, r7
 800495a:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = _dateTimeToSeconds(dateTime_1);
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004966:	f000 f80f 	bl	8004988 <_dateTimeToSeconds>
 800496a:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = _dateTimeToSeconds(dateTime_2);
 800496c:	463b      	mov	r3, r7
 800496e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004972:	f000 f809 	bl	8004988 <_dateTimeToSeconds>
 8004976:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
}
 800497e:	4618      	mov	r0, r3
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}
	...

08004988 <_dateTimeToSeconds>:
 *
 * Note: assumes 30 days in a month and no leap years, it is not needed for the
 * calculation because they are used for relative comparisons, not absolute values.
 */
uint32_t _dateTimeToSeconds(DateTime dateTime)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	463b      	mov	r3, r7
 8004990:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds
	return (dateTime.second
 8004994:	797b      	ldrb	r3, [r7, #5]
 8004996:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 8004998:	793b      	ldrb	r3, [r7, #4]
 800499a:	461a      	mov	r2, r3
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 80049b4:	78bb      	ldrb	r3, [r7, #2]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	490a      	ldr	r1, [pc, #40]	; (80049e4 <_dateTimeToSeconds+0x5c>)
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	4908      	ldr	r1, [pc, #32]	; (80049e8 <_dateTimeToSeconds+0x60>)
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 80049cc:	783b      	ldrb	r3, [r7, #0]
 80049ce:	4619      	mov	r1, r3
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <_dateTimeToSeconds+0x64>)
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	00015180 	.word	0x00015180
 80049e8:	00278d00 	.word	0x00278d00
 80049ec:	01da9c00 	.word	0x01da9c00

080049f0 <rtcCalendarControl_init>:
 * Initializes the module and stores a pointer to the HAL RTC handle.
 *
 * Note: will not reinitialize if already initialized.
 */
RtcUtilsStatus rtcCalendarControl_init(RTC_HandleTypeDef* const hrtc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	// if an initialized RTC handle has been passed
	if (!IS_RTC_INIT(_rtc_handle))
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <rtcCalendarControl_init+0x30>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <rtcCalendarControl_init+0x1a>
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <rtcCalendarControl_init+0x30>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <rtcCalendarControl_init+0x24>
	{
		_rtc_handle = hrtc;		// store handle pointer
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <rtcCalendarControl_init+0x30>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6013      	str	r3, [r2, #0]
		return RTC_CALENDAR_CONTROL_OKAY;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <rtcCalendarControl_init+0x26>
	}

	// an invalid handle or uninitialized handle passed
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004a14:	2301      	movs	r3, #1
	}
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr
 8004a20:	200004f4 	.word	0x200004f4

08004a24 <rtcCalendarControl_setDateTime>:
 * Note: does not check if parameters are within correct range.
 */
RtcUtilsStatus rtcCalendarControl_setDateTime(const uint8_t year, const uint8_t month,
		const uint8_t day, const uint8_t hour, const uint8_t minute,
		const uint8_t second)
{
 8004a24:	b590      	push	{r4, r7, lr}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	4611      	mov	r1, r2
 8004a30:	461a      	mov	r2, r3
 8004a32:	4623      	mov	r3, r4
 8004a34:	71fb      	strb	r3, [r7, #7]
 8004a36:	4603      	mov	r3, r0
 8004a38:	71bb      	strb	r3, [r7, #6]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	717b      	strb	r3, [r7, #5]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	713b      	strb	r3, [r7, #4]
	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	// if module has been initialized
	if (IS_RTC_INIT(_rtc_handle))
 8004a42:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <rtcCalendarControl_setDateTime+0x1a4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 80b8 	beq.w	8004bbc <rtcCalendarControl_setDateTime+0x198>
 8004a4c:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <rtcCalendarControl_setDateTime+0x1a4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80b2 	beq.w	8004bbc <rtcCalendarControl_setDateTime+0x198>
	{
		// convert from decimal to BCD
		date.Year = ((year/10) << 4) | (year % 10);
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	4a5c      	ldr	r2, [pc, #368]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	08db      	lsrs	r3, r3, #3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	b258      	sxtb	r0, r3
 8004a68:	79fa      	ldrb	r2, [r7, #7]
 8004a6a:	4b58      	ldr	r3, [pc, #352]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a70:	08d9      	lsrs	r1, r3, #3
 8004a72:	460b      	mov	r3, r1
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	4303      	orrs	r3, r0
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	77fb      	strb	r3, [r7, #31]
		date.Month = ((month/10) << 4) | (month % 10);
 8004a88:	79bb      	ldrb	r3, [r7, #6]
 8004a8a:	4a50      	ldr	r2, [pc, #320]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	b258      	sxtb	r0, r3
 8004a98:	79ba      	ldrb	r2, [r7, #6]
 8004a9a:	4b4c      	ldr	r3, [pc, #304]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa0:	08d9      	lsrs	r1, r3, #3
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	b25b      	sxtb	r3, r3
 8004ab0:	4303      	orrs	r3, r0
 8004ab2:	b25b      	sxtb	r3, r3
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	777b      	strb	r3, [r7, #29]
		date.Date = ((day/10) << 4) | (day % 10);
 8004ab8:	797b      	ldrb	r3, [r7, #5]
 8004aba:	4a44      	ldr	r2, [pc, #272]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	b258      	sxtb	r0, r3
 8004ac8:	797a      	ldrb	r2, [r7, #5]
 8004aca:	4b40      	ldr	r3, [pc, #256]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	08d9      	lsrs	r1, r3, #3
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	b25b      	sxtb	r3, r3
 8004ae0:	4303      	orrs	r3, r0
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	77bb      	strb	r3, [r7, #30]
		date.WeekDay = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	773b      	strb	r3, [r7, #28]
		time.Hours = ((hour/10) << 4) | (hour % 10);
 8004aec:	793b      	ldrb	r3, [r7, #4]
 8004aee:	4a37      	ldr	r2, [pc, #220]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	08db      	lsrs	r3, r3, #3
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	b258      	sxtb	r0, r3
 8004afc:	793a      	ldrb	r2, [r7, #4]
 8004afe:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004b00:	fba3 1302 	umull	r1, r3, r3, r2
 8004b04:	08d9      	lsrs	r1, r3, #3
 8004b06:	460b      	mov	r3, r1
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	4303      	orrs	r3, r0
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	723b      	strb	r3, [r7, #8]
		time.Minutes = ((minute/10) << 4) | (minute % 10);
 8004b1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b20:	4a2a      	ldr	r2, [pc, #168]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	08db      	lsrs	r3, r3, #3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	b258      	sxtb	r0, r3
 8004b2e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	08d9      	lsrs	r1, r3, #3
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	b25b      	sxtb	r3, r3
 8004b48:	4303      	orrs	r3, r0
 8004b4a:	b25b      	sxtb	r3, r3
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	727b      	strb	r3, [r7, #9]
		time.Seconds = ((second/10) << 4) | (second % 10);
 8004b50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	08db      	lsrs	r3, r3, #3
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	011b      	lsls	r3, r3, #4
 8004b60:	b258      	sxtb	r0, r3
 8004b62:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8004b66:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <rtcCalendarControl_setDateTime+0x1a8>)
 8004b68:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6c:	08d9      	lsrs	r1, r3, #3
 8004b6e:	460b      	mov	r3, r1
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	4303      	orrs	r3, r0
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	72bb      	strb	r3, [r7, #10]

		// Set the date.
		if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT_BCD) != HAL_OK) {
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <rtcCalendarControl_setDateTime+0x1a4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f107 011c 	add.w	r1, r7, #28
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe f930 	bl	8002df4 <HAL_RTC_SetDate>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <rtcCalendarControl_setDateTime+0x17a>
			// HAL timeout
			return RTC_CALENDAR_CONTROL_TIMEOUT;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e00f      	b.n	8004bbe <rtcCalendarControl_setDateTime+0x19a>
		}

		// Set the time.
		if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT_BCD) != HAL_OK) {
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <rtcCalendarControl_setDateTime+0x1a4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f107 0108 	add.w	r1, r7, #8
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe f825 	bl	8002bf8 <HAL_RTC_SetTime>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <rtcCalendarControl_setDateTime+0x194>
			// HAL timeout
			return RTC_CALENDAR_CONTROL_TIMEOUT;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e002      	b.n	8004bbe <rtcCalendarControl_setDateTime+0x19a>
		}

		return RTC_CALENDAR_CONTROL_OKAY;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <rtcCalendarControl_setDateTime+0x19a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004bbc:	2301      	movs	r3, #1
	}
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3724      	adds	r7, #36	; 0x24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd90      	pop	{r4, r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	200004f4 	.word	0x200004f4
 8004bcc:	cccccccd 	.word	0xcccccccd

08004bd0 <rtcCalendarControl_getDateTime>:
 * Gets the date and time within the RTC.
 */
RtcUtilsStatus rtcCalendarControl_getDateTime(uint8_t* const year, uint8_t* const month,
		uint8_t* const day, uint8_t* const hour, uint8_t* const minute,
		uint8_t* const second)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	; 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
	RTC_TimeTypeDef time = {0};
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	60da      	str	r2, [r3, #12]
 8004bec:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]

	// if the module has been initialized
	if (IS_RTC_INIT(_rtc_handle))
 8004bf2:	4b40      	ldr	r3, [pc, #256]	; (8004cf4 <rtcCalendarControl_getDateTime+0x124>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d076      	beq.n	8004ce8 <rtcCalendarControl_getDateTime+0x118>
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	; (8004cf4 <rtcCalendarControl_getDateTime+0x124>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d071      	beq.n	8004ce8 <rtcCalendarControl_getDateTime+0x118>
	{
		// Get the time and the date.
		HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT_BCD);
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <rtcCalendarControl_getDateTime+0x124>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f107 0114 	add.w	r1, r7, #20
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe f88e 	bl	8002d30 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT_BCD);
 8004c14:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <rtcCalendarControl_getDateTime+0x124>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f107 0110 	add.w	r1, r7, #16
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe f96e 	bl	8002f00 <HAL_RTC_GetDate>

		// Return through parameters
		*year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8004c24:	7cfb      	ldrb	r3, [r7, #19]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	0092      	lsls	r2, r2, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	701a      	strb	r2, [r3, #0]
		*month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8004c44:	7c7b      	ldrb	r3, [r7, #17]
 8004c46:	091b      	lsrs	r3, r3, #4
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	7c7b      	ldrb	r3, [r7, #17]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	701a      	strb	r2, [r3, #0]
		*day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8004c64:	7cbb      	ldrb	r3, [r7, #18]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	0092      	lsls	r2, r2, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	7cbb      	ldrb	r3, [r7, #18]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	701a      	strb	r2, [r3, #0]
		*hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 8004c84:	7d3b      	ldrb	r3, [r7, #20]
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	7d3b      	ldrb	r3, [r7, #20]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	701a      	strb	r2, [r3, #0]
		*minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 8004ca4:	7d7b      	ldrb	r3, [r7, #21]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	0092      	lsls	r2, r2, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	7d7b      	ldrb	r3, [r7, #21]
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	701a      	strb	r2, [r3, #0]
		*second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 8004cc4:	7dbb      	ldrb	r3, [r7, #22]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	0092      	lsls	r2, r2, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	7dbb      	ldrb	r3, [r7, #22]
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	701a      	strb	r2, [r3, #0]

		return RTC_CALENDAR_CONTROL_OKAY;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e000      	b.n	8004cea <rtcCalendarControl_getDateTime+0x11a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004ce8:	2301      	movs	r3, #1
	}
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3728      	adds	r7, #40	; 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200004f4 	.word	0x200004f4

08004cf8 <rtcCalendarControl_setAlarm_A>:
 *
 * Note: does not validate that parameters are within valid range.
 */
RtcUtilsStatus rtcCalendarControl_setAlarm_A(const uint8_t day, const uint8_t hour,
		const uint8_t minute, const uint8_t second)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b08f      	sub	sp, #60	; 0x3c
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4604      	mov	r4, r0
 8004d00:	4608      	mov	r0, r1
 8004d02:	4611      	mov	r1, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	4623      	mov	r3, r4
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71bb      	strb	r3, [r7, #6]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	717b      	strb	r3, [r7, #5]
 8004d12:	4613      	mov	r3, r2
 8004d14:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8004d16:	f107 030c 	add.w	r3, r7, #12
 8004d1a:	222c      	movs	r2, #44	; 0x2c
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fe64 	bl	80059ec <memset>

  // if the module has been initialized
  if (IS_RTC_INIT(_rtc_handle))
 8004d24:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <rtcCalendarControl_setAlarm_A+0x13c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d07e      	beq.n	8004e2a <rtcCalendarControl_setAlarm_A+0x132>
 8004d2c:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <rtcCalendarControl_setAlarm_A+0x13c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d079      	beq.n	8004e2a <rtcCalendarControl_setAlarm_A+0x132>
  {
	  // settings for alarm
	  // convert decimal to BCD
	  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	08db      	lsrs	r3, r3, #3
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	b258      	sxtb	r0, r3
 8004d46:	79fa      	ldrb	r2, [r7, #7]
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4e:	08d9      	lsrs	r1, r3, #3
 8004d50:	460b      	mov	r3, r1
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	b25b      	sxtb	r3, r3
 8004d5e:	4303      	orrs	r3, r0
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8004d68:	79bb      	ldrb	r3, [r7, #6]
 8004d6a:	4a33      	ldr	r2, [pc, #204]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	08db      	lsrs	r3, r3, #3
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	b258      	sxtb	r0, r3
 8004d78:	79ba      	ldrb	r2, [r7, #6]
 8004d7a:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	08d9      	lsrs	r1, r3, #3
 8004d82:	460b      	mov	r3, r1
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	b25b      	sxtb	r3, r3
 8004d90:	4303      	orrs	r3, r0
 8004d92:	b25b      	sxtb	r3, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	733b      	strb	r3, [r7, #12]
	  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8004d98:	797b      	ldrb	r3, [r7, #5]
 8004d9a:	4a27      	ldr	r2, [pc, #156]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	b258      	sxtb	r0, r3
 8004da8:	797a      	ldrb	r2, [r7, #5]
 8004daa:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004dac:	fba3 1302 	umull	r1, r3, r3, r2
 8004db0:	08d9      	lsrs	r1, r3, #3
 8004db2:	460b      	mov	r3, r1
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	b25b      	sxtb	r3, r3
 8004dc0:	4303      	orrs	r3, r0
 8004dc2:	b25b      	sxtb	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	737b      	strb	r3, [r7, #13]
	  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8004dc8:	793b      	ldrb	r3, [r7, #4]
 8004dca:	4a1b      	ldr	r2, [pc, #108]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd0:	08db      	lsrs	r3, r3, #3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	b258      	sxtb	r0, r3
 8004dd8:	793a      	ldrb	r2, [r7, #4]
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <rtcCalendarControl_setAlarm_A+0x140>)
 8004ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8004de0:	08d9      	lsrs	r1, r3, #3
 8004de2:	460b      	mov	r3, r1
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	b25b      	sxtb	r3, r3
 8004df0:	4303      	orrs	r3, r0
 8004df2:	b25b      	sxtb	r3, r3
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	73bb      	strb	r3, [r7, #14]
	  // other settings for setting alarm
	  alarm.AlarmTime.SubSeconds = 0x0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
	  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	61bb      	str	r3, [r7, #24]
	  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
	  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	623b      	str	r3, [r7, #32]
	  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	; 0x24
	  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  alarm.Alarm = RTC_ALARM_A;
 8004e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34

	  // set the alarm and enable an interrupt to fire
	  HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT_BCD);
 8004e16:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <rtcCalendarControl_setAlarm_A+0x13c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f107 010c 	add.w	r1, r7, #12
 8004e1e:	2201      	movs	r2, #1
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe f8bb 	bl	8002f9c <HAL_RTC_SetAlarm_IT>

	  return RTC_CALENDAR_CONTROL_OKAY;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <rtcCalendarControl_setAlarm_A+0x134>
  }

  // the module has not been initialized
  else
  {
	  return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004e2a:	2301      	movs	r3, #1
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	373c      	adds	r7, #60	; 0x3c
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd90      	pop	{r4, r7, pc}
 8004e34:	200004f4 	.word	0x200004f4
 8004e38:	cccccccd 	.word	0xcccccccd

08004e3c <rtcCalendarControl_diableAlarm_A>:
/* rtcCalendarControl_diableAlarm_A
 *
 * Disables alarm A from firing.
 */
RtcUtilsStatus rtcCalendarControl_diableAlarm_A(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
	// if the module has been initlaized
	if (IS_RTC_INIT(_rtc_handle))
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <rtcCalendarControl_diableAlarm_A+0x30>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00d      	beq.n	8004e64 <rtcCalendarControl_diableAlarm_A+0x28>
 8004e48:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <rtcCalendarControl_diableAlarm_A+0x30>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <rtcCalendarControl_diableAlarm_A+0x28>
	{
		HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A);
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <rtcCalendarControl_diableAlarm_A+0x30>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe f9aa 	bl	80031b4 <HAL_RTC_DeactivateAlarm>

		return RTC_CALENDAR_CONTROL_OKAY;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e000      	b.n	8004e66 <rtcCalendarControl_diableAlarm_A+0x2a>
	}

	// the module has not been initialized
	else
	{
		return RTC_CALENDAR_CONTROL_NOT_INIT;
 8004e64:	2301      	movs	r3, #1
	}
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	200004f4 	.word	0x200004f4

08004e70 <LL_AHB2_GRP1_EnableClock>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004e94:	68fb      	ldr	r3, [r7, #12]
}
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <LL_AHB2_GRP1_IsEnabledClock>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d101      	bne.n	8004ebc <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <LL_AHB2_GRP1_DisableClock>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ede:	4013      	ands	r3, r2
 8004ee0:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8004ef6:	2002      	movs	r0, #2
 8004ef8:	f7ff ffd2 	bl	8004ea0 <LL_AHB2_GRP1_IsEnabledClock>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <activate_led+0x60>)
 8004f00:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <activate_led+0x60>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f0a:	2002      	movs	r0, #2
 8004f0c:	f7ff ffb0 	bl	8004e70 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8004f10:	f107 030c 	add.w	r3, r7, #12
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	609a      	str	r2, [r3, #8]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	611a      	str	r2, [r3, #16]
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	2301      	movs	r3, #1
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	2302      	movs	r3, #2
 8004f2a:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 8004f2c:	f107 030c 	add.w	r3, r7, #12
 8004f30:	4619      	mov	r1, r3
 8004f32:	4807      	ldr	r0, [pc, #28]	; (8004f50 <activate_led+0x64>)
 8004f34:	f7fc f852 	bl	8000fdc <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4804      	ldr	r0, [pc, #16]	; (8004f50 <activate_led+0x64>)
 8004f40:	f7fc fa7a 	bl	8001438 <HAL_GPIO_WritePin>
}
 8004f44:	bf00      	nop
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	200004f8 	.word	0x200004f8
 8004f50:	48000400 	.word	0x48000400

08004f54 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	2200      	movs	r2, #0
 8004f62:	4619      	mov	r1, r3
 8004f64:	4809      	ldr	r0, [pc, #36]	; (8004f8c <deactivate_led+0x38>)
 8004f66:	f7fc fa67 	bl	8001438 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 8004f6a:	88fb      	ldrh	r3, [r7, #6]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <deactivate_led+0x38>)
 8004f70:	f7fc f994 	bl	800129c <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <deactivate_led+0x3c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d102      	bne.n	8004f82 <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8004f7c:	2002      	movs	r0, #2
 8004f7e:	f7ff ffa3 	bl	8004ec8 <LL_AHB2_GRP1_DisableClock>
  }
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	48000400 	.word	0x48000400
 8004f90:	200004f8 	.word	0x200004f8

08004f94 <code_to_appActions>:
 *
 * Map char array command code to numerical code.  If no match is found,
 * NO_ACTION is returned.
 */
AppActions code_to_appActions(const char* code)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	// set calendar date/time
	if (!strncmp(code, SET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	4925      	ldr	r1, [pc, #148]	; (8005034 <code_to_appActions+0xa0>)
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fd8b 	bl	8005abc <strncmp>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <code_to_appActions+0x1c>
		return SET_CALENDAR_DATETIME;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e03c      	b.n	800502a <code_to_appActions+0x96>

	// get calendar date/time
	else if (!strncmp(code, GET_CALENDAR_DATETIME_CODE, UART_PACKET_HEADER_SIZE))
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	4921      	ldr	r1, [pc, #132]	; (8005038 <code_to_appActions+0xa4>)
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fd81 	bl	8005abc <strncmp>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <code_to_appActions+0x30>
		return GET_CALENDAR_DATETIME;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e032      	b.n	800502a <code_to_appActions+0x96>

	// add calendar event
	else if (!strncmp(code, ADD_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	491d      	ldr	r1, [pc, #116]	; (800503c <code_to_appActions+0xa8>)
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fd77 	bl	8005abc <strncmp>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <code_to_appActions+0x44>
			return ADD_CALENDAR_EVENT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e028      	b.n	800502a <code_to_appActions+0x96>

	// get/view calendar event
	else if (!strncmp(code, GET_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8004fd8:	2204      	movs	r2, #4
 8004fda:	4919      	ldr	r1, [pc, #100]	; (8005040 <code_to_appActions+0xac>)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fd6d 	bl	8005abc <strncmp>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <code_to_appActions+0x58>
			return GET_CALENDAR_EVENT;
 8004fe8:	2304      	movs	r3, #4
 8004fea:	e01e      	b.n	800502a <code_to_appActions+0x96>

	// remove calendar event
	else if (!strncmp(code, REMOVE_CALENDAR_EVENT_CODE, UART_PACKET_HEADER_SIZE))
 8004fec:	2204      	movs	r2, #4
 8004fee:	4915      	ldr	r1, [pc, #84]	; (8005044 <code_to_appActions+0xb0>)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fd63 	bl	8005abc <strncmp>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <code_to_appActions+0x6c>
			return REMOVE_CALENDAR_EVENT;
 8004ffc:	2305      	movs	r3, #5
 8004ffe:	e014      	b.n	800502a <code_to_appActions+0x96>

	// clear all calendar events
	else if (!strncmp(code, CLEAR_CALENDAR_EVENTS_CODE, UART_PACKET_HEADER_SIZE))
 8005000:	2204      	movs	r2, #4
 8005002:	4911      	ldr	r1, [pc, #68]	; (8005048 <code_to_appActions+0xb4>)
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fd59 	bl	8005abc <strncmp>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <code_to_appActions+0x80>
			return CLEAR_CALENDAR_EVENTS;
 8005010:	2306      	movs	r3, #6
 8005012:	e00a      	b.n	800502a <code_to_appActions+0x96>

	// start calendar
	else if (!strncmp(code, START_CALENDAR_CODE, UART_PACKET_HEADER_SIZE))
 8005014:	2204      	movs	r2, #4
 8005016:	490d      	ldr	r1, [pc, #52]	; (800504c <code_to_appActions+0xb8>)
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fd4f 	bl	8005abc <strncmp>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <code_to_appActions+0x94>
			return START_CALENDAR;
 8005024:	2307      	movs	r3, #7
 8005026:	e000      	b.n	800502a <code_to_appActions+0x96>

	// invalid code
	else
		return NO_ACTION;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	08006ca4 	.word	0x08006ca4
 8005038:	08006cac 	.word	0x08006cac
 800503c:	08006cb4 	.word	0x08006cb4
 8005040:	08006cbc 	.word	0x08006cbc
 8005044:	08006cc4 	.word	0x08006cc4
 8005048:	08006ccc 	.word	0x08006ccc
 800504c:	08006cd4 	.word	0x08006cd4

08005050 <parseDateTime>:
 *
 * Parse a DateTime from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseDateTime(DateTime* dateTime, char data[UART_PACKET_PAYLOAD_SIZE])
{
 8005050:	b5b0      	push	{r4, r5, r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af04      	add	r7, sp, #16
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
	int formatCount;

	// parse values from string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(dateTime->year),
 800505a:	687c      	ldr	r4, [r7, #4]
			(int*)&(dateTime->month),
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1c5d      	adds	r5, r3, #1
			(int*)&(dateTime->day),
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3302      	adds	r3, #2
			(int*)&(dateTime->hour),
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	3203      	adds	r2, #3
			(int*)&(dateTime->minute),
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	3104      	adds	r1, #4
			(int*)&(dateTime->second));
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	3005      	adds	r0, #5
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d",
 8005070:	9003      	str	r0, [sp, #12]
 8005072:	9102      	str	r1, [sp, #8]
 8005074:	9201      	str	r2, [sp, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	462b      	mov	r3, r5
 800507a:	4622      	mov	r2, r4
 800507c:	4907      	ldr	r1, [pc, #28]	; (800509c <parseDateTime+0x4c>)
 800507e:	6838      	ldr	r0, [r7, #0]
 8005080:	f000 fcf0 	bl	8005a64 <siscanf>
 8005084:	60f8      	str	r0, [r7, #12]

	// if the correct number of values were parsed, return true
	if (formatCount == 6)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b06      	cmp	r3, #6
 800508a:	d101      	bne.n	8005090 <parseDateTime+0x40>
		return true;
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <parseDateTime+0x42>

	// else, there was an error, return false
	else
		return false;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bdb0      	pop	{r4, r5, r7, pc}
 800509a:	bf00      	nop
 800509c:	08006cdc 	.word	0x08006cdc

080050a0 <formatDateTime>:
 *
 * Format a string from a DateTime.  String formatting is:
 * "yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool formatDateTime(char data[UART_PACKET_PAYLOAD_SIZE], const DateTime* dateTime)
{
 80050a0:	b5b0      	push	{r4, r5, r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af06      	add	r7, sp, #24
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	int formatCount;

	// format values into string
	memset(data, 0, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80050aa:	223c      	movs	r2, #60	; 0x3c
 80050ac:	2100      	movs	r1, #0
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fc9c 	bl	80059ec <memset>
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
			(int)(dateTime->year),
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050b8:	461d      	mov	r5, r3
			(int)(dateTime->month),
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	785b      	ldrb	r3, [r3, #1]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050be:	461a      	mov	r2, r3
			(int)(dateTime->day),
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	789b      	ldrb	r3, [r3, #2]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050c4:	4619      	mov	r1, r3
			(int)(dateTime->hour),
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	78db      	ldrb	r3, [r3, #3]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050ca:	4618      	mov	r0, r3
			(int)(dateTime->minute),
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	791b      	ldrb	r3, [r3, #4]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050d0:	461c      	mov	r4, r3
			(int)(dateTime->second));
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	795b      	ldrb	r3, [r3, #5]
	formatCount = snprintf(data, UART_PACKET_PAYLOAD_SIZE, "%02d;%02d;%02d;%02d;%02d;%02d",
 80050d6:	9304      	str	r3, [sp, #16]
 80050d8:	9403      	str	r4, [sp, #12]
 80050da:	9002      	str	r0, [sp, #8]
 80050dc:	9101      	str	r1, [sp, #4]
 80050de:	9200      	str	r2, [sp, #0]
 80050e0:	462b      	mov	r3, r5
 80050e2:	4a09      	ldr	r2, [pc, #36]	; (8005108 <formatDateTime+0x68>)
 80050e4:	213c      	movs	r1, #60	; 0x3c
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fc88 	bl	80059fc <sniprintf>
 80050ec:	60f8      	str	r0, [r7, #12]

	// if the resulting string is not longer than the packet payload size and there was no
	// error formatting, return true
	if (formatCount >= 0 && formatCount <= UART_PACKET_PAYLOAD_SIZE)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	db04      	blt.n	80050fe <formatDateTime+0x5e>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b3c      	cmp	r3, #60	; 0x3c
 80050f8:	dc01      	bgt.n	80050fe <formatDateTime+0x5e>
		return true;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <formatDateTime+0x60>

	// else, return false
	else
		return false;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bdb0      	pop	{r4, r5, r7, pc}
 8005108:	08006cdc 	.word	0x08006cdc

0800510c <parseEvent>:
 *
 * Parse a CalendarEvent from a formatted string.  String formatting is:
 * "yy;mm;dd;hh;mm;ss;yy;mm;dd;hh;mm;ss".  No error checking is performed.
 */
bool parseEvent(CalendarEvent* event, char data[UART_PACKET_PAYLOAD_SIZE])
{
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	b093      	sub	sp, #76	; 0x4c
 8005110:	af0a      	add	r7, sp, #40	; 0x28
 8005112:	6178      	str	r0, [r7, #20]
 8005114:	6139      	str	r1, [r7, #16]
	int formatCount;

	// parse string
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
			(int*)&(event->start.year),
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	60fb      	str	r3, [r7, #12]
			(int*)&(event->start.month),
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f103 0c01 	add.w	ip, r3, #1
			(int*)&(event->start.day),
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	3302      	adds	r3, #2
			(int*)&(event->start.hour),
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	3203      	adds	r2, #3
			(int*)&(event->start.minute),
 8005128:	6979      	ldr	r1, [r7, #20]
 800512a:	3104      	adds	r1, #4
			(int*)&(event->start.second),
 800512c:	6978      	ldr	r0, [r7, #20]
 800512e:	3005      	adds	r0, #5
			(int*)&(event->end.year),
 8005130:	697c      	ldr	r4, [r7, #20]
 8005132:	3406      	adds	r4, #6
			(int*)&(event->end.month),
 8005134:	697d      	ldr	r5, [r7, #20]
 8005136:	3507      	adds	r5, #7
			(int*)&(event->end.day),
 8005138:	697e      	ldr	r6, [r7, #20]
 800513a:	3608      	adds	r6, #8
			(int*)&(event->end.hour),
 800513c:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005140:	f10e 0e09 	add.w	lr, lr, #9
 8005144:	f8c7 e008 	str.w	lr, [r7, #8]
			(int*)&(event->end.minute),
 8005148:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800514c:	f10e 0e0a 	add.w	lr, lr, #10
 8005150:	f8c7 e004 	str.w	lr, [r7, #4]
			(int*)&(event->end.second));
 8005154:	f8d7 e014 	ldr.w	lr, [r7, #20]
 8005158:	f10e 0e0b 	add.w	lr, lr, #11
	formatCount = sscanf(data, "%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d;%02d",
 800515c:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8005160:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8005164:	f8cd e020 	str.w	lr, [sp, #32]
 8005168:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800516c:	f8cd e01c 	str.w	lr, [sp, #28]
 8005170:	9606      	str	r6, [sp, #24]
 8005172:	9505      	str	r5, [sp, #20]
 8005174:	9404      	str	r4, [sp, #16]
 8005176:	9003      	str	r0, [sp, #12]
 8005178:	9102      	str	r1, [sp, #8]
 800517a:	9201      	str	r2, [sp, #4]
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	4663      	mov	r3, ip
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4907      	ldr	r1, [pc, #28]	; (80051a0 <parseEvent+0x94>)
 8005184:	6938      	ldr	r0, [r7, #16]
 8005186:	f000 fc6d 	bl	8005a64 <siscanf>
 800518a:	61f8      	str	r0, [r7, #28]

	// if the correct number of values were parsed, return true
	if (formatCount == 12)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b0c      	cmp	r3, #12
 8005190:	d101      	bne.n	8005196 <parseEvent+0x8a>
		return true;
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <parseEvent+0x8c>

	// else, there was an error, return false
	else
		return false;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3724      	adds	r7, #36	; 0x24
 800519c:	46bd      	mov	sp, r7
 800519e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051a0:	08006cfc 	.word	0x08006cfc

080051a4 <desktopAppSession_init>:
 *
 * Initializes the UART transport layer and resets operational variables for the manager.
 * Only will initialize if the manager has not been initialized already.
 */
bool desktopAppSession_init(UART_HandleTypeDef* huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (!_sessionInit && uartTransport_init(huart))
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <desktopAppSession_init+0x58>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	f083 0301 	eor.w	r3, r3, #1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01a      	beq.n	80051f0 <desktopAppSession_init+0x4c>
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fad0 	bl	8005760 <uartTransport_init>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d014      	beq.n	80051f0 <desktopAppSession_init+0x4c>
	{
		// reset operational variables
		_sessionOpen = false;
 80051c6:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <desktopAppSession_init+0x5c>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <desktopAppSession_init+0x58>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
		_messageReady = false;
 80051d2:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <desktopAppSession_init+0x60>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
		memset(_messageCommand, 0, UART_PACKET_HEADER_SIZE * sizeof(char));
 80051d8:	2204      	movs	r2, #4
 80051da:	2100      	movs	r1, #0
 80051dc:	480a      	ldr	r0, [pc, #40]	; (8005208 <desktopAppSession_init+0x64>)
 80051de:	f000 fc05 	bl	80059ec <memset>
		memset(_messageData, 0, UART_PACKET_PAYLOAD_SIZE * sizeof(char));
 80051e2:	223c      	movs	r2, #60	; 0x3c
 80051e4:	2100      	movs	r1, #0
 80051e6:	4809      	ldr	r0, [pc, #36]	; (800520c <desktopAppSession_init+0x68>)
 80051e8:	f000 fc00 	bl	80059ec <memset>

		return true;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <desktopAppSession_init+0x4e>
	}

	// an uninitialized uart handle was passed.
	else
	{
		return false;
 80051f0:	2300      	movs	r3, #0
	}
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200004fd 	.word	0x200004fd
 8005200:	200004fc 	.word	0x200004fc
 8005204:	20000540 	.word	0x20000540
 8005208:	20000500 	.word	0x20000500
 800520c:	20000504 	.word	0x20000504

08005210 <sessionOpen>:
/* sessionOpen
 *
 * Return if the session is initialized and open.
 */
bool sessionOpen(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
	return _sessionInit && _sessionOpen;
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <sessionOpen+0x28>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <sessionOpen+0x18>
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <sessionOpen+0x2c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <sessionOpen+0x18>
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <sessionOpen+0x1a>
 8005228:	2300      	movs	r3, #0
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	200004fd 	.word	0x200004fd
 800523c:	200004fc 	.word	0x200004fc

08005240 <desktopAppSession_start>:
 * Attempts to handshake with the desktop application.  Wrapper for the handshake function.
 * Will not attempt if the manager has not been initialized and will not attempt if a
 * session is already open.
 */
DesktopComSessionStatus desktopAppSession_start(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
	DesktopComSessionStatus handshakeStatus;

	// if the module has been initialized
	if (_sessionInit)
 8005246:	4b10      	ldr	r3, [pc, #64]	; (8005288 <desktopAppSession_start+0x48>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <desktopAppSession_start+0x3c>
	{
		// only attempt to handshake if a session is not already open
		if (!_sessionOpen)
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <desktopAppSession_start+0x4c>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	f083 0301 	eor.w	r3, r3, #1
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <desktopAppSession_start+0x38>
		{
			// perform handshake and return result
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 800525c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005260:	f000 f888 	bl	8005374 <_handshake>
 8005264:	4603      	mov	r3, r0
 8005266:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <desktopAppSession_start+0x34>
				_sessionOpen = true;
 800526e:	4b07      	ldr	r3, [pc, #28]	; (800528c <desktopAppSession_start+0x4c>)
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	e002      	b.n	800527e <desktopAppSession_start+0x3e>
		}

		// if session is closed
		else
		{
			return SESSION_NOT_OPEN;
 8005278:	2304      	movs	r3, #4
 800527a:	e000      	b.n	800527e <desktopAppSession_start+0x3e>
	}

	// module not initialized
	else
	{
		return SESSION_NOT_INIT;
 800527c:	2303      	movs	r3, #3
	}
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	200004fd 	.word	0x200004fd
 800528c:	200004fc 	.word	0x200004fc

08005290 <desktopAppSession_update>:
 *
 * Update the state of the session manager.  Wraps the _session_cycle() function,
 * which performs the actual update, with checks for a session to be opened.
 */
DesktopComSessionStatus desktopAppSession_update(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
	// if the module has been initialized
	if (_sessionInit)
 8005294:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <desktopAppSession_update+0x28>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <desktopAppSession_update+0x20>
	{
		// only run _update() if a session is opened
		if (_sessionOpen)
 800529c:	4b07      	ldr	r3, [pc, #28]	; (80052bc <desktopAppSession_update+0x2c>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <desktopAppSession_update+0x1c>
		{
			return _session_update();
 80052a4:	f000 f94e 	bl	8005544 <_session_update>
 80052a8:	4603      	mov	r3, r0
 80052aa:	e002      	b.n	80052b2 <desktopAppSession_update+0x22>
		}

		// a session has not been opened
		else
		{
			return SESSION_NOT_OPEN;
 80052ac:	2304      	movs	r3, #4
 80052ae:	e000      	b.n	80052b2 <desktopAppSession_update+0x22>
	}

	// the module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 80052b0:	2303      	movs	r3, #3
	}
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	200004fd 	.word	0x200004fd
 80052bc:	200004fc 	.word	0x200004fc

080052c0 <desktopAppSession_enqueueMessage>:
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_enqueueMessage(char header[UART_PACKET_HEADER_SIZE],
		char body[UART_PACKET_PAYLOAD_SIZE])
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (_sessionInit)
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <desktopAppSession_enqueueMessage+0x34>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <desktopAppSession_enqueueMessage+0x28>
	{
		// try to enqueue message and return if successful
		if (uartTransport_bufferTx((uint8_t*)header, (uint8_t*)body) != TRANSPORT_OKAY)
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fa65 	bl	80057a4 <uartTransport_bufferTx>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <desktopAppSession_enqueueMessage+0x24>
		{
			return SESSION_ERROR;
 80052e0:	2302      	movs	r3, #2
 80052e2:	e002      	b.n	80052ea <desktopAppSession_enqueueMessage+0x2a>
		}
		else
		{
			return SESSION_OKAY;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e000      	b.n	80052ea <desktopAppSession_enqueueMessage+0x2a>
	}

	// module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 80052e8:	2303      	movs	r3, #3
	}
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	200004fd 	.word	0x200004fd

080052f8 <desktopAppSession_dequeueMessage>:
 * above.
 *
 * todo: Need to add a queue in the session manager for this.
 */
DesktopComSessionStatus desktopAppSession_dequeueMessage(char header[UART_PACKET_HEADER_SIZE], char body[UART_PACKET_PAYLOAD_SIZE])
{
 80052f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (_sessionInit)
 8005302:	4b18      	ldr	r3, [pc, #96]	; (8005364 <desktopAppSession_dequeueMessage+0x6c>)
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d026      	beq.n	8005358 <desktopAppSession_dequeueMessage+0x60>
	{
		// if a message is present in the received queue, copy to output
		if (_messageReady)
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <desktopAppSession_dequeueMessage+0x70>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d020      	beq.n	8005354 <desktopAppSession_dequeueMessage+0x5c>
 8005312:	4b16      	ldr	r3, [pc, #88]	; (800536c <desktopAppSession_dequeueMessage+0x74>)
 8005314:	681a      	ldr	r2, [r3, #0]
		{
			memcpy(header, _messageCommand, UART_PACKET_HEADER_SIZE*sizeof(char));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	601a      	str	r2, [r3, #0]
			memcpy(body, _messageData, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	4a14      	ldr	r2, [pc, #80]	; (8005370 <desktopAppSession_dequeueMessage+0x78>)
 800531e:	4614      	mov	r4, r2
 8005320:	469c      	mov	ip, r3
 8005322:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005326:	4665      	mov	r5, ip
 8005328:	4626      	mov	r6, r4
 800532a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800532c:	6028      	str	r0, [r5, #0]
 800532e:	6069      	str	r1, [r5, #4]
 8005330:	60aa      	str	r2, [r5, #8]
 8005332:	60eb      	str	r3, [r5, #12]
 8005334:	3410      	adds	r4, #16
 8005336:	f10c 0c10 	add.w	ip, ip, #16
 800533a:	4574      	cmp	r4, lr
 800533c:	d1f3      	bne.n	8005326 <desktopAppSession_dequeueMessage+0x2e>
 800533e:	4665      	mov	r5, ip
 8005340:	4623      	mov	r3, r4
 8005342:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005344:	6028      	str	r0, [r5, #0]
 8005346:	6069      	str	r1, [r5, #4]
 8005348:	60aa      	str	r2, [r5, #8]
			_messageReady = false;
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <desktopAppSession_dequeueMessage+0x70>)
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]

			return SESSION_OKAY;
 8005350:	2300      	movs	r3, #0
 8005352:	e002      	b.n	800535a <desktopAppSession_dequeueMessage+0x62>
		}

		// no message is ready
		else
		{
			return SESSION_ERROR;
 8005354:	2302      	movs	r3, #2
 8005356:	e000      	b.n	800535a <desktopAppSession_dequeueMessage+0x62>
	}

	// the module has not been initialized
	else
	{
		return SESSION_NOT_INIT;
 8005358:	2303      	movs	r3, #3
	}
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005362:	bf00      	nop
 8005364:	200004fd 	.word	0x200004fd
 8005368:	20000540 	.word	0x20000540
 800536c:	20000500 	.word	0x20000500
 8005370:	20000504 	.word	0x20000504

08005374 <_handshake>:
 * Note:  no software flow control is used for the first message.  Listening for the
 * first message from the desktop may timeout and cause synchronization issues while
 * attempting to handshake.
 */
DesktopComSessionStatus _handshake(unsigned int timeout_ms)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b094      	sub	sp, #80	; 0x50
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
	bool error = false;
 8005380:	2300      	movs	r3, #0
 8005382:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	bool success = false;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	TransportStatus transportStatus;
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 800538c:	2300      	movs	r3, #0
 800538e:	647b      	str	r3, [r7, #68]	; 0x44
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 8005390:	2300      	movs	r3, #0
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	f107 030c 	add.w	r3, r7, #12
 8005398:	2238      	movs	r2, #56	; 0x38
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fb25 	bl	80059ec <memset>

	// while the handshake follows proper steps and UART communication does not error
	while (!success && !error)
 80053a2:	e0a2      	b.n	80054ea <_handshake+0x176>
	{
		// state 0:  receive message
		if (state == 0)
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <_handshake+0x44>
		{
			transportStatus = uartTransport_rx_polled(timeout_ms); // handshake timeout until start of handshake
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa8e 	bl	80058cc <uartTransport_rx_polled>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80053b6:	e063      	b.n	8005480 <_handshake+0x10c>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 80053b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d10b      	bne.n	80053d6 <_handshake+0x62>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 80053be:	f107 0208 	add.w	r2, r7, #8
 80053c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053c6:	4611      	mov	r1, r2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fa15 	bl	80057f8 <uartTransport_debufferRx>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80053d4:	e054      	b.n	8005480 <_handshake+0x10c>
		}
		// state 2: check if sync
		else if (state == 2)
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d10d      	bne.n	80053f8 <_handshake+0x84>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_PACKET_HEADER_SIZE))
 80053dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053e0:	2204      	movs	r2, #4
 80053e2:	4955      	ldr	r1, [pc, #340]	; (8005538 <_handshake+0x1c4>)
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fb69 	bl	8005abc <strncmp>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d047      	beq.n	8005480 <_handshake+0x10c>
			{
				error = true;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80053f6:	e043      	b.n	8005480 <_handshake+0x10c>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 80053f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d110      	bne.n	8005420 <_handshake+0xac>
		{
			memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	223c      	movs	r2, #60	; 0x3c
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f000 faf0 	bl	80059ec <memset>
			transportStatus = uartTransport_bufferTx((uint8_t*)HANDSHAKE_HEADER_ACKN, (uint8_t*)messageBody);
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	4619      	mov	r1, r3
 8005412:	484a      	ldr	r0, [pc, #296]	; (800553c <_handshake+0x1c8>)
 8005414:	f000 f9c6 	bl	80057a4 <uartTransport_bufferTx>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800541e:	e02f      	b.n	8005480 <_handshake+0x10c>
		}
		// state 4: send ack
		else if (state == 4)
 8005420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005422:	2b04      	cmp	r3, #4
 8005424:	d106      	bne.n	8005434 <_handshake+0xc0>
		{
			transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 8005426:	2064      	movs	r0, #100	; 0x64
 8005428:	f000 fa12 	bl	8005850 <uartTransport_tx_polled>
 800542c:	4603      	mov	r3, r0
 800542e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005432:	e025      	b.n	8005480 <_handshake+0x10c>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8005434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005436:	2b05      	cmp	r3, #5
 8005438:	d106      	bne.n	8005448 <_handshake+0xd4>
		{
			transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 800543a:	2064      	movs	r0, #100	; 0x64
 800543c:	f000 fa46 	bl	80058cc <uartTransport_rx_polled>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005446:	e01b      	b.n	8005480 <_handshake+0x10c>
		}
		// state 6: dequeue message
		else if (state == 6)
 8005448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544a:	2b06      	cmp	r3, #6
 800544c:	d10b      	bne.n	8005466 <_handshake+0xf2>
		{
			transportStatus = uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 800544e:	f107 0208 	add.w	r2, r7, #8
 8005452:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f9cd 	bl	80057f8 <uartTransport_debufferRx>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8005464:	e00c      	b.n	8005480 <_handshake+0x10c>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_PACKET_HEADER_SIZE))
 8005466:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800546a:	2204      	movs	r2, #4
 800546c:	4934      	ldr	r1, [pc, #208]	; (8005540 <_handshake+0x1cc>)
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fb24 	bl	8005abc <strncmp>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <_handshake+0x10c>
			{
				error = true;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
		}

		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8005480:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005484:	2b00      	cmp	r3, #0
 8005486:	d12d      	bne.n	80054e4 <_handshake+0x170>
		{
			if (state == 0)
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <_handshake+0x120>
				state = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005492:	e02a      	b.n	80054ea <_handshake+0x176>
			else if (state == 1)
 8005494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <_handshake+0x12c>
				state = 2;
 800549a:	2302      	movs	r3, #2
 800549c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549e:	e024      	b.n	80054ea <_handshake+0x176>
			else if (state == 2)
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d102      	bne.n	80054ac <_handshake+0x138>
				state = 3;
 80054a6:	2303      	movs	r3, #3
 80054a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054aa:	e01e      	b.n	80054ea <_handshake+0x176>
			else if (state == 3)
 80054ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d102      	bne.n	80054b8 <_handshake+0x144>
				state = 4;
 80054b2:	2304      	movs	r3, #4
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b6:	e018      	b.n	80054ea <_handshake+0x176>
			else if (state == 4)
 80054b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d102      	bne.n	80054c4 <_handshake+0x150>
				state = 5;
 80054be:	2305      	movs	r3, #5
 80054c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c2:	e012      	b.n	80054ea <_handshake+0x176>
			else if (state == 5)
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d102      	bne.n	80054d0 <_handshake+0x15c>
				state = 6;
 80054ca:	2306      	movs	r3, #6
 80054cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ce:	e00c      	b.n	80054ea <_handshake+0x176>
			else if (state == 6)
 80054d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	d102      	bne.n	80054dc <_handshake+0x168>
				state = 7;
 80054d6:	2307      	movs	r3, #7
 80054d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054da:	e006      	b.n	80054ea <_handshake+0x176>
			else // if (state == 7)
				success = true;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80054e2:	e002      	b.n	80054ea <_handshake+0x176>
		}
		else
		{
			error = true;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	while (!success && !error)
 80054ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80054ee:	f083 0301 	eor.w	r3, r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <_handshake+0x194>
 80054f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054fc:	f083 0301 	eor.w	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	f47f af4e 	bne.w	80053a4 <_handshake+0x30>
		}
	}


	// report status of handshake
	if (success && !error)
 8005508:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <_handshake+0x1ae>
 8005510:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005514:	f083 0301 	eor.w	r3, r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <_handshake+0x1ae>
	{
		return SESSION_OKAY;
 800551e:	2300      	movs	r3, #0
 8005520:	e006      	b.n	8005530 <_handshake+0x1bc>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 8005522:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <_handshake+0x1ba>
		{
			return SESSION_TIMEOUT;
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <_handshake+0x1bc>
		}
		else
		{
			return SESSION_ERROR;
 800552e:	2302      	movs	r3, #2
		}
	}
}
 8005530:	4618      	mov	r0, r3
 8005532:	3750      	adds	r7, #80	; 0x50
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	08006d38 	.word	0x08006d38
 800553c:	08006d40 	.word	0x08006d40
 8005540:	08006d48 	.word	0x08006d48

08005544 <_session_update>:
 *
 * Note:  If a response to the desktop is necessary, this response won't be sent until
 * the next time the session is updated.
 */
DesktopComSessionStatus _session_update(void)
{
 8005544:	b5b0      	push	{r4, r5, r7, lr}
 8005546:	b092      	sub	sp, #72	; 0x48
 8005548:	af00      	add	r7, sp, #0
	char messageHeader[UART_PACKET_HEADER_SIZE] = {0};
 800554a:	2300      	movs	r3, #0
 800554c:	643b      	str	r3, [r7, #64]	; 0x40
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	2238      	movs	r2, #56	; 0x38
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fa46 	bl	80059ec <memset>
	DesktopComSessionStatus status;

	// Perform Tx message phase of session cycle.
	status = _tell();
 8005560:	f000 f8ba 	bl	80056d8 <_tell>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// Perform Rx message phase of session cycle.
	status = _listen();
 800556a:	f000 f863 	bl	8005634 <_listen>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (status == SESSION_ERROR)
 8005574:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005578:	2b02      	cmp	r3, #2
 800557a:	d101      	bne.n	8005580 <_session_update+0x3c>
	{
		return SESSION_ERROR;
 800557c:	2302      	movs	r3, #2
 800557e:	e046      	b.n	800560e <_session_update+0xca>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 8005580:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005584:	2b00      	cmp	r3, #0
 8005586:	d140      	bne.n	800560a <_session_update+0xc6>
	{
		// dequeue received message
		uartTransport_debufferRx((uint8_t*)messageHeader, (uint8_t*)messageBody);
 8005588:	1d3a      	adds	r2, r7, #4
 800558a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800558e:	4611      	mov	r1, r2
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f931 	bl	80057f8 <uartTransport_debufferRx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_PACKET_HEADER_SIZE))
 8005596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800559a:	2204      	movs	r2, #4
 800559c:	491e      	ldr	r1, [pc, #120]	; (8005618 <_session_update+0xd4>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fa8c 	bl	8005abc <strncmp>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10a      	bne.n	80055c0 <_session_update+0x7c>
		{
			desktopAppSession_enqueueMessage(HANDSHAKE_HEADER_DISC, "\0");
 80055aa:	491c      	ldr	r1, [pc, #112]	; (800561c <_session_update+0xd8>)
 80055ac:	481a      	ldr	r0, [pc, #104]	; (8005618 <_session_update+0xd4>)
 80055ae:	f7ff fe87 	bl	80052c0 <desktopAppSession_enqueueMessage>
			_sessionOpen = false;
 80055b2:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <_session_update+0xdc>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
			status = SESSION_CLOSED;
 80055b8:	2306      	movs	r3, #6
 80055ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80055be:	e024      	b.n	800560a <_session_update+0xc6>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_PACKET_HEADER_SIZE))
 80055c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055c4:	2204      	movs	r2, #4
 80055c6:	4917      	ldr	r1, [pc, #92]	; (8005624 <_session_update+0xe0>)
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fa77 	bl	8005abc <strncmp>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <_session_update+0xa0>
		{
			desktopAppSession_enqueueMessage(messageHeader, messageBody);
 80055d4:	1d3a      	adds	r2, r7, #4
 80055d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055da:	4611      	mov	r1, r2
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fe6f 	bl	80052c0 <desktopAppSession_enqueueMessage>
 80055e2:	e012      	b.n	800560a <_session_update+0xc6>
 80055e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		}

		// Else, buffer for processing by the application
		else
		{
			memcpy(_messageCommand, messageHeader, UART_PACKET_HEADER_SIZE*sizeof(char));
 80055e6:	4a10      	ldr	r2, [pc, #64]	; (8005628 <_session_update+0xe4>)
 80055e8:	6013      	str	r3, [r2, #0]
			memcpy(_messageData, messageBody, UART_PACKET_PAYLOAD_SIZE*sizeof(char));
 80055ea:	4b10      	ldr	r3, [pc, #64]	; (800562c <_session_update+0xe8>)
 80055ec:	461d      	mov	r5, r3
 80055ee:	1d3c      	adds	r4, r7, #4
 80055f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005600:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			_messageReady = true;
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <_session_update+0xec>)
 8005606:	2201      	movs	r2, #1
 8005608:	701a      	strb	r2, [r3, #0]
		}
	}

	return status;
 800560a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800560e:	4618      	mov	r0, r3
 8005610:	3748      	adds	r7, #72	; 0x48
 8005612:	46bd      	mov	sp, r7
 8005614:	bdb0      	pop	{r4, r5, r7, pc}
 8005616:	bf00      	nop
 8005618:	08006d50 	.word	0x08006d50
 800561c:	08006d58 	.word	0x08006d58
 8005620:	200004fc 	.word	0x200004fc
 8005624:	08006d5c 	.word	0x08006d5c
 8005628:	20000500 	.word	0x20000500
 800562c:	20000504 	.word	0x20000504
 8005630:	20000540 	.word	0x20000540

08005634 <_listen>:
 * message.  A CTS message is transmitted.  The Message window listens for a message
 * from the desktop application with the RECEIVE_TIMEOUT_MS value.  Error codes from
 * the transport layer are aliased to session error codes.
 */
DesktopComSessionStatus _listen(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b090      	sub	sp, #64	; 0x40
 8005638:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;
	char messageBody[UART_PACKET_PAYLOAD_SIZE] = {0};
 800563a:	2300      	movs	r3, #0
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	2238      	movs	r2, #56	; 0x38
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f000 f9d1 	bl	80059ec <memset>

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_PACKET_PAYLOAD_SIZE);
 800564a:	463b      	mov	r3, r7
 800564c:	223c      	movs	r2, #60	; 0x3c
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f9cb 	bl	80059ec <memset>
	snprintf(messageBody, UART_PACKET_PAYLOAD_SIZE, "Clear to send!\n");
 8005656:	463b      	mov	r3, r7
 8005658:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <_listen+0x9c>)
 800565a:	213c      	movs	r1, #60	; 0x3c
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f9cd 	bl	80059fc <sniprintf>
	transportStatus = uartTransport_bufferTx((uint8_t*)CTS_HEADER,(uint8_t*) messageBody);
 8005662:	463b      	mov	r3, r7
 8005664:	4619      	mov	r1, r3
 8005666:	481b      	ldr	r0, [pc, #108]	; (80056d4 <_listen+0xa0>)
 8005668:	f000 f89c 	bl	80057a4 <uartTransport_bufferTx>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus != TRANSPORT_OKAY)
 8005672:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <_listen+0x4a>
	{
		return SESSION_ERROR;
 800567a:	2302      	movs	r3, #2
 800567c:	e024      	b.n	80056c8 <_listen+0x94>
	}

	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 800567e:	2064      	movs	r0, #100	; 0x64
 8005680:	f000 f8e6 	bl	8005850 <uartTransport_tx_polled>
 8005684:	4603      	mov	r3, r0
 8005686:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 800568a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <_listen+0x62>
	{
		return SESSION_TIMEOUT;
 8005692:	2301      	movs	r3, #1
 8005694:	e018      	b.n	80056c8 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8005696:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <_listen+0x6e>
	{
		return SESSION_ERROR;
 800569e:	2302      	movs	r3, #2
 80056a0:	e012      	b.n	80056c8 <_listen+0x94>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = uartTransport_rx_polled(RECEIVE_TIMEOUT_MS);
 80056a2:	2064      	movs	r0, #100	; 0x64
 80056a4:	f000 f912 	bl	80058cc <uartTransport_rx_polled>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (transportStatus == TRANSPORT_TIMEOUT)
 80056ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <_listen+0x86>
	{
		return SESSION_TIMEOUT;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e006      	b.n	80056c8 <_listen+0x94>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 80056ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <_listen+0x92>
	{
		return SESSION_ERROR;
 80056c2:	2302      	movs	r3, #2
 80056c4:	e000      	b.n	80056c8 <_listen+0x94>
	}

	return SESSION_OKAY;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3740      	adds	r7, #64	; 0x40
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	08006d64 	.word	0x08006d64
 80056d4:	08006d74 	.word	0x08006d74

080056d8 <_tell>:
 * Wraps UART transmission layer calls.
 * Transmits a buffered message to the desktop application.
 * Aliases transport layer error codes to session error codes.
 */
DesktopComSessionStatus _tell(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	TransportStatus transportStatus;

	// attempt to transmit packet
	transportStatus = uartTransport_tx_polled(SEND_TIMEOUT_MS);
 80056de:	2064      	movs	r0, #100	; 0x64
 80056e0:	f000 f8b6 	bl	8005850 <uartTransport_tx_polled>
 80056e4:	4603      	mov	r3, r0
 80056e6:	71fb      	strb	r3, [r7, #7]

	// report status of transmission
	if (transportStatus == TRANSPORT_OKAY)
 80056e8:	79fb      	ldrb	r3, [r7, #7]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <_tell+0x1a>
	{
		return SESSION_OKAY;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e005      	b.n	80056fe <_tell+0x26>
	}
	else if (transportStatus == TRANSPORT_TIMEOUT)
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <_tell+0x24>
	{
		return SESSION_TIMEOUT;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <_tell+0x26>
	}
	else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
	{
		return SESSION_ERROR;
 80056fc:	2302      	movs	r3, #2
	}
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <composePacket>:
 * UART_PACKET_PAYLOAD_SIZE bytes to the packet buffer offset by UART_PACKET_HEADER_SIZE
 * number of bytes.
 */
void composePacket(uint8_t packet_buffer[UART_PACKET_SIZE], const uint8_t header[UART_PACKET_HEADER_SIZE],
		const uint8_t payload[UART_PACKET_PAYLOAD_SIZE])
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
	// Copy header into packet.
	memcpy(packet_buffer, header, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]
	// Copy payload into packet.
	memcpy(packet_buffer + UART_PACKET_HEADER_SIZE, payload, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3304      	adds	r3, #4
 8005720:	223c      	movs	r2, #60	; 0x3c
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f953 	bl	80059d0 <memcpy>
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <decomposePacket>:
 * Copies UART_PACKET_HEADER_SIZE number of bytes to the header_buffer and copies
 * UART_PACKET_PAYLOAD_SIZE number of bytes to the payload buffer.
 */
void decomposePacket(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t payload[UART_PACKET_PAYLOAD_SIZE],
		const uint8_t packet_buffer[UART_PACKET_SIZE])
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
	// Copy header from packet.
	memcpy(header, packet_buffer, UART_PACKET_HEADER_SIZE * sizeof(uint8_t));
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]
	// Copy payload from packet.
	memcpy(payload, packet_buffer + UART_PACKET_HEADER_SIZE, UART_PACKET_PAYLOAD_SIZE * sizeof(uint8_t));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3304      	adds	r3, #4
 800574c:	223c      	movs	r2, #60	; 0x3c
 800574e:	4619      	mov	r1, r3
 8005750:	68b8      	ldr	r0, [r7, #8]
 8005752:	f000 f93d 	bl	80059d0 <memcpy>
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <uartTransport_init>:
 * operational variables.
 *
 * Note:  will not re-initalize until the layer has been de-initalized.
 */
bool uartTransport_init(UART_HandleTypeDef* huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	// if module not already initialized and the uart handle passed is initialized
	if (!IS_UART_HANDLE_INIT(_uartHandle) && IS_UART_HANDLE_INIT(huart))
 8005768:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <uartTransport_init+0x40>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <uartTransport_init+0x1a>
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <uartTransport_init+0x40>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10d      	bne.n	8005796 <uartTransport_init+0x36>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <uartTransport_init+0x36>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <uartTransport_init+0x36>
	{
		_uartHandle = huart;		// store handle pointer
 8005788:	4a05      	ldr	r2, [pc, #20]	; (80057a0 <uartTransport_init+0x40>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6013      	str	r3, [r2, #0]
		_transportLayer_reset();	// reset the module's operational variables
 800578e:	f000 f8d9 	bl	8005944 <_transportLayer_reset>
		return true;				// return success
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <uartTransport_init+0x38>
	}

	// module already initializes or handle passed is not initialized
	else
	{
		return false;
 8005796:	2300      	movs	r3, #0
	}
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000544 	.word	0x20000544

080057a4 <uartTransport_bufferTx>:
 * Enqueues a packet for transmission.  Only successful if the layer has been
 * initialized.  Reports if queuing could or could not be performed due to the
 * tx buffer being full.
 */
TransportStatus uartTransport_bufferTx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
	// if module initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 80057ae:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <uartTransport_bufferTx+0x48>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d014      	beq.n	80057e0 <uartTransport_bufferTx+0x3c>
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <uartTransport_bufferTx+0x48>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00f      	beq.n	80057e0 <uartTransport_bufferTx+0x3c>
	{
		// if the transmit buffer is in use (program has queued a packet but
		// has not yet sent it)
		if (_txBuffer_full)
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <uartTransport_bufferTx+0x4c>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <uartTransport_bufferTx+0x28>
		{
			return TRANSPORT_TX_FULL;
 80057c8:	2304      	movs	r3, #4
 80057ca:	e00a      	b.n	80057e2 <uartTransport_bufferTx+0x3e>

		// the buffer is empty and ready to receive a new packet
		else
		{
			// Compose header and body into one message
			composePacket(_txBuffer, header, body);
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4808      	ldr	r0, [pc, #32]	; (80057f4 <uartTransport_bufferTx+0x50>)
 80057d2:	f7ff ff98 	bl	8005706 <composePacket>
			_txBuffer_full = true;
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <uartTransport_bufferTx+0x4c>)
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <uartTransport_bufferTx+0x3e>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 80057e0:	2308      	movs	r3, #8
	}
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000544 	.word	0x20000544
 80057f0:	200005c8 	.word	0x200005c8
 80057f4:	20000548 	.word	0x20000548

080057f8 <uartTransport_debufferRx>:
 * Dequeues a packet from those that have been received.  Only successful if
 * the layer has been initialized.  Reportes of dequeuing could or could not be
 * performed due to the rx buffer being empty.
 */
TransportStatus uartTransport_debufferRx(uint8_t header[UART_PACKET_HEADER_SIZE], uint8_t body[UART_PACKET_PAYLOAD_SIZE])
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	// if the module has been initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <uartTransport_debufferRx+0x4c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d017      	beq.n	800583a <uartTransport_debufferRx+0x42>
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <uartTransport_debufferRx+0x4c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <uartTransport_debufferRx+0x42>
	{
		// if no packet has been received
		if (!_rxBuffer_full)
 8005814:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <uartTransport_debufferRx+0x50>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f083 0301 	eor.w	r3, r3, #1
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <uartTransport_debufferRx+0x2e>
		{
			return TRANSPORT_RX_EMPTY;
 8005822:	2306      	movs	r3, #6
 8005824:	e00a      	b.n	800583c <uartTransport_debufferRx+0x44>
		// packet received and ready
		else
		{
			// retrieve message from buffer
			// decompose header and body from message
			decomposePacket(header, body, _rxBuffer);
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <uartTransport_debufferRx+0x54>)
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff ff81 	bl	8005732 <decomposePacket>
			_rxBuffer_full = false;
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <uartTransport_debufferRx+0x50>)
 8005832:	2200      	movs	r2, #0
 8005834:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8005836:	2300      	movs	r3, #0
 8005838:	e000      	b.n	800583c <uartTransport_debufferRx+0x44>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 800583a:	2308      	movs	r3, #8
	}
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000544 	.word	0x20000544
 8005848:	200005c9 	.word	0x200005c9
 800584c:	20000588 	.word	0x20000588

08005850 <uartTransport_tx_polled>:
 * Transmits all packets in tx queue.  Reports if the tx queue is empty
 * (to start) or the state of the transmissions (success or failure).
 * Uses HAL calls.
 */
TransportStatus uartTransport_tx_polled(uint32_t timeout_ms)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	// if the module has been initalized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 8005858:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <uartTransport_tx_polled+0x70>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d02a      	beq.n	80058b6 <uartTransport_tx_polled+0x66>
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <uartTransport_tx_polled+0x70>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d025      	beq.n	80058b6 <uartTransport_tx_polled+0x66>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 800586a:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <uartTransport_tx_polled+0x74>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	f083 0301 	eor.w	r3, r3, #1
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <uartTransport_tx_polled+0x2c>
		{
			return TRANSPORT_TX_EMPTY;
 8005878:	2305      	movs	r3, #5
 800587a:	e01d      	b.n	80058b8 <uartTransport_tx_polled+0x68>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_PACKET_SIZE, timeout_ms);
 800587c:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <uartTransport_tx_polled+0x70>)
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2240      	movs	r2, #64	; 0x40
 8005884:	4910      	ldr	r1, [pc, #64]	; (80058c8 <uartTransport_tx_polled+0x78>)
 8005886:	f7fd fe67 	bl	8003558 <HAL_UART_Transmit>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <uartTransport_tx_polled+0x48>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 8005894:	2302      	movs	r3, #2
 8005896:	e00f      	b.n	80058b8 <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_TIMEOUT)
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d101      	bne.n	80058a2 <uartTransport_tx_polled+0x52>
		{
			return TRANSPORT_TIMEOUT;
 800589e:	2301      	movs	r3, #1
 80058a0:	e00a      	b.n	80058b8 <uartTransport_tx_polled+0x68>
		}
		else if (hal_status == HAL_BUSY)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d101      	bne.n	80058ac <uartTransport_tx_polled+0x5c>
		{
			return TRANSPORT_BUSY;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e005      	b.n	80058b8 <uartTransport_tx_polled+0x68>
		}
		else
		{
			// transmission successful
			_txBuffer_full = false;
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <uartTransport_tx_polled+0x74>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e000      	b.n	80058b8 <uartTransport_tx_polled+0x68>
	}

	// the module has not been initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 80058b6:	2308      	movs	r3, #8
	}
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	20000544 	.word	0x20000544
 80058c4:	200005c8 	.word	0x200005c8
 80058c8:	20000548 	.word	0x20000548

080058cc <uartTransport_rx_polled>:
 * Receives packets and enqueues them to the rx queue.  Reports of the
 * rx queue was full (to start) or the state of the receptions (success
 * or failure).  Uses HAL calls.
 */
TransportStatus uartTransport_rx_polled(uint32_t timeout_ms)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	// if the module has been initialized
	if (IS_UART_HANDLE_INIT(_uartHandle))
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <uartTransport_rx_polled+0x6c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d027      	beq.n	800592c <uartTransport_rx_polled+0x60>
 80058dc:	4b16      	ldr	r3, [pc, #88]	; (8005938 <uartTransport_rx_polled+0x6c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d022      	beq.n	800592c <uartTransport_rx_polled+0x60>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 80058e6:	4b15      	ldr	r3, [pc, #84]	; (800593c <uartTransport_rx_polled+0x70>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <uartTransport_rx_polled+0x26>
		{
			return TRANSPORT_RX_FULL;
 80058ee:	2307      	movs	r3, #7
 80058f0:	e01d      	b.n	800592e <uartTransport_rx_polled+0x62>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_PACKET_SIZE, timeout_ms);
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <uartTransport_rx_polled+0x6c>)
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2240      	movs	r2, #64	; 0x40
 80058fa:	4911      	ldr	r1, [pc, #68]	; (8005940 <uartTransport_rx_polled+0x74>)
 80058fc:	f7fd feb2 	bl	8003664 <HAL_UART_Receive>
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <uartTransport_rx_polled+0x42>
		{
			/*
			 * Note †: this error occurs if pData passed into HAL_UART_Transmit() is NULL
			 * or Size passed in is not greater than 0.
			 */
			return TRANSPORT_ERROR;
 800590a:	2302      	movs	r3, #2
 800590c:	e00f      	b.n	800592e <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_TIMEOUT)
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d101      	bne.n	8005918 <uartTransport_rx_polled+0x4c>
		{
			return TRANSPORT_TIMEOUT;
 8005914:	2301      	movs	r3, #1
 8005916:	e00a      	b.n	800592e <uartTransport_rx_polled+0x62>
		}
		else if (hal_status == HAL_BUSY)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b02      	cmp	r3, #2
 800591c:	d101      	bne.n	8005922 <uartTransport_rx_polled+0x56>
		{
			return TRANSPORT_BUSY;
 800591e:	2303      	movs	r3, #3
 8005920:	e005      	b.n	800592e <uartTransport_rx_polled+0x62>
		}
		else
		{
			// reception was successful and a packet was received
			_rxBuffer_full = true;
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <uartTransport_rx_polled+0x70>)
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <uartTransport_rx_polled+0x62>
	}

	// the module is not initialized
	else
	{
		return TRANSPORT_NOT_INIT;
 800592c:	2308      	movs	r3, #8
	}
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000544 	.word	0x20000544
 800593c:	200005c9 	.word	0x200005c9
 8005940:	20000588 	.word	0x20000588

08005944 <_transportLayer_reset>:
/* _transportLayer_reset
 *
 * Resets operational variables other than the HAL UART handle pointer.
 */
void _transportLayer_reset(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	// clear buffers and flags
	memset(_txBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 8005948:	2240      	movs	r2, #64	; 0x40
 800594a:	2100      	movs	r1, #0
 800594c:	4807      	ldr	r0, [pc, #28]	; (800596c <_transportLayer_reset+0x28>)
 800594e:	f000 f84d 	bl	80059ec <memset>
	memset(_rxBuffer, 0, UART_PACKET_SIZE * sizeof(uint8_t));
 8005952:	2240      	movs	r2, #64	; 0x40
 8005954:	2100      	movs	r1, #0
 8005956:	4806      	ldr	r0, [pc, #24]	; (8005970 <_transportLayer_reset+0x2c>)
 8005958:	f000 f848 	bl	80059ec <memset>
	_txBuffer_full = false;
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <_transportLayer_reset+0x30>)
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
	_rxBuffer_full = false;
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <_transportLayer_reset+0x34>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
}
 8005968:	bf00      	nop
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000548 	.word	0x20000548
 8005970:	20000588 	.word	0x20000588
 8005974:	200005c8 	.word	0x200005c8
 8005978:	200005c9 	.word	0x200005c9

0800597c <__errno>:
 800597c:	4b01      	ldr	r3, [pc, #4]	; (8005984 <__errno+0x8>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000000c 	.word	0x2000000c

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4d0d      	ldr	r5, [pc, #52]	; (80059c0 <__libc_init_array+0x38>)
 800598c:	4c0d      	ldr	r4, [pc, #52]	; (80059c4 <__libc_init_array+0x3c>)
 800598e:	1b64      	subs	r4, r4, r5
 8005990:	10a4      	asrs	r4, r4, #2
 8005992:	2600      	movs	r6, #0
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	4d0b      	ldr	r5, [pc, #44]	; (80059c8 <__libc_init_array+0x40>)
 800599a:	4c0c      	ldr	r4, [pc, #48]	; (80059cc <__libc_init_array+0x44>)
 800599c:	f001 f968 	bl	8006c70 <_init>
 80059a0:	1b64      	subs	r4, r4, r5
 80059a2:	10a4      	asrs	r4, r4, #2
 80059a4:	2600      	movs	r6, #0
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08007008 	.word	0x08007008
 80059c4:	08007008 	.word	0x08007008
 80059c8:	08007008 	.word	0x08007008
 80059cc:	0800700c 	.word	0x0800700c

080059d0 <memcpy>:
 80059d0:	440a      	add	r2, r1
 80059d2:	4291      	cmp	r1, r2
 80059d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059d8:	d100      	bne.n	80059dc <memcpy+0xc>
 80059da:	4770      	bx	lr
 80059dc:	b510      	push	{r4, lr}
 80059de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059e6:	4291      	cmp	r1, r2
 80059e8:	d1f9      	bne.n	80059de <memcpy+0xe>
 80059ea:	bd10      	pop	{r4, pc}

080059ec <memset>:
 80059ec:	4402      	add	r2, r0
 80059ee:	4603      	mov	r3, r0
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d100      	bne.n	80059f6 <memset+0xa>
 80059f4:	4770      	bx	lr
 80059f6:	f803 1b01 	strb.w	r1, [r3], #1
 80059fa:	e7f9      	b.n	80059f0 <memset+0x4>

080059fc <sniprintf>:
 80059fc:	b40c      	push	{r2, r3}
 80059fe:	b530      	push	{r4, r5, lr}
 8005a00:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <sniprintf+0x64>)
 8005a02:	1e0c      	subs	r4, r1, #0
 8005a04:	681d      	ldr	r5, [r3, #0]
 8005a06:	b09d      	sub	sp, #116	; 0x74
 8005a08:	da08      	bge.n	8005a1c <sniprintf+0x20>
 8005a0a:	238b      	movs	r3, #139	; 0x8b
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a12:	b01d      	add	sp, #116	; 0x74
 8005a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a18:	b002      	add	sp, #8
 8005a1a:	4770      	bx	lr
 8005a1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a24:	bf14      	ite	ne
 8005a26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005a2a:	4623      	moveq	r3, r4
 8005a2c:	9304      	str	r3, [sp, #16]
 8005a2e:	9307      	str	r3, [sp, #28]
 8005a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a34:	9002      	str	r0, [sp, #8]
 8005a36:	9006      	str	r0, [sp, #24]
 8005a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a3e:	ab21      	add	r3, sp, #132	; 0x84
 8005a40:	a902      	add	r1, sp, #8
 8005a42:	4628      	mov	r0, r5
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	f000 f8a9 	bl	8005b9c <_svfiprintf_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	bfbc      	itt	lt
 8005a4e:	238b      	movlt	r3, #139	; 0x8b
 8005a50:	602b      	strlt	r3, [r5, #0]
 8005a52:	2c00      	cmp	r4, #0
 8005a54:	d0dd      	beq.n	8005a12 <sniprintf+0x16>
 8005a56:	9b02      	ldr	r3, [sp, #8]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	e7d9      	b.n	8005a12 <sniprintf+0x16>
 8005a5e:	bf00      	nop
 8005a60:	2000000c 	.word	0x2000000c

08005a64 <siscanf>:
 8005a64:	b40e      	push	{r1, r2, r3}
 8005a66:	b530      	push	{r4, r5, lr}
 8005a68:	b09c      	sub	sp, #112	; 0x70
 8005a6a:	ac1f      	add	r4, sp, #124	; 0x7c
 8005a6c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005a70:	f854 5b04 	ldr.w	r5, [r4], #4
 8005a74:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005a78:	9002      	str	r0, [sp, #8]
 8005a7a:	9006      	str	r0, [sp, #24]
 8005a7c:	f7fa fb80 	bl	8000180 <strlen>
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <siscanf+0x4c>)
 8005a82:	9003      	str	r0, [sp, #12]
 8005a84:	9007      	str	r0, [sp, #28]
 8005a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a88:	480a      	ldr	r0, [pc, #40]	; (8005ab4 <siscanf+0x50>)
 8005a8a:	9401      	str	r4, [sp, #4]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a90:	9314      	str	r3, [sp, #80]	; 0x50
 8005a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a96:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a9a:	462a      	mov	r2, r5
 8005a9c:	4623      	mov	r3, r4
 8005a9e:	a902      	add	r1, sp, #8
 8005aa0:	6800      	ldr	r0, [r0, #0]
 8005aa2:	f000 f9d5 	bl	8005e50 <__ssvfiscanf_r>
 8005aa6:	b01c      	add	sp, #112	; 0x70
 8005aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aac:	b003      	add	sp, #12
 8005aae:	4770      	bx	lr
 8005ab0:	08005ab9 	.word	0x08005ab9
 8005ab4:	2000000c 	.word	0x2000000c

08005ab8 <__seofread>:
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4770      	bx	lr

08005abc <strncmp>:
 8005abc:	b510      	push	{r4, lr}
 8005abe:	4603      	mov	r3, r0
 8005ac0:	b172      	cbz	r2, 8005ae0 <strncmp+0x24>
 8005ac2:	3901      	subs	r1, #1
 8005ac4:	1884      	adds	r4, r0, r2
 8005ac6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005aca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ace:	4290      	cmp	r0, r2
 8005ad0:	d101      	bne.n	8005ad6 <strncmp+0x1a>
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d101      	bne.n	8005ada <strncmp+0x1e>
 8005ad6:	1a80      	subs	r0, r0, r2
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d1f3      	bne.n	8005ac6 <strncmp+0xa>
 8005ade:	e7fa      	b.n	8005ad6 <strncmp+0x1a>
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	e7f9      	b.n	8005ad8 <strncmp+0x1c>

08005ae4 <__ssputs_r>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	688e      	ldr	r6, [r1, #8]
 8005aea:	429e      	cmp	r6, r3
 8005aec:	4682      	mov	sl, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	4690      	mov	r8, r2
 8005af2:	461f      	mov	r7, r3
 8005af4:	d838      	bhi.n	8005b68 <__ssputs_r+0x84>
 8005af6:	898a      	ldrh	r2, [r1, #12]
 8005af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005afc:	d032      	beq.n	8005b64 <__ssputs_r+0x80>
 8005afe:	6825      	ldr	r5, [r4, #0]
 8005b00:	6909      	ldr	r1, [r1, #16]
 8005b02:	eba5 0901 	sub.w	r9, r5, r1
 8005b06:	6965      	ldr	r5, [r4, #20]
 8005b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b10:	3301      	adds	r3, #1
 8005b12:	444b      	add	r3, r9
 8005b14:	106d      	asrs	r5, r5, #1
 8005b16:	429d      	cmp	r5, r3
 8005b18:	bf38      	it	cc
 8005b1a:	461d      	movcc	r5, r3
 8005b1c:	0553      	lsls	r3, r2, #21
 8005b1e:	d531      	bpl.n	8005b84 <__ssputs_r+0xa0>
 8005b20:	4629      	mov	r1, r5
 8005b22:	f000 ffdd 	bl	8006ae0 <_malloc_r>
 8005b26:	4606      	mov	r6, r0
 8005b28:	b950      	cbnz	r0, 8005b40 <__ssputs_r+0x5c>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f8ca 3000 	str.w	r3, [sl]
 8005b30:	89a3      	ldrh	r3, [r4, #12]
 8005b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	6921      	ldr	r1, [r4, #16]
 8005b42:	464a      	mov	r2, r9
 8005b44:	f7ff ff44 	bl	80059d0 <memcpy>
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b52:	81a3      	strh	r3, [r4, #12]
 8005b54:	6126      	str	r6, [r4, #16]
 8005b56:	6165      	str	r5, [r4, #20]
 8005b58:	444e      	add	r6, r9
 8005b5a:	eba5 0509 	sub.w	r5, r5, r9
 8005b5e:	6026      	str	r6, [r4, #0]
 8005b60:	60a5      	str	r5, [r4, #8]
 8005b62:	463e      	mov	r6, r7
 8005b64:	42be      	cmp	r6, r7
 8005b66:	d900      	bls.n	8005b6a <__ssputs_r+0x86>
 8005b68:	463e      	mov	r6, r7
 8005b6a:	6820      	ldr	r0, [r4, #0]
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	4641      	mov	r1, r8
 8005b70:	f000 ff32 	bl	80069d8 <memmove>
 8005b74:	68a3      	ldr	r3, [r4, #8]
 8005b76:	1b9b      	subs	r3, r3, r6
 8005b78:	60a3      	str	r3, [r4, #8]
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	4433      	add	r3, r6
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	2000      	movs	r0, #0
 8005b82:	e7db      	b.n	8005b3c <__ssputs_r+0x58>
 8005b84:	462a      	mov	r2, r5
 8005b86:	f001 f81f 	bl	8006bc8 <_realloc_r>
 8005b8a:	4606      	mov	r6, r0
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d1e1      	bne.n	8005b54 <__ssputs_r+0x70>
 8005b90:	6921      	ldr	r1, [r4, #16]
 8005b92:	4650      	mov	r0, sl
 8005b94:	f000 ff3a 	bl	8006a0c <_free_r>
 8005b98:	e7c7      	b.n	8005b2a <__ssputs_r+0x46>
	...

08005b9c <_svfiprintf_r>:
 8005b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba0:	4698      	mov	r8, r3
 8005ba2:	898b      	ldrh	r3, [r1, #12]
 8005ba4:	061b      	lsls	r3, r3, #24
 8005ba6:	b09d      	sub	sp, #116	; 0x74
 8005ba8:	4607      	mov	r7, r0
 8005baa:	460d      	mov	r5, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	d50e      	bpl.n	8005bce <_svfiprintf_r+0x32>
 8005bb0:	690b      	ldr	r3, [r1, #16]
 8005bb2:	b963      	cbnz	r3, 8005bce <_svfiprintf_r+0x32>
 8005bb4:	2140      	movs	r1, #64	; 0x40
 8005bb6:	f000 ff93 	bl	8006ae0 <_malloc_r>
 8005bba:	6028      	str	r0, [r5, #0]
 8005bbc:	6128      	str	r0, [r5, #16]
 8005bbe:	b920      	cbnz	r0, 8005bca <_svfiprintf_r+0x2e>
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bc8:	e0d1      	b.n	8005d6e <_svfiprintf_r+0x1d2>
 8005bca:	2340      	movs	r3, #64	; 0x40
 8005bcc:	616b      	str	r3, [r5, #20]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bdc:	2330      	movs	r3, #48	; 0x30
 8005bde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005d88 <_svfiprintf_r+0x1ec>
 8005be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005be6:	f04f 0901 	mov.w	r9, #1
 8005bea:	4623      	mov	r3, r4
 8005bec:	469a      	mov	sl, r3
 8005bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf2:	b10a      	cbz	r2, 8005bf8 <_svfiprintf_r+0x5c>
 8005bf4:	2a25      	cmp	r2, #37	; 0x25
 8005bf6:	d1f9      	bne.n	8005bec <_svfiprintf_r+0x50>
 8005bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8005bfc:	d00b      	beq.n	8005c16 <_svfiprintf_r+0x7a>
 8005bfe:	465b      	mov	r3, fp
 8005c00:	4622      	mov	r2, r4
 8005c02:	4629      	mov	r1, r5
 8005c04:	4638      	mov	r0, r7
 8005c06:	f7ff ff6d 	bl	8005ae4 <__ssputs_r>
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f000 80aa 	beq.w	8005d64 <_svfiprintf_r+0x1c8>
 8005c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c12:	445a      	add	r2, fp
 8005c14:	9209      	str	r2, [sp, #36]	; 0x24
 8005c16:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80a2 	beq.w	8005d64 <_svfiprintf_r+0x1c8>
 8005c20:	2300      	movs	r3, #0
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c2a:	f10a 0a01 	add.w	sl, sl, #1
 8005c2e:	9304      	str	r3, [sp, #16]
 8005c30:	9307      	str	r3, [sp, #28]
 8005c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c36:	931a      	str	r3, [sp, #104]	; 0x68
 8005c38:	4654      	mov	r4, sl
 8005c3a:	2205      	movs	r2, #5
 8005c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c40:	4851      	ldr	r0, [pc, #324]	; (8005d88 <_svfiprintf_r+0x1ec>)
 8005c42:	f7fa faa5 	bl	8000190 <memchr>
 8005c46:	9a04      	ldr	r2, [sp, #16]
 8005c48:	b9d8      	cbnz	r0, 8005c82 <_svfiprintf_r+0xe6>
 8005c4a:	06d0      	lsls	r0, r2, #27
 8005c4c:	bf44      	itt	mi
 8005c4e:	2320      	movmi	r3, #32
 8005c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c54:	0711      	lsls	r1, r2, #28
 8005c56:	bf44      	itt	mi
 8005c58:	232b      	movmi	r3, #43	; 0x2b
 8005c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005c62:	2b2a      	cmp	r3, #42	; 0x2a
 8005c64:	d015      	beq.n	8005c92 <_svfiprintf_r+0xf6>
 8005c66:	9a07      	ldr	r2, [sp, #28]
 8005c68:	4654      	mov	r4, sl
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f04f 0c0a 	mov.w	ip, #10
 8005c70:	4621      	mov	r1, r4
 8005c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c76:	3b30      	subs	r3, #48	; 0x30
 8005c78:	2b09      	cmp	r3, #9
 8005c7a:	d94e      	bls.n	8005d1a <_svfiprintf_r+0x17e>
 8005c7c:	b1b0      	cbz	r0, 8005cac <_svfiprintf_r+0x110>
 8005c7e:	9207      	str	r2, [sp, #28]
 8005c80:	e014      	b.n	8005cac <_svfiprintf_r+0x110>
 8005c82:	eba0 0308 	sub.w	r3, r0, r8
 8005c86:	fa09 f303 	lsl.w	r3, r9, r3
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	9304      	str	r3, [sp, #16]
 8005c8e:	46a2      	mov	sl, r4
 8005c90:	e7d2      	b.n	8005c38 <_svfiprintf_r+0x9c>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	1d19      	adds	r1, r3, #4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	9103      	str	r1, [sp, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bfbb      	ittet	lt
 8005c9e:	425b      	neglt	r3, r3
 8005ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ca4:	9307      	strge	r3, [sp, #28]
 8005ca6:	9307      	strlt	r3, [sp, #28]
 8005ca8:	bfb8      	it	lt
 8005caa:	9204      	strlt	r2, [sp, #16]
 8005cac:	7823      	ldrb	r3, [r4, #0]
 8005cae:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb0:	d10c      	bne.n	8005ccc <_svfiprintf_r+0x130>
 8005cb2:	7863      	ldrb	r3, [r4, #1]
 8005cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cb6:	d135      	bne.n	8005d24 <_svfiprintf_r+0x188>
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	1d1a      	adds	r2, r3, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	9203      	str	r2, [sp, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bfb8      	it	lt
 8005cc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cc8:	3402      	adds	r4, #2
 8005cca:	9305      	str	r3, [sp, #20]
 8005ccc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005d8c <_svfiprintf_r+0x1f0>
 8005cd0:	7821      	ldrb	r1, [r4, #0]
 8005cd2:	2203      	movs	r2, #3
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	f7fa fa5b 	bl	8000190 <memchr>
 8005cda:	b140      	cbz	r0, 8005cee <_svfiprintf_r+0x152>
 8005cdc:	2340      	movs	r3, #64	; 0x40
 8005cde:	eba0 000a 	sub.w	r0, r0, sl
 8005ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ce6:	9b04      	ldr	r3, [sp, #16]
 8005ce8:	4303      	orrs	r3, r0
 8005cea:	3401      	adds	r4, #1
 8005cec:	9304      	str	r3, [sp, #16]
 8005cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf2:	4827      	ldr	r0, [pc, #156]	; (8005d90 <_svfiprintf_r+0x1f4>)
 8005cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cf8:	2206      	movs	r2, #6
 8005cfa:	f7fa fa49 	bl	8000190 <memchr>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d038      	beq.n	8005d74 <_svfiprintf_r+0x1d8>
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <_svfiprintf_r+0x1f8>)
 8005d04:	bb1b      	cbnz	r3, 8005d4e <_svfiprintf_r+0x1b2>
 8005d06:	9b03      	ldr	r3, [sp, #12]
 8005d08:	3307      	adds	r3, #7
 8005d0a:	f023 0307 	bic.w	r3, r3, #7
 8005d0e:	3308      	adds	r3, #8
 8005d10:	9303      	str	r3, [sp, #12]
 8005d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d14:	4433      	add	r3, r6
 8005d16:	9309      	str	r3, [sp, #36]	; 0x24
 8005d18:	e767      	b.n	8005bea <_svfiprintf_r+0x4e>
 8005d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d1e:	460c      	mov	r4, r1
 8005d20:	2001      	movs	r0, #1
 8005d22:	e7a5      	b.n	8005c70 <_svfiprintf_r+0xd4>
 8005d24:	2300      	movs	r3, #0
 8005d26:	3401      	adds	r4, #1
 8005d28:	9305      	str	r3, [sp, #20]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f04f 0c0a 	mov.w	ip, #10
 8005d30:	4620      	mov	r0, r4
 8005d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d36:	3a30      	subs	r2, #48	; 0x30
 8005d38:	2a09      	cmp	r2, #9
 8005d3a:	d903      	bls.n	8005d44 <_svfiprintf_r+0x1a8>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0c5      	beq.n	8005ccc <_svfiprintf_r+0x130>
 8005d40:	9105      	str	r1, [sp, #20]
 8005d42:	e7c3      	b.n	8005ccc <_svfiprintf_r+0x130>
 8005d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d48:	4604      	mov	r4, r0
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7f0      	b.n	8005d30 <_svfiprintf_r+0x194>
 8005d4e:	ab03      	add	r3, sp, #12
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	462a      	mov	r2, r5
 8005d54:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <_svfiprintf_r+0x1fc>)
 8005d56:	a904      	add	r1, sp, #16
 8005d58:	4638      	mov	r0, r7
 8005d5a:	f3af 8000 	nop.w
 8005d5e:	1c42      	adds	r2, r0, #1
 8005d60:	4606      	mov	r6, r0
 8005d62:	d1d6      	bne.n	8005d12 <_svfiprintf_r+0x176>
 8005d64:	89ab      	ldrh	r3, [r5, #12]
 8005d66:	065b      	lsls	r3, r3, #25
 8005d68:	f53f af2c 	bmi.w	8005bc4 <_svfiprintf_r+0x28>
 8005d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d6e:	b01d      	add	sp, #116	; 0x74
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	ab03      	add	r3, sp, #12
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	462a      	mov	r2, r5
 8005d7a:	4b07      	ldr	r3, [pc, #28]	; (8005d98 <_svfiprintf_r+0x1fc>)
 8005d7c:	a904      	add	r1, sp, #16
 8005d7e:	4638      	mov	r0, r7
 8005d80:	f000 fa4c 	bl	800621c <_printf_i>
 8005d84:	e7eb      	b.n	8005d5e <_svfiprintf_r+0x1c2>
 8005d86:	bf00      	nop
 8005d88:	08006e50 	.word	0x08006e50
 8005d8c:	08006e56 	.word	0x08006e56
 8005d90:	08006e5a 	.word	0x08006e5a
 8005d94:	00000000 	.word	0x00000000
 8005d98:	08005ae5 	.word	0x08005ae5

08005d9c <_sungetc_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	1c4b      	adds	r3, r1, #1
 8005da0:	4614      	mov	r4, r2
 8005da2:	d103      	bne.n	8005dac <_sungetc_r+0x10>
 8005da4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005da8:	4628      	mov	r0, r5
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	8993      	ldrh	r3, [r2, #12]
 8005dae:	f023 0320 	bic.w	r3, r3, #32
 8005db2:	8193      	strh	r3, [r2, #12]
 8005db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005db6:	6852      	ldr	r2, [r2, #4]
 8005db8:	b2cd      	uxtb	r5, r1
 8005dba:	b18b      	cbz	r3, 8005de0 <_sungetc_r+0x44>
 8005dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	dd08      	ble.n	8005dd4 <_sungetc_r+0x38>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	1e5a      	subs	r2, r3, #1
 8005dc6:	6022      	str	r2, [r4, #0]
 8005dc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	6063      	str	r3, [r4, #4]
 8005dd2:	e7e9      	b.n	8005da8 <_sungetc_r+0xc>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	f000 fdc3 	bl	8006960 <__submore>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d0f1      	beq.n	8005dc2 <_sungetc_r+0x26>
 8005dde:	e7e1      	b.n	8005da4 <_sungetc_r+0x8>
 8005de0:	6921      	ldr	r1, [r4, #16]
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	b151      	cbz	r1, 8005dfc <_sungetc_r+0x60>
 8005de6:	4299      	cmp	r1, r3
 8005de8:	d208      	bcs.n	8005dfc <_sungetc_r+0x60>
 8005dea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005dee:	42a9      	cmp	r1, r5
 8005df0:	d104      	bne.n	8005dfc <_sungetc_r+0x60>
 8005df2:	3b01      	subs	r3, #1
 8005df4:	3201      	adds	r2, #1
 8005df6:	6023      	str	r3, [r4, #0]
 8005df8:	6062      	str	r2, [r4, #4]
 8005dfa:	e7d5      	b.n	8005da8 <_sungetc_r+0xc>
 8005dfc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e04:	6363      	str	r3, [r4, #52]	; 0x34
 8005e06:	2303      	movs	r3, #3
 8005e08:	63a3      	str	r3, [r4, #56]	; 0x38
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	2301      	movs	r3, #1
 8005e14:	e7dc      	b.n	8005dd0 <_sungetc_r+0x34>

08005e16 <__ssrefill_r>:
 8005e16:	b510      	push	{r4, lr}
 8005e18:	460c      	mov	r4, r1
 8005e1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005e1c:	b169      	cbz	r1, 8005e3a <__ssrefill_r+0x24>
 8005e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e22:	4299      	cmp	r1, r3
 8005e24:	d001      	beq.n	8005e2a <__ssrefill_r+0x14>
 8005e26:	f000 fdf1 	bl	8006a0c <_free_r>
 8005e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e2c:	6063      	str	r3, [r4, #4]
 8005e2e:	2000      	movs	r0, #0
 8005e30:	6360      	str	r0, [r4, #52]	; 0x34
 8005e32:	b113      	cbz	r3, 8005e3a <__ssrefill_r+0x24>
 8005e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	bd10      	pop	{r4, pc}
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f043 0320 	orr.w	r3, r3, #32
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e4e:	e7f3      	b.n	8005e38 <__ssrefill_r+0x22>

08005e50 <__ssvfiscanf_r>:
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	460c      	mov	r4, r1
 8005e56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005e60:	49a6      	ldr	r1, [pc, #664]	; (80060fc <__ssvfiscanf_r+0x2ac>)
 8005e62:	91a0      	str	r1, [sp, #640]	; 0x280
 8005e64:	f10d 0804 	add.w	r8, sp, #4
 8005e68:	49a5      	ldr	r1, [pc, #660]	; (8006100 <__ssvfiscanf_r+0x2b0>)
 8005e6a:	4fa6      	ldr	r7, [pc, #664]	; (8006104 <__ssvfiscanf_r+0x2b4>)
 8005e6c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006108 <__ssvfiscanf_r+0x2b8>
 8005e70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005e74:	4606      	mov	r6, r0
 8005e76:	91a1      	str	r1, [sp, #644]	; 0x284
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	7813      	ldrb	r3, [r2, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 815a 	beq.w	8006136 <__ssvfiscanf_r+0x2e6>
 8005e82:	5dd9      	ldrb	r1, [r3, r7]
 8005e84:	f011 0108 	ands.w	r1, r1, #8
 8005e88:	f102 0501 	add.w	r5, r2, #1
 8005e8c:	d019      	beq.n	8005ec2 <__ssvfiscanf_r+0x72>
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	dd0f      	ble.n	8005eb4 <__ssvfiscanf_r+0x64>
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	5cba      	ldrb	r2, [r7, r2]
 8005e9a:	0712      	lsls	r2, r2, #28
 8005e9c:	d401      	bmi.n	8005ea2 <__ssvfiscanf_r+0x52>
 8005e9e:	462a      	mov	r2, r5
 8005ea0:	e7eb      	b.n	8005e7a <__ssvfiscanf_r+0x2a>
 8005ea2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005ea4:	3201      	adds	r2, #1
 8005ea6:	9245      	str	r2, [sp, #276]	; 0x114
 8005ea8:	6862      	ldr	r2, [r4, #4]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	3a01      	subs	r2, #1
 8005eae:	6062      	str	r2, [r4, #4]
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	e7ec      	b.n	8005e8e <__ssvfiscanf_r+0x3e>
 8005eb4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4630      	mov	r0, r6
 8005eba:	4798      	blx	r3
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d0e9      	beq.n	8005e94 <__ssvfiscanf_r+0x44>
 8005ec0:	e7ed      	b.n	8005e9e <__ssvfiscanf_r+0x4e>
 8005ec2:	2b25      	cmp	r3, #37	; 0x25
 8005ec4:	d012      	beq.n	8005eec <__ssvfiscanf_r+0x9c>
 8005ec6:	469a      	mov	sl, r3
 8005ec8:	6863      	ldr	r3, [r4, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f340 8091 	ble.w	8005ff2 <__ssvfiscanf_r+0x1a2>
 8005ed0:	6822      	ldr	r2, [r4, #0]
 8005ed2:	7813      	ldrb	r3, [r2, #0]
 8005ed4:	4553      	cmp	r3, sl
 8005ed6:	f040 812e 	bne.w	8006136 <__ssvfiscanf_r+0x2e6>
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005ee2:	3201      	adds	r2, #1
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	6022      	str	r2, [r4, #0]
 8005ee8:	9345      	str	r3, [sp, #276]	; 0x114
 8005eea:	e7d8      	b.n	8005e9e <__ssvfiscanf_r+0x4e>
 8005eec:	9141      	str	r1, [sp, #260]	; 0x104
 8005eee:	9143      	str	r1, [sp, #268]	; 0x10c
 8005ef0:	7853      	ldrb	r3, [r2, #1]
 8005ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef4:	bf02      	ittt	eq
 8005ef6:	2310      	moveq	r3, #16
 8005ef8:	1c95      	addeq	r5, r2, #2
 8005efa:	9341      	streq	r3, [sp, #260]	; 0x104
 8005efc:	220a      	movs	r2, #10
 8005efe:	46aa      	mov	sl, r5
 8005f00:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005f04:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d91d      	bls.n	8005f48 <__ssvfiscanf_r+0xf8>
 8005f0c:	487e      	ldr	r0, [pc, #504]	; (8006108 <__ssvfiscanf_r+0x2b8>)
 8005f0e:	2203      	movs	r2, #3
 8005f10:	f7fa f93e 	bl	8000190 <memchr>
 8005f14:	b140      	cbz	r0, 8005f28 <__ssvfiscanf_r+0xd8>
 8005f16:	2301      	movs	r3, #1
 8005f18:	eba0 0009 	sub.w	r0, r0, r9
 8005f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8005f20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f22:	4318      	orrs	r0, r3
 8005f24:	9041      	str	r0, [sp, #260]	; 0x104
 8005f26:	4655      	mov	r5, sl
 8005f28:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f2c:	2b78      	cmp	r3, #120	; 0x78
 8005f2e:	d806      	bhi.n	8005f3e <__ssvfiscanf_r+0xee>
 8005f30:	2b57      	cmp	r3, #87	; 0x57
 8005f32:	d810      	bhi.n	8005f56 <__ssvfiscanf_r+0x106>
 8005f34:	2b25      	cmp	r3, #37	; 0x25
 8005f36:	d0c6      	beq.n	8005ec6 <__ssvfiscanf_r+0x76>
 8005f38:	d856      	bhi.n	8005fe8 <__ssvfiscanf_r+0x198>
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d064      	beq.n	8006008 <__ssvfiscanf_r+0x1b8>
 8005f3e:	2303      	movs	r3, #3
 8005f40:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f42:	230a      	movs	r3, #10
 8005f44:	9342      	str	r3, [sp, #264]	; 0x108
 8005f46:	e071      	b.n	800602c <__ssvfiscanf_r+0x1dc>
 8005f48:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005f4a:	fb02 1103 	mla	r1, r2, r3, r1
 8005f4e:	3930      	subs	r1, #48	; 0x30
 8005f50:	9143      	str	r1, [sp, #268]	; 0x10c
 8005f52:	4655      	mov	r5, sl
 8005f54:	e7d3      	b.n	8005efe <__ssvfiscanf_r+0xae>
 8005f56:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005f5a:	2a20      	cmp	r2, #32
 8005f5c:	d8ef      	bhi.n	8005f3e <__ssvfiscanf_r+0xee>
 8005f5e:	a101      	add	r1, pc, #4	; (adr r1, 8005f64 <__ssvfiscanf_r+0x114>)
 8005f60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f64:	08006017 	.word	0x08006017
 8005f68:	08005f3f 	.word	0x08005f3f
 8005f6c:	08005f3f 	.word	0x08005f3f
 8005f70:	08006075 	.word	0x08006075
 8005f74:	08005f3f 	.word	0x08005f3f
 8005f78:	08005f3f 	.word	0x08005f3f
 8005f7c:	08005f3f 	.word	0x08005f3f
 8005f80:	08005f3f 	.word	0x08005f3f
 8005f84:	08005f3f 	.word	0x08005f3f
 8005f88:	08005f3f 	.word	0x08005f3f
 8005f8c:	08005f3f 	.word	0x08005f3f
 8005f90:	0800608b 	.word	0x0800608b
 8005f94:	08006061 	.word	0x08006061
 8005f98:	08005fef 	.word	0x08005fef
 8005f9c:	08005fef 	.word	0x08005fef
 8005fa0:	08005fef 	.word	0x08005fef
 8005fa4:	08005f3f 	.word	0x08005f3f
 8005fa8:	08006065 	.word	0x08006065
 8005fac:	08005f3f 	.word	0x08005f3f
 8005fb0:	08005f3f 	.word	0x08005f3f
 8005fb4:	08005f3f 	.word	0x08005f3f
 8005fb8:	08005f3f 	.word	0x08005f3f
 8005fbc:	0800609b 	.word	0x0800609b
 8005fc0:	0800606d 	.word	0x0800606d
 8005fc4:	0800600f 	.word	0x0800600f
 8005fc8:	08005f3f 	.word	0x08005f3f
 8005fcc:	08005f3f 	.word	0x08005f3f
 8005fd0:	08006097 	.word	0x08006097
 8005fd4:	08005f3f 	.word	0x08005f3f
 8005fd8:	08006061 	.word	0x08006061
 8005fdc:	08005f3f 	.word	0x08005f3f
 8005fe0:	08005f3f 	.word	0x08005f3f
 8005fe4:	08006017 	.word	0x08006017
 8005fe8:	3b45      	subs	r3, #69	; 0x45
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d8a7      	bhi.n	8005f3e <__ssvfiscanf_r+0xee>
 8005fee:	2305      	movs	r3, #5
 8005ff0:	e01b      	b.n	800602a <__ssvfiscanf_r+0x1da>
 8005ff2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	4798      	blx	r3
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	f43f af68 	beq.w	8005ed0 <__ssvfiscanf_r+0x80>
 8006000:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006002:	2800      	cmp	r0, #0
 8006004:	f040 808d 	bne.w	8006122 <__ssvfiscanf_r+0x2d2>
 8006008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800600c:	e08f      	b.n	800612e <__ssvfiscanf_r+0x2de>
 800600e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006010:	f042 0220 	orr.w	r2, r2, #32
 8006014:	9241      	str	r2, [sp, #260]	; 0x104
 8006016:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601c:	9241      	str	r2, [sp, #260]	; 0x104
 800601e:	2210      	movs	r2, #16
 8006020:	2b6f      	cmp	r3, #111	; 0x6f
 8006022:	9242      	str	r2, [sp, #264]	; 0x108
 8006024:	bf34      	ite	cc
 8006026:	2303      	movcc	r3, #3
 8006028:	2304      	movcs	r3, #4
 800602a:	9347      	str	r3, [sp, #284]	; 0x11c
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	dd42      	ble.n	80060b8 <__ssvfiscanf_r+0x268>
 8006032:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006034:	0659      	lsls	r1, r3, #25
 8006036:	d404      	bmi.n	8006042 <__ssvfiscanf_r+0x1f2>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	5cba      	ldrb	r2, [r7, r2]
 800603e:	0712      	lsls	r2, r2, #28
 8006040:	d441      	bmi.n	80060c6 <__ssvfiscanf_r+0x276>
 8006042:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006044:	2b02      	cmp	r3, #2
 8006046:	dc50      	bgt.n	80060ea <__ssvfiscanf_r+0x29a>
 8006048:	466b      	mov	r3, sp
 800604a:	4622      	mov	r2, r4
 800604c:	a941      	add	r1, sp, #260	; 0x104
 800604e:	4630      	mov	r0, r6
 8006050:	f000 fa0a 	bl	8006468 <_scanf_chars>
 8006054:	2801      	cmp	r0, #1
 8006056:	d06e      	beq.n	8006136 <__ssvfiscanf_r+0x2e6>
 8006058:	2802      	cmp	r0, #2
 800605a:	f47f af20 	bne.w	8005e9e <__ssvfiscanf_r+0x4e>
 800605e:	e7cf      	b.n	8006000 <__ssvfiscanf_r+0x1b0>
 8006060:	220a      	movs	r2, #10
 8006062:	e7dd      	b.n	8006020 <__ssvfiscanf_r+0x1d0>
 8006064:	2300      	movs	r3, #0
 8006066:	9342      	str	r3, [sp, #264]	; 0x108
 8006068:	2303      	movs	r3, #3
 800606a:	e7de      	b.n	800602a <__ssvfiscanf_r+0x1da>
 800606c:	2308      	movs	r3, #8
 800606e:	9342      	str	r3, [sp, #264]	; 0x108
 8006070:	2304      	movs	r3, #4
 8006072:	e7da      	b.n	800602a <__ssvfiscanf_r+0x1da>
 8006074:	4629      	mov	r1, r5
 8006076:	4640      	mov	r0, r8
 8006078:	f000 fb48 	bl	800670c <__sccl>
 800607c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800607e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006082:	9341      	str	r3, [sp, #260]	; 0x104
 8006084:	4605      	mov	r5, r0
 8006086:	2301      	movs	r3, #1
 8006088:	e7cf      	b.n	800602a <__ssvfiscanf_r+0x1da>
 800608a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800608c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006090:	9341      	str	r3, [sp, #260]	; 0x104
 8006092:	2300      	movs	r3, #0
 8006094:	e7c9      	b.n	800602a <__ssvfiscanf_r+0x1da>
 8006096:	2302      	movs	r3, #2
 8006098:	e7c7      	b.n	800602a <__ssvfiscanf_r+0x1da>
 800609a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800609c:	06c3      	lsls	r3, r0, #27
 800609e:	f53f aefe 	bmi.w	8005e9e <__ssvfiscanf_r+0x4e>
 80060a2:	9b00      	ldr	r3, [sp, #0]
 80060a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80060a6:	1d19      	adds	r1, r3, #4
 80060a8:	9100      	str	r1, [sp, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f010 0f01 	tst.w	r0, #1
 80060b0:	bf14      	ite	ne
 80060b2:	801a      	strhne	r2, [r3, #0]
 80060b4:	601a      	streq	r2, [r3, #0]
 80060b6:	e6f2      	b.n	8005e9e <__ssvfiscanf_r+0x4e>
 80060b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80060ba:	4621      	mov	r1, r4
 80060bc:	4630      	mov	r0, r6
 80060be:	4798      	blx	r3
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d0b6      	beq.n	8006032 <__ssvfiscanf_r+0x1e2>
 80060c4:	e79c      	b.n	8006000 <__ssvfiscanf_r+0x1b0>
 80060c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80060c8:	3201      	adds	r2, #1
 80060ca:	9245      	str	r2, [sp, #276]	; 0x114
 80060cc:	6862      	ldr	r2, [r4, #4]
 80060ce:	3a01      	subs	r2, #1
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	6062      	str	r2, [r4, #4]
 80060d4:	dd02      	ble.n	80060dc <__ssvfiscanf_r+0x28c>
 80060d6:	3301      	adds	r3, #1
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	e7ad      	b.n	8006038 <__ssvfiscanf_r+0x1e8>
 80060dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80060de:	4621      	mov	r1, r4
 80060e0:	4630      	mov	r0, r6
 80060e2:	4798      	blx	r3
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d0a7      	beq.n	8006038 <__ssvfiscanf_r+0x1e8>
 80060e8:	e78a      	b.n	8006000 <__ssvfiscanf_r+0x1b0>
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	dc0e      	bgt.n	800610c <__ssvfiscanf_r+0x2bc>
 80060ee:	466b      	mov	r3, sp
 80060f0:	4622      	mov	r2, r4
 80060f2:	a941      	add	r1, sp, #260	; 0x104
 80060f4:	4630      	mov	r0, r6
 80060f6:	f000 fa11 	bl	800651c <_scanf_i>
 80060fa:	e7ab      	b.n	8006054 <__ssvfiscanf_r+0x204>
 80060fc:	08005d9d 	.word	0x08005d9d
 8006100:	08005e17 	.word	0x08005e17
 8006104:	08006e9f 	.word	0x08006e9f
 8006108:	08006e56 	.word	0x08006e56
 800610c:	4b0b      	ldr	r3, [pc, #44]	; (800613c <__ssvfiscanf_r+0x2ec>)
 800610e:	2b00      	cmp	r3, #0
 8006110:	f43f aec5 	beq.w	8005e9e <__ssvfiscanf_r+0x4e>
 8006114:	466b      	mov	r3, sp
 8006116:	4622      	mov	r2, r4
 8006118:	a941      	add	r1, sp, #260	; 0x104
 800611a:	4630      	mov	r0, r6
 800611c:	f3af 8000 	nop.w
 8006120:	e798      	b.n	8006054 <__ssvfiscanf_r+0x204>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006128:	bf18      	it	ne
 800612a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800612e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006136:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006138:	e7f9      	b.n	800612e <__ssvfiscanf_r+0x2de>
 800613a:	bf00      	nop
 800613c:	00000000 	.word	0x00000000

08006140 <_printf_common>:
 8006140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	4616      	mov	r6, r2
 8006146:	4699      	mov	r9, r3
 8006148:	688a      	ldr	r2, [r1, #8]
 800614a:	690b      	ldr	r3, [r1, #16]
 800614c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006150:	4293      	cmp	r3, r2
 8006152:	bfb8      	it	lt
 8006154:	4613      	movlt	r3, r2
 8006156:	6033      	str	r3, [r6, #0]
 8006158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800615c:	4607      	mov	r7, r0
 800615e:	460c      	mov	r4, r1
 8006160:	b10a      	cbz	r2, 8006166 <_printf_common+0x26>
 8006162:	3301      	adds	r3, #1
 8006164:	6033      	str	r3, [r6, #0]
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	0699      	lsls	r1, r3, #26
 800616a:	bf42      	ittt	mi
 800616c:	6833      	ldrmi	r3, [r6, #0]
 800616e:	3302      	addmi	r3, #2
 8006170:	6033      	strmi	r3, [r6, #0]
 8006172:	6825      	ldr	r5, [r4, #0]
 8006174:	f015 0506 	ands.w	r5, r5, #6
 8006178:	d106      	bne.n	8006188 <_printf_common+0x48>
 800617a:	f104 0a19 	add.w	sl, r4, #25
 800617e:	68e3      	ldr	r3, [r4, #12]
 8006180:	6832      	ldr	r2, [r6, #0]
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	42ab      	cmp	r3, r5
 8006186:	dc26      	bgt.n	80061d6 <_printf_common+0x96>
 8006188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800618c:	1e13      	subs	r3, r2, #0
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	bf18      	it	ne
 8006192:	2301      	movne	r3, #1
 8006194:	0692      	lsls	r2, r2, #26
 8006196:	d42b      	bmi.n	80061f0 <_printf_common+0xb0>
 8006198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800619c:	4649      	mov	r1, r9
 800619e:	4638      	mov	r0, r7
 80061a0:	47c0      	blx	r8
 80061a2:	3001      	adds	r0, #1
 80061a4:	d01e      	beq.n	80061e4 <_printf_common+0xa4>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	68e5      	ldr	r5, [r4, #12]
 80061aa:	6832      	ldr	r2, [r6, #0]
 80061ac:	f003 0306 	and.w	r3, r3, #6
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	bf08      	it	eq
 80061b4:	1aad      	subeq	r5, r5, r2
 80061b6:	68a3      	ldr	r3, [r4, #8]
 80061b8:	6922      	ldr	r2, [r4, #16]
 80061ba:	bf0c      	ite	eq
 80061bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061c0:	2500      	movne	r5, #0
 80061c2:	4293      	cmp	r3, r2
 80061c4:	bfc4      	itt	gt
 80061c6:	1a9b      	subgt	r3, r3, r2
 80061c8:	18ed      	addgt	r5, r5, r3
 80061ca:	2600      	movs	r6, #0
 80061cc:	341a      	adds	r4, #26
 80061ce:	42b5      	cmp	r5, r6
 80061d0:	d11a      	bne.n	8006208 <_printf_common+0xc8>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e008      	b.n	80061e8 <_printf_common+0xa8>
 80061d6:	2301      	movs	r3, #1
 80061d8:	4652      	mov	r2, sl
 80061da:	4649      	mov	r1, r9
 80061dc:	4638      	mov	r0, r7
 80061de:	47c0      	blx	r8
 80061e0:	3001      	adds	r0, #1
 80061e2:	d103      	bne.n	80061ec <_printf_common+0xac>
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	3501      	adds	r5, #1
 80061ee:	e7c6      	b.n	800617e <_printf_common+0x3e>
 80061f0:	18e1      	adds	r1, r4, r3
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	2030      	movs	r0, #48	; 0x30
 80061f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061fa:	4422      	add	r2, r4
 80061fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006204:	3302      	adds	r3, #2
 8006206:	e7c7      	b.n	8006198 <_printf_common+0x58>
 8006208:	2301      	movs	r3, #1
 800620a:	4622      	mov	r2, r4
 800620c:	4649      	mov	r1, r9
 800620e:	4638      	mov	r0, r7
 8006210:	47c0      	blx	r8
 8006212:	3001      	adds	r0, #1
 8006214:	d0e6      	beq.n	80061e4 <_printf_common+0xa4>
 8006216:	3601      	adds	r6, #1
 8006218:	e7d9      	b.n	80061ce <_printf_common+0x8e>
	...

0800621c <_printf_i>:
 800621c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006220:	7e0f      	ldrb	r7, [r1, #24]
 8006222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006224:	2f78      	cmp	r7, #120	; 0x78
 8006226:	4691      	mov	r9, r2
 8006228:	4680      	mov	r8, r0
 800622a:	460c      	mov	r4, r1
 800622c:	469a      	mov	sl, r3
 800622e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006232:	d807      	bhi.n	8006244 <_printf_i+0x28>
 8006234:	2f62      	cmp	r7, #98	; 0x62
 8006236:	d80a      	bhi.n	800624e <_printf_i+0x32>
 8006238:	2f00      	cmp	r7, #0
 800623a:	f000 80d8 	beq.w	80063ee <_printf_i+0x1d2>
 800623e:	2f58      	cmp	r7, #88	; 0x58
 8006240:	f000 80a3 	beq.w	800638a <_printf_i+0x16e>
 8006244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800624c:	e03a      	b.n	80062c4 <_printf_i+0xa8>
 800624e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006252:	2b15      	cmp	r3, #21
 8006254:	d8f6      	bhi.n	8006244 <_printf_i+0x28>
 8006256:	a101      	add	r1, pc, #4	; (adr r1, 800625c <_printf_i+0x40>)
 8006258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800625c:	080062b5 	.word	0x080062b5
 8006260:	080062c9 	.word	0x080062c9
 8006264:	08006245 	.word	0x08006245
 8006268:	08006245 	.word	0x08006245
 800626c:	08006245 	.word	0x08006245
 8006270:	08006245 	.word	0x08006245
 8006274:	080062c9 	.word	0x080062c9
 8006278:	08006245 	.word	0x08006245
 800627c:	08006245 	.word	0x08006245
 8006280:	08006245 	.word	0x08006245
 8006284:	08006245 	.word	0x08006245
 8006288:	080063d5 	.word	0x080063d5
 800628c:	080062f9 	.word	0x080062f9
 8006290:	080063b7 	.word	0x080063b7
 8006294:	08006245 	.word	0x08006245
 8006298:	08006245 	.word	0x08006245
 800629c:	080063f7 	.word	0x080063f7
 80062a0:	08006245 	.word	0x08006245
 80062a4:	080062f9 	.word	0x080062f9
 80062a8:	08006245 	.word	0x08006245
 80062ac:	08006245 	.word	0x08006245
 80062b0:	080063bf 	.word	0x080063bf
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	1d1a      	adds	r2, r3, #4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	602a      	str	r2, [r5, #0]
 80062bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0a3      	b.n	8006410 <_printf_i+0x1f4>
 80062c8:	6820      	ldr	r0, [r4, #0]
 80062ca:	6829      	ldr	r1, [r5, #0]
 80062cc:	0606      	lsls	r6, r0, #24
 80062ce:	f101 0304 	add.w	r3, r1, #4
 80062d2:	d50a      	bpl.n	80062ea <_printf_i+0xce>
 80062d4:	680e      	ldr	r6, [r1, #0]
 80062d6:	602b      	str	r3, [r5, #0]
 80062d8:	2e00      	cmp	r6, #0
 80062da:	da03      	bge.n	80062e4 <_printf_i+0xc8>
 80062dc:	232d      	movs	r3, #45	; 0x2d
 80062de:	4276      	negs	r6, r6
 80062e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e4:	485e      	ldr	r0, [pc, #376]	; (8006460 <_printf_i+0x244>)
 80062e6:	230a      	movs	r3, #10
 80062e8:	e019      	b.n	800631e <_printf_i+0x102>
 80062ea:	680e      	ldr	r6, [r1, #0]
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062f2:	bf18      	it	ne
 80062f4:	b236      	sxthne	r6, r6
 80062f6:	e7ef      	b.n	80062d8 <_printf_i+0xbc>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	6029      	str	r1, [r5, #0]
 8006300:	0601      	lsls	r1, r0, #24
 8006302:	d501      	bpl.n	8006308 <_printf_i+0xec>
 8006304:	681e      	ldr	r6, [r3, #0]
 8006306:	e002      	b.n	800630e <_printf_i+0xf2>
 8006308:	0646      	lsls	r6, r0, #25
 800630a:	d5fb      	bpl.n	8006304 <_printf_i+0xe8>
 800630c:	881e      	ldrh	r6, [r3, #0]
 800630e:	4854      	ldr	r0, [pc, #336]	; (8006460 <_printf_i+0x244>)
 8006310:	2f6f      	cmp	r7, #111	; 0x6f
 8006312:	bf0c      	ite	eq
 8006314:	2308      	moveq	r3, #8
 8006316:	230a      	movne	r3, #10
 8006318:	2100      	movs	r1, #0
 800631a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800631e:	6865      	ldr	r5, [r4, #4]
 8006320:	60a5      	str	r5, [r4, #8]
 8006322:	2d00      	cmp	r5, #0
 8006324:	bfa2      	ittt	ge
 8006326:	6821      	ldrge	r1, [r4, #0]
 8006328:	f021 0104 	bicge.w	r1, r1, #4
 800632c:	6021      	strge	r1, [r4, #0]
 800632e:	b90e      	cbnz	r6, 8006334 <_printf_i+0x118>
 8006330:	2d00      	cmp	r5, #0
 8006332:	d04d      	beq.n	80063d0 <_printf_i+0x1b4>
 8006334:	4615      	mov	r5, r2
 8006336:	fbb6 f1f3 	udiv	r1, r6, r3
 800633a:	fb03 6711 	mls	r7, r3, r1, r6
 800633e:	5dc7      	ldrb	r7, [r0, r7]
 8006340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006344:	4637      	mov	r7, r6
 8006346:	42bb      	cmp	r3, r7
 8006348:	460e      	mov	r6, r1
 800634a:	d9f4      	bls.n	8006336 <_printf_i+0x11a>
 800634c:	2b08      	cmp	r3, #8
 800634e:	d10b      	bne.n	8006368 <_printf_i+0x14c>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	07de      	lsls	r6, r3, #31
 8006354:	d508      	bpl.n	8006368 <_printf_i+0x14c>
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	6861      	ldr	r1, [r4, #4]
 800635a:	4299      	cmp	r1, r3
 800635c:	bfde      	ittt	le
 800635e:	2330      	movle	r3, #48	; 0x30
 8006360:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006364:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006368:	1b52      	subs	r2, r2, r5
 800636a:	6122      	str	r2, [r4, #16]
 800636c:	f8cd a000 	str.w	sl, [sp]
 8006370:	464b      	mov	r3, r9
 8006372:	aa03      	add	r2, sp, #12
 8006374:	4621      	mov	r1, r4
 8006376:	4640      	mov	r0, r8
 8006378:	f7ff fee2 	bl	8006140 <_printf_common>
 800637c:	3001      	adds	r0, #1
 800637e:	d14c      	bne.n	800641a <_printf_i+0x1fe>
 8006380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006384:	b004      	add	sp, #16
 8006386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638a:	4835      	ldr	r0, [pc, #212]	; (8006460 <_printf_i+0x244>)
 800638c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006390:	6829      	ldr	r1, [r5, #0]
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	f851 6b04 	ldr.w	r6, [r1], #4
 8006398:	6029      	str	r1, [r5, #0]
 800639a:	061d      	lsls	r5, r3, #24
 800639c:	d514      	bpl.n	80063c8 <_printf_i+0x1ac>
 800639e:	07df      	lsls	r7, r3, #31
 80063a0:	bf44      	itt	mi
 80063a2:	f043 0320 	orrmi.w	r3, r3, #32
 80063a6:	6023      	strmi	r3, [r4, #0]
 80063a8:	b91e      	cbnz	r6, 80063b2 <_printf_i+0x196>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f023 0320 	bic.w	r3, r3, #32
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	2310      	movs	r3, #16
 80063b4:	e7b0      	b.n	8006318 <_printf_i+0xfc>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	f043 0320 	orr.w	r3, r3, #32
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	2378      	movs	r3, #120	; 0x78
 80063c0:	4828      	ldr	r0, [pc, #160]	; (8006464 <_printf_i+0x248>)
 80063c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063c6:	e7e3      	b.n	8006390 <_printf_i+0x174>
 80063c8:	0659      	lsls	r1, r3, #25
 80063ca:	bf48      	it	mi
 80063cc:	b2b6      	uxthmi	r6, r6
 80063ce:	e7e6      	b.n	800639e <_printf_i+0x182>
 80063d0:	4615      	mov	r5, r2
 80063d2:	e7bb      	b.n	800634c <_printf_i+0x130>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	6826      	ldr	r6, [r4, #0]
 80063d8:	6961      	ldr	r1, [r4, #20]
 80063da:	1d18      	adds	r0, r3, #4
 80063dc:	6028      	str	r0, [r5, #0]
 80063de:	0635      	lsls	r5, r6, #24
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	d501      	bpl.n	80063e8 <_printf_i+0x1cc>
 80063e4:	6019      	str	r1, [r3, #0]
 80063e6:	e002      	b.n	80063ee <_printf_i+0x1d2>
 80063e8:	0670      	lsls	r0, r6, #25
 80063ea:	d5fb      	bpl.n	80063e4 <_printf_i+0x1c8>
 80063ec:	8019      	strh	r1, [r3, #0]
 80063ee:	2300      	movs	r3, #0
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	4615      	mov	r5, r2
 80063f4:	e7ba      	b.n	800636c <_printf_i+0x150>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	1d1a      	adds	r2, r3, #4
 80063fa:	602a      	str	r2, [r5, #0]
 80063fc:	681d      	ldr	r5, [r3, #0]
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	2100      	movs	r1, #0
 8006402:	4628      	mov	r0, r5
 8006404:	f7f9 fec4 	bl	8000190 <memchr>
 8006408:	b108      	cbz	r0, 800640e <_printf_i+0x1f2>
 800640a:	1b40      	subs	r0, r0, r5
 800640c:	6060      	str	r0, [r4, #4]
 800640e:	6863      	ldr	r3, [r4, #4]
 8006410:	6123      	str	r3, [r4, #16]
 8006412:	2300      	movs	r3, #0
 8006414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006418:	e7a8      	b.n	800636c <_printf_i+0x150>
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	462a      	mov	r2, r5
 800641e:	4649      	mov	r1, r9
 8006420:	4640      	mov	r0, r8
 8006422:	47d0      	blx	sl
 8006424:	3001      	adds	r0, #1
 8006426:	d0ab      	beq.n	8006380 <_printf_i+0x164>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	079b      	lsls	r3, r3, #30
 800642c:	d413      	bmi.n	8006456 <_printf_i+0x23a>
 800642e:	68e0      	ldr	r0, [r4, #12]
 8006430:	9b03      	ldr	r3, [sp, #12]
 8006432:	4298      	cmp	r0, r3
 8006434:	bfb8      	it	lt
 8006436:	4618      	movlt	r0, r3
 8006438:	e7a4      	b.n	8006384 <_printf_i+0x168>
 800643a:	2301      	movs	r3, #1
 800643c:	4632      	mov	r2, r6
 800643e:	4649      	mov	r1, r9
 8006440:	4640      	mov	r0, r8
 8006442:	47d0      	blx	sl
 8006444:	3001      	adds	r0, #1
 8006446:	d09b      	beq.n	8006380 <_printf_i+0x164>
 8006448:	3501      	adds	r5, #1
 800644a:	68e3      	ldr	r3, [r4, #12]
 800644c:	9903      	ldr	r1, [sp, #12]
 800644e:	1a5b      	subs	r3, r3, r1
 8006450:	42ab      	cmp	r3, r5
 8006452:	dcf2      	bgt.n	800643a <_printf_i+0x21e>
 8006454:	e7eb      	b.n	800642e <_printf_i+0x212>
 8006456:	2500      	movs	r5, #0
 8006458:	f104 0619 	add.w	r6, r4, #25
 800645c:	e7f5      	b.n	800644a <_printf_i+0x22e>
 800645e:	bf00      	nop
 8006460:	08006e61 	.word	0x08006e61
 8006464:	08006e72 	.word	0x08006e72

08006468 <_scanf_chars>:
 8006468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800646c:	4615      	mov	r5, r2
 800646e:	688a      	ldr	r2, [r1, #8]
 8006470:	4680      	mov	r8, r0
 8006472:	460c      	mov	r4, r1
 8006474:	b932      	cbnz	r2, 8006484 <_scanf_chars+0x1c>
 8006476:	698a      	ldr	r2, [r1, #24]
 8006478:	2a00      	cmp	r2, #0
 800647a:	bf0c      	ite	eq
 800647c:	2201      	moveq	r2, #1
 800647e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006482:	608a      	str	r2, [r1, #8]
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006518 <_scanf_chars+0xb0>
 800648a:	06d1      	lsls	r1, r2, #27
 800648c:	bf5f      	itttt	pl
 800648e:	681a      	ldrpl	r2, [r3, #0]
 8006490:	1d11      	addpl	r1, r2, #4
 8006492:	6019      	strpl	r1, [r3, #0]
 8006494:	6816      	ldrpl	r6, [r2, #0]
 8006496:	2700      	movs	r7, #0
 8006498:	69a0      	ldr	r0, [r4, #24]
 800649a:	b188      	cbz	r0, 80064c0 <_scanf_chars+0x58>
 800649c:	2801      	cmp	r0, #1
 800649e:	d107      	bne.n	80064b0 <_scanf_chars+0x48>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	6963      	ldr	r3, [r4, #20]
 80064a6:	5c9b      	ldrb	r3, [r3, r2]
 80064a8:	b953      	cbnz	r3, 80064c0 <_scanf_chars+0x58>
 80064aa:	2f00      	cmp	r7, #0
 80064ac:	d031      	beq.n	8006512 <_scanf_chars+0xaa>
 80064ae:	e022      	b.n	80064f6 <_scanf_chars+0x8e>
 80064b0:	2802      	cmp	r0, #2
 80064b2:	d120      	bne.n	80064f6 <_scanf_chars+0x8e>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80064bc:	071b      	lsls	r3, r3, #28
 80064be:	d41a      	bmi.n	80064f6 <_scanf_chars+0x8e>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	06da      	lsls	r2, r3, #27
 80064c4:	bf5e      	ittt	pl
 80064c6:	682b      	ldrpl	r3, [r5, #0]
 80064c8:	781b      	ldrbpl	r3, [r3, #0]
 80064ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80064ce:	682a      	ldr	r2, [r5, #0]
 80064d0:	686b      	ldr	r3, [r5, #4]
 80064d2:	3201      	adds	r2, #1
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	68a2      	ldr	r2, [r4, #8]
 80064d8:	3b01      	subs	r3, #1
 80064da:	3a01      	subs	r2, #1
 80064dc:	606b      	str	r3, [r5, #4]
 80064de:	3701      	adds	r7, #1
 80064e0:	60a2      	str	r2, [r4, #8]
 80064e2:	b142      	cbz	r2, 80064f6 <_scanf_chars+0x8e>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dcd7      	bgt.n	8006498 <_scanf_chars+0x30>
 80064e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80064ec:	4629      	mov	r1, r5
 80064ee:	4640      	mov	r0, r8
 80064f0:	4798      	blx	r3
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d0d0      	beq.n	8006498 <_scanf_chars+0x30>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	f013 0310 	ands.w	r3, r3, #16
 80064fc:	d105      	bne.n	800650a <_scanf_chars+0xa2>
 80064fe:	68e2      	ldr	r2, [r4, #12]
 8006500:	3201      	adds	r2, #1
 8006502:	60e2      	str	r2, [r4, #12]
 8006504:	69a2      	ldr	r2, [r4, #24]
 8006506:	b102      	cbz	r2, 800650a <_scanf_chars+0xa2>
 8006508:	7033      	strb	r3, [r6, #0]
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	443b      	add	r3, r7
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	2000      	movs	r0, #0
 8006512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006516:	bf00      	nop
 8006518:	08006e9f 	.word	0x08006e9f

0800651c <_scanf_i>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	4698      	mov	r8, r3
 8006522:	4b76      	ldr	r3, [pc, #472]	; (80066fc <_scanf_i+0x1e0>)
 8006524:	460c      	mov	r4, r1
 8006526:	4682      	mov	sl, r0
 8006528:	4616      	mov	r6, r2
 800652a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800652e:	b087      	sub	sp, #28
 8006530:	ab03      	add	r3, sp, #12
 8006532:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006536:	4b72      	ldr	r3, [pc, #456]	; (8006700 <_scanf_i+0x1e4>)
 8006538:	69a1      	ldr	r1, [r4, #24]
 800653a:	4a72      	ldr	r2, [pc, #456]	; (8006704 <_scanf_i+0x1e8>)
 800653c:	2903      	cmp	r1, #3
 800653e:	bf18      	it	ne
 8006540:	461a      	movne	r2, r3
 8006542:	68a3      	ldr	r3, [r4, #8]
 8006544:	9201      	str	r2, [sp, #4]
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800654c:	bf88      	it	hi
 800654e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006552:	4627      	mov	r7, r4
 8006554:	bf82      	ittt	hi
 8006556:	eb03 0905 	addhi.w	r9, r3, r5
 800655a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800655e:	60a3      	strhi	r3, [r4, #8]
 8006560:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006564:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006568:	bf98      	it	ls
 800656a:	f04f 0900 	movls.w	r9, #0
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	463d      	mov	r5, r7
 8006572:	f04f 0b00 	mov.w	fp, #0
 8006576:	6831      	ldr	r1, [r6, #0]
 8006578:	ab03      	add	r3, sp, #12
 800657a:	7809      	ldrb	r1, [r1, #0]
 800657c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006580:	2202      	movs	r2, #2
 8006582:	f7f9 fe05 	bl	8000190 <memchr>
 8006586:	b328      	cbz	r0, 80065d4 <_scanf_i+0xb8>
 8006588:	f1bb 0f01 	cmp.w	fp, #1
 800658c:	d159      	bne.n	8006642 <_scanf_i+0x126>
 800658e:	6862      	ldr	r2, [r4, #4]
 8006590:	b92a      	cbnz	r2, 800659e <_scanf_i+0x82>
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	2308      	movs	r3, #8
 8006596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659a:	6063      	str	r3, [r4, #4]
 800659c:	6022      	str	r2, [r4, #0]
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80065a4:	6022      	str	r2, [r4, #0]
 80065a6:	68a2      	ldr	r2, [r4, #8]
 80065a8:	1e51      	subs	r1, r2, #1
 80065aa:	60a1      	str	r1, [r4, #8]
 80065ac:	b192      	cbz	r2, 80065d4 <_scanf_i+0xb8>
 80065ae:	6832      	ldr	r2, [r6, #0]
 80065b0:	1c51      	adds	r1, r2, #1
 80065b2:	6031      	str	r1, [r6, #0]
 80065b4:	7812      	ldrb	r2, [r2, #0]
 80065b6:	f805 2b01 	strb.w	r2, [r5], #1
 80065ba:	6872      	ldr	r2, [r6, #4]
 80065bc:	3a01      	subs	r2, #1
 80065be:	2a00      	cmp	r2, #0
 80065c0:	6072      	str	r2, [r6, #4]
 80065c2:	dc07      	bgt.n	80065d4 <_scanf_i+0xb8>
 80065c4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80065c8:	4631      	mov	r1, r6
 80065ca:	4650      	mov	r0, sl
 80065cc:	4790      	blx	r2
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 8085 	bne.w	80066de <_scanf_i+0x1c2>
 80065d4:	f10b 0b01 	add.w	fp, fp, #1
 80065d8:	f1bb 0f03 	cmp.w	fp, #3
 80065dc:	d1cb      	bne.n	8006576 <_scanf_i+0x5a>
 80065de:	6863      	ldr	r3, [r4, #4]
 80065e0:	b90b      	cbnz	r3, 80065e6 <_scanf_i+0xca>
 80065e2:	230a      	movs	r3, #10
 80065e4:	6063      	str	r3, [r4, #4]
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	4947      	ldr	r1, [pc, #284]	; (8006708 <_scanf_i+0x1ec>)
 80065ea:	6960      	ldr	r0, [r4, #20]
 80065ec:	1ac9      	subs	r1, r1, r3
 80065ee:	f000 f88d 	bl	800670c <__sccl>
 80065f2:	f04f 0b00 	mov.w	fp, #0
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	6822      	ldr	r2, [r4, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d03d      	beq.n	800667a <_scanf_i+0x15e>
 80065fe:	6831      	ldr	r1, [r6, #0]
 8006600:	6960      	ldr	r0, [r4, #20]
 8006602:	f891 c000 	ldrb.w	ip, [r1]
 8006606:	f810 000c 	ldrb.w	r0, [r0, ip]
 800660a:	2800      	cmp	r0, #0
 800660c:	d035      	beq.n	800667a <_scanf_i+0x15e>
 800660e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006612:	d124      	bne.n	800665e <_scanf_i+0x142>
 8006614:	0510      	lsls	r0, r2, #20
 8006616:	d522      	bpl.n	800665e <_scanf_i+0x142>
 8006618:	f10b 0b01 	add.w	fp, fp, #1
 800661c:	f1b9 0f00 	cmp.w	r9, #0
 8006620:	d003      	beq.n	800662a <_scanf_i+0x10e>
 8006622:	3301      	adds	r3, #1
 8006624:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006628:	60a3      	str	r3, [r4, #8]
 800662a:	6873      	ldr	r3, [r6, #4]
 800662c:	3b01      	subs	r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	6073      	str	r3, [r6, #4]
 8006632:	dd1b      	ble.n	800666c <_scanf_i+0x150>
 8006634:	6833      	ldr	r3, [r6, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	6033      	str	r3, [r6, #0]
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	3b01      	subs	r3, #1
 800663e:	60a3      	str	r3, [r4, #8]
 8006640:	e7d9      	b.n	80065f6 <_scanf_i+0xda>
 8006642:	f1bb 0f02 	cmp.w	fp, #2
 8006646:	d1ae      	bne.n	80065a6 <_scanf_i+0x8a>
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800664e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006652:	d1bf      	bne.n	80065d4 <_scanf_i+0xb8>
 8006654:	2310      	movs	r3, #16
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800665c:	e7a2      	b.n	80065a4 <_scanf_i+0x88>
 800665e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	780b      	ldrb	r3, [r1, #0]
 8006666:	f805 3b01 	strb.w	r3, [r5], #1
 800666a:	e7de      	b.n	800662a <_scanf_i+0x10e>
 800666c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006670:	4631      	mov	r1, r6
 8006672:	4650      	mov	r0, sl
 8006674:	4798      	blx	r3
 8006676:	2800      	cmp	r0, #0
 8006678:	d0df      	beq.n	800663a <_scanf_i+0x11e>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	05db      	lsls	r3, r3, #23
 800667e:	d50d      	bpl.n	800669c <_scanf_i+0x180>
 8006680:	42bd      	cmp	r5, r7
 8006682:	d909      	bls.n	8006698 <_scanf_i+0x17c>
 8006684:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006688:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800668c:	4632      	mov	r2, r6
 800668e:	4650      	mov	r0, sl
 8006690:	4798      	blx	r3
 8006692:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006696:	464d      	mov	r5, r9
 8006698:	42bd      	cmp	r5, r7
 800669a:	d02d      	beq.n	80066f8 <_scanf_i+0x1dc>
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	f012 0210 	ands.w	r2, r2, #16
 80066a2:	d113      	bne.n	80066cc <_scanf_i+0x1b0>
 80066a4:	702a      	strb	r2, [r5, #0]
 80066a6:	6863      	ldr	r3, [r4, #4]
 80066a8:	9e01      	ldr	r6, [sp, #4]
 80066aa:	4639      	mov	r1, r7
 80066ac:	4650      	mov	r0, sl
 80066ae:	47b0      	blx	r6
 80066b0:	6821      	ldr	r1, [r4, #0]
 80066b2:	f8d8 3000 	ldr.w	r3, [r8]
 80066b6:	f011 0f20 	tst.w	r1, #32
 80066ba:	d013      	beq.n	80066e4 <_scanf_i+0x1c8>
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	f8c8 2000 	str.w	r2, [r8]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6018      	str	r0, [r3, #0]
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60e3      	str	r3, [r4, #12]
 80066cc:	1bed      	subs	r5, r5, r7
 80066ce:	44ab      	add	fp, r5
 80066d0:	6925      	ldr	r5, [r4, #16]
 80066d2:	445d      	add	r5, fp
 80066d4:	6125      	str	r5, [r4, #16]
 80066d6:	2000      	movs	r0, #0
 80066d8:	b007      	add	sp, #28
 80066da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066de:	f04f 0b00 	mov.w	fp, #0
 80066e2:	e7ca      	b.n	800667a <_scanf_i+0x15e>
 80066e4:	1d1a      	adds	r2, r3, #4
 80066e6:	f8c8 2000 	str.w	r2, [r8]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f011 0f01 	tst.w	r1, #1
 80066f0:	bf14      	ite	ne
 80066f2:	8018      	strhne	r0, [r3, #0]
 80066f4:	6018      	streq	r0, [r3, #0]
 80066f6:	e7e6      	b.n	80066c6 <_scanf_i+0x1aa>
 80066f8:	2001      	movs	r0, #1
 80066fa:	e7ed      	b.n	80066d8 <_scanf_i+0x1bc>
 80066fc:	08006d7c 	.word	0x08006d7c
 8006700:	0800695d 	.word	0x0800695d
 8006704:	08006875 	.word	0x08006875
 8006708:	08006e9c 	.word	0x08006e9c

0800670c <__sccl>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	780b      	ldrb	r3, [r1, #0]
 8006710:	4604      	mov	r4, r0
 8006712:	2b5e      	cmp	r3, #94	; 0x5e
 8006714:	bf0b      	itete	eq
 8006716:	784b      	ldrbeq	r3, [r1, #1]
 8006718:	1c48      	addne	r0, r1, #1
 800671a:	1c88      	addeq	r0, r1, #2
 800671c:	2200      	movne	r2, #0
 800671e:	bf08      	it	eq
 8006720:	2201      	moveq	r2, #1
 8006722:	1e61      	subs	r1, r4, #1
 8006724:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006728:	f801 2f01 	strb.w	r2, [r1, #1]!
 800672c:	42a9      	cmp	r1, r5
 800672e:	d1fb      	bne.n	8006728 <__sccl+0x1c>
 8006730:	b90b      	cbnz	r3, 8006736 <__sccl+0x2a>
 8006732:	3801      	subs	r0, #1
 8006734:	bd70      	pop	{r4, r5, r6, pc}
 8006736:	f082 0201 	eor.w	r2, r2, #1
 800673a:	54e2      	strb	r2, [r4, r3]
 800673c:	4605      	mov	r5, r0
 800673e:	4628      	mov	r0, r5
 8006740:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006744:	292d      	cmp	r1, #45	; 0x2d
 8006746:	d006      	beq.n	8006756 <__sccl+0x4a>
 8006748:	295d      	cmp	r1, #93	; 0x5d
 800674a:	d0f3      	beq.n	8006734 <__sccl+0x28>
 800674c:	b909      	cbnz	r1, 8006752 <__sccl+0x46>
 800674e:	4628      	mov	r0, r5
 8006750:	e7f0      	b.n	8006734 <__sccl+0x28>
 8006752:	460b      	mov	r3, r1
 8006754:	e7f1      	b.n	800673a <__sccl+0x2e>
 8006756:	786e      	ldrb	r6, [r5, #1]
 8006758:	2e5d      	cmp	r6, #93	; 0x5d
 800675a:	d0fa      	beq.n	8006752 <__sccl+0x46>
 800675c:	42b3      	cmp	r3, r6
 800675e:	dcf8      	bgt.n	8006752 <__sccl+0x46>
 8006760:	3502      	adds	r5, #2
 8006762:	4619      	mov	r1, r3
 8006764:	3101      	adds	r1, #1
 8006766:	428e      	cmp	r6, r1
 8006768:	5462      	strb	r2, [r4, r1]
 800676a:	dcfb      	bgt.n	8006764 <__sccl+0x58>
 800676c:	1af1      	subs	r1, r6, r3
 800676e:	3901      	subs	r1, #1
 8006770:	1c58      	adds	r0, r3, #1
 8006772:	42b3      	cmp	r3, r6
 8006774:	bfa8      	it	ge
 8006776:	2100      	movge	r1, #0
 8006778:	1843      	adds	r3, r0, r1
 800677a:	e7e0      	b.n	800673e <__sccl+0x32>

0800677c <_strtol_l.constprop.0>:
 800677c:	2b01      	cmp	r3, #1
 800677e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006782:	4680      	mov	r8, r0
 8006784:	d001      	beq.n	800678a <_strtol_l.constprop.0+0xe>
 8006786:	2b24      	cmp	r3, #36	; 0x24
 8006788:	d906      	bls.n	8006798 <_strtol_l.constprop.0+0x1c>
 800678a:	f7ff f8f7 	bl	800597c <__errno>
 800678e:	2316      	movs	r3, #22
 8006790:	6003      	str	r3, [r0, #0]
 8006792:	2000      	movs	r0, #0
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	4f35      	ldr	r7, [pc, #212]	; (8006870 <_strtol_l.constprop.0+0xf4>)
 800679a:	460d      	mov	r5, r1
 800679c:	4628      	mov	r0, r5
 800679e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067a2:	5de6      	ldrb	r6, [r4, r7]
 80067a4:	f016 0608 	ands.w	r6, r6, #8
 80067a8:	d1f8      	bne.n	800679c <_strtol_l.constprop.0+0x20>
 80067aa:	2c2d      	cmp	r4, #45	; 0x2d
 80067ac:	d12f      	bne.n	800680e <_strtol_l.constprop.0+0x92>
 80067ae:	782c      	ldrb	r4, [r5, #0]
 80067b0:	2601      	movs	r6, #1
 80067b2:	1c85      	adds	r5, r0, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d057      	beq.n	8006868 <_strtol_l.constprop.0+0xec>
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d109      	bne.n	80067d0 <_strtol_l.constprop.0+0x54>
 80067bc:	2c30      	cmp	r4, #48	; 0x30
 80067be:	d107      	bne.n	80067d0 <_strtol_l.constprop.0+0x54>
 80067c0:	7828      	ldrb	r0, [r5, #0]
 80067c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80067c6:	2858      	cmp	r0, #88	; 0x58
 80067c8:	d149      	bne.n	800685e <_strtol_l.constprop.0+0xe2>
 80067ca:	786c      	ldrb	r4, [r5, #1]
 80067cc:	2310      	movs	r3, #16
 80067ce:	3502      	adds	r5, #2
 80067d0:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80067d4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80067d8:	2700      	movs	r7, #0
 80067da:	fbbe f9f3 	udiv	r9, lr, r3
 80067de:	4638      	mov	r0, r7
 80067e0:	fb03 ea19 	mls	sl, r3, r9, lr
 80067e4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80067e8:	f1bc 0f09 	cmp.w	ip, #9
 80067ec:	d814      	bhi.n	8006818 <_strtol_l.constprop.0+0x9c>
 80067ee:	4664      	mov	r4, ip
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	dd22      	ble.n	800683a <_strtol_l.constprop.0+0xbe>
 80067f4:	2f00      	cmp	r7, #0
 80067f6:	db1d      	blt.n	8006834 <_strtol_l.constprop.0+0xb8>
 80067f8:	4581      	cmp	r9, r0
 80067fa:	d31b      	bcc.n	8006834 <_strtol_l.constprop.0+0xb8>
 80067fc:	d101      	bne.n	8006802 <_strtol_l.constprop.0+0x86>
 80067fe:	45a2      	cmp	sl, r4
 8006800:	db18      	blt.n	8006834 <_strtol_l.constprop.0+0xb8>
 8006802:	fb00 4003 	mla	r0, r0, r3, r4
 8006806:	2701      	movs	r7, #1
 8006808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800680c:	e7ea      	b.n	80067e4 <_strtol_l.constprop.0+0x68>
 800680e:	2c2b      	cmp	r4, #43	; 0x2b
 8006810:	bf04      	itt	eq
 8006812:	782c      	ldrbeq	r4, [r5, #0]
 8006814:	1c85      	addeq	r5, r0, #2
 8006816:	e7cd      	b.n	80067b4 <_strtol_l.constprop.0+0x38>
 8006818:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800681c:	f1bc 0f19 	cmp.w	ip, #25
 8006820:	d801      	bhi.n	8006826 <_strtol_l.constprop.0+0xaa>
 8006822:	3c37      	subs	r4, #55	; 0x37
 8006824:	e7e4      	b.n	80067f0 <_strtol_l.constprop.0+0x74>
 8006826:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800682a:	f1bc 0f19 	cmp.w	ip, #25
 800682e:	d804      	bhi.n	800683a <_strtol_l.constprop.0+0xbe>
 8006830:	3c57      	subs	r4, #87	; 0x57
 8006832:	e7dd      	b.n	80067f0 <_strtol_l.constprop.0+0x74>
 8006834:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006838:	e7e6      	b.n	8006808 <_strtol_l.constprop.0+0x8c>
 800683a:	2f00      	cmp	r7, #0
 800683c:	da07      	bge.n	800684e <_strtol_l.constprop.0+0xd2>
 800683e:	2322      	movs	r3, #34	; 0x22
 8006840:	f8c8 3000 	str.w	r3, [r8]
 8006844:	4670      	mov	r0, lr
 8006846:	2a00      	cmp	r2, #0
 8006848:	d0a4      	beq.n	8006794 <_strtol_l.constprop.0+0x18>
 800684a:	1e69      	subs	r1, r5, #1
 800684c:	e005      	b.n	800685a <_strtol_l.constprop.0+0xde>
 800684e:	b106      	cbz	r6, 8006852 <_strtol_l.constprop.0+0xd6>
 8006850:	4240      	negs	r0, r0
 8006852:	2a00      	cmp	r2, #0
 8006854:	d09e      	beq.n	8006794 <_strtol_l.constprop.0+0x18>
 8006856:	2f00      	cmp	r7, #0
 8006858:	d1f7      	bne.n	800684a <_strtol_l.constprop.0+0xce>
 800685a:	6011      	str	r1, [r2, #0]
 800685c:	e79a      	b.n	8006794 <_strtol_l.constprop.0+0x18>
 800685e:	2430      	movs	r4, #48	; 0x30
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1b5      	bne.n	80067d0 <_strtol_l.constprop.0+0x54>
 8006864:	2308      	movs	r3, #8
 8006866:	e7b3      	b.n	80067d0 <_strtol_l.constprop.0+0x54>
 8006868:	2c30      	cmp	r4, #48	; 0x30
 800686a:	d0a9      	beq.n	80067c0 <_strtol_l.constprop.0+0x44>
 800686c:	230a      	movs	r3, #10
 800686e:	e7af      	b.n	80067d0 <_strtol_l.constprop.0+0x54>
 8006870:	08006e9f 	.word	0x08006e9f

08006874 <_strtol_r>:
 8006874:	f7ff bf82 	b.w	800677c <_strtol_l.constprop.0>

08006878 <_strtoul_l.constprop.0>:
 8006878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800687c:	4f36      	ldr	r7, [pc, #216]	; (8006958 <_strtoul_l.constprop.0+0xe0>)
 800687e:	4686      	mov	lr, r0
 8006880:	460d      	mov	r5, r1
 8006882:	4628      	mov	r0, r5
 8006884:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006888:	5de6      	ldrb	r6, [r4, r7]
 800688a:	f016 0608 	ands.w	r6, r6, #8
 800688e:	d1f8      	bne.n	8006882 <_strtoul_l.constprop.0+0xa>
 8006890:	2c2d      	cmp	r4, #45	; 0x2d
 8006892:	d12f      	bne.n	80068f4 <_strtoul_l.constprop.0+0x7c>
 8006894:	782c      	ldrb	r4, [r5, #0]
 8006896:	2601      	movs	r6, #1
 8006898:	1c85      	adds	r5, r0, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d057      	beq.n	800694e <_strtoul_l.constprop.0+0xd6>
 800689e:	2b10      	cmp	r3, #16
 80068a0:	d109      	bne.n	80068b6 <_strtoul_l.constprop.0+0x3e>
 80068a2:	2c30      	cmp	r4, #48	; 0x30
 80068a4:	d107      	bne.n	80068b6 <_strtoul_l.constprop.0+0x3e>
 80068a6:	7828      	ldrb	r0, [r5, #0]
 80068a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80068ac:	2858      	cmp	r0, #88	; 0x58
 80068ae:	d149      	bne.n	8006944 <_strtoul_l.constprop.0+0xcc>
 80068b0:	786c      	ldrb	r4, [r5, #1]
 80068b2:	2310      	movs	r3, #16
 80068b4:	3502      	adds	r5, #2
 80068b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80068ba:	2700      	movs	r7, #0
 80068bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80068c0:	fb03 f908 	mul.w	r9, r3, r8
 80068c4:	ea6f 0909 	mvn.w	r9, r9
 80068c8:	4638      	mov	r0, r7
 80068ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80068ce:	f1bc 0f09 	cmp.w	ip, #9
 80068d2:	d814      	bhi.n	80068fe <_strtoul_l.constprop.0+0x86>
 80068d4:	4664      	mov	r4, ip
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	dd22      	ble.n	8006920 <_strtoul_l.constprop.0+0xa8>
 80068da:	2f00      	cmp	r7, #0
 80068dc:	db1d      	blt.n	800691a <_strtoul_l.constprop.0+0xa2>
 80068de:	4580      	cmp	r8, r0
 80068e0:	d31b      	bcc.n	800691a <_strtoul_l.constprop.0+0xa2>
 80068e2:	d101      	bne.n	80068e8 <_strtoul_l.constprop.0+0x70>
 80068e4:	45a1      	cmp	r9, r4
 80068e6:	db18      	blt.n	800691a <_strtoul_l.constprop.0+0xa2>
 80068e8:	fb00 4003 	mla	r0, r0, r3, r4
 80068ec:	2701      	movs	r7, #1
 80068ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068f2:	e7ea      	b.n	80068ca <_strtoul_l.constprop.0+0x52>
 80068f4:	2c2b      	cmp	r4, #43	; 0x2b
 80068f6:	bf04      	itt	eq
 80068f8:	782c      	ldrbeq	r4, [r5, #0]
 80068fa:	1c85      	addeq	r5, r0, #2
 80068fc:	e7cd      	b.n	800689a <_strtoul_l.constprop.0+0x22>
 80068fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006902:	f1bc 0f19 	cmp.w	ip, #25
 8006906:	d801      	bhi.n	800690c <_strtoul_l.constprop.0+0x94>
 8006908:	3c37      	subs	r4, #55	; 0x37
 800690a:	e7e4      	b.n	80068d6 <_strtoul_l.constprop.0+0x5e>
 800690c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006910:	f1bc 0f19 	cmp.w	ip, #25
 8006914:	d804      	bhi.n	8006920 <_strtoul_l.constprop.0+0xa8>
 8006916:	3c57      	subs	r4, #87	; 0x57
 8006918:	e7dd      	b.n	80068d6 <_strtoul_l.constprop.0+0x5e>
 800691a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800691e:	e7e6      	b.n	80068ee <_strtoul_l.constprop.0+0x76>
 8006920:	2f00      	cmp	r7, #0
 8006922:	da07      	bge.n	8006934 <_strtoul_l.constprop.0+0xbc>
 8006924:	2322      	movs	r3, #34	; 0x22
 8006926:	f8ce 3000 	str.w	r3, [lr]
 800692a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800692e:	b932      	cbnz	r2, 800693e <_strtoul_l.constprop.0+0xc6>
 8006930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006934:	b106      	cbz	r6, 8006938 <_strtoul_l.constprop.0+0xc0>
 8006936:	4240      	negs	r0, r0
 8006938:	2a00      	cmp	r2, #0
 800693a:	d0f9      	beq.n	8006930 <_strtoul_l.constprop.0+0xb8>
 800693c:	b107      	cbz	r7, 8006940 <_strtoul_l.constprop.0+0xc8>
 800693e:	1e69      	subs	r1, r5, #1
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	e7f5      	b.n	8006930 <_strtoul_l.constprop.0+0xb8>
 8006944:	2430      	movs	r4, #48	; 0x30
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1b5      	bne.n	80068b6 <_strtoul_l.constprop.0+0x3e>
 800694a:	2308      	movs	r3, #8
 800694c:	e7b3      	b.n	80068b6 <_strtoul_l.constprop.0+0x3e>
 800694e:	2c30      	cmp	r4, #48	; 0x30
 8006950:	d0a9      	beq.n	80068a6 <_strtoul_l.constprop.0+0x2e>
 8006952:	230a      	movs	r3, #10
 8006954:	e7af      	b.n	80068b6 <_strtoul_l.constprop.0+0x3e>
 8006956:	bf00      	nop
 8006958:	08006e9f 	.word	0x08006e9f

0800695c <_strtoul_r>:
 800695c:	f7ff bf8c 	b.w	8006878 <_strtoul_l.constprop.0>

08006960 <__submore>:
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	460c      	mov	r4, r1
 8006966:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800696c:	4299      	cmp	r1, r3
 800696e:	d11d      	bne.n	80069ac <__submore+0x4c>
 8006970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006974:	f000 f8b4 	bl	8006ae0 <_malloc_r>
 8006978:	b918      	cbnz	r0, 8006982 <__submore+0x22>
 800697a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800697e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006986:	63a3      	str	r3, [r4, #56]	; 0x38
 8006988:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800698c:	6360      	str	r0, [r4, #52]	; 0x34
 800698e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006992:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006996:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800699a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800699e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80069a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80069a6:	6020      	str	r0, [r4, #0]
 80069a8:	2000      	movs	r0, #0
 80069aa:	e7e8      	b.n	800697e <__submore+0x1e>
 80069ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80069ae:	0077      	lsls	r7, r6, #1
 80069b0:	463a      	mov	r2, r7
 80069b2:	f000 f909 	bl	8006bc8 <_realloc_r>
 80069b6:	4605      	mov	r5, r0
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d0de      	beq.n	800697a <__submore+0x1a>
 80069bc:	eb00 0806 	add.w	r8, r0, r6
 80069c0:	4601      	mov	r1, r0
 80069c2:	4632      	mov	r2, r6
 80069c4:	4640      	mov	r0, r8
 80069c6:	f7ff f803 	bl	80059d0 <memcpy>
 80069ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80069ce:	f8c4 8000 	str.w	r8, [r4]
 80069d2:	e7e9      	b.n	80069a8 <__submore+0x48>

080069d4 <__retarget_lock_acquire_recursive>:
 80069d4:	4770      	bx	lr

080069d6 <__retarget_lock_release_recursive>:
 80069d6:	4770      	bx	lr

080069d8 <memmove>:
 80069d8:	4288      	cmp	r0, r1
 80069da:	b510      	push	{r4, lr}
 80069dc:	eb01 0402 	add.w	r4, r1, r2
 80069e0:	d902      	bls.n	80069e8 <memmove+0x10>
 80069e2:	4284      	cmp	r4, r0
 80069e4:	4623      	mov	r3, r4
 80069e6:	d807      	bhi.n	80069f8 <memmove+0x20>
 80069e8:	1e43      	subs	r3, r0, #1
 80069ea:	42a1      	cmp	r1, r4
 80069ec:	d008      	beq.n	8006a00 <memmove+0x28>
 80069ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069f6:	e7f8      	b.n	80069ea <memmove+0x12>
 80069f8:	4402      	add	r2, r0
 80069fa:	4601      	mov	r1, r0
 80069fc:	428a      	cmp	r2, r1
 80069fe:	d100      	bne.n	8006a02 <memmove+0x2a>
 8006a00:	bd10      	pop	{r4, pc}
 8006a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a0a:	e7f7      	b.n	80069fc <memmove+0x24>

08006a0c <_free_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4605      	mov	r5, r0
 8006a10:	2900      	cmp	r1, #0
 8006a12:	d041      	beq.n	8006a98 <_free_r+0x8c>
 8006a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a18:	1f0c      	subs	r4, r1, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bfb8      	it	lt
 8006a1e:	18e4      	addlt	r4, r4, r3
 8006a20:	f000 f912 	bl	8006c48 <__malloc_lock>
 8006a24:	4a1d      	ldr	r2, [pc, #116]	; (8006a9c <_free_r+0x90>)
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	b933      	cbnz	r3, 8006a38 <_free_r+0x2c>
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	6014      	str	r4, [r2, #0]
 8006a2e:	4628      	mov	r0, r5
 8006a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a34:	f000 b90e 	b.w	8006c54 <__malloc_unlock>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d908      	bls.n	8006a4e <_free_r+0x42>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf01      	itttt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	1809      	addeq	r1, r1, r0
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	e7ed      	b.n	8006a2a <_free_r+0x1e>
 8006a4e:	461a      	mov	r2, r3
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	b10b      	cbz	r3, 8006a58 <_free_r+0x4c>
 8006a54:	42a3      	cmp	r3, r4
 8006a56:	d9fa      	bls.n	8006a4e <_free_r+0x42>
 8006a58:	6811      	ldr	r1, [r2, #0]
 8006a5a:	1850      	adds	r0, r2, r1
 8006a5c:	42a0      	cmp	r0, r4
 8006a5e:	d10b      	bne.n	8006a78 <_free_r+0x6c>
 8006a60:	6820      	ldr	r0, [r4, #0]
 8006a62:	4401      	add	r1, r0
 8006a64:	1850      	adds	r0, r2, r1
 8006a66:	4283      	cmp	r3, r0
 8006a68:	6011      	str	r1, [r2, #0]
 8006a6a:	d1e0      	bne.n	8006a2e <_free_r+0x22>
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	6053      	str	r3, [r2, #4]
 8006a72:	4401      	add	r1, r0
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	e7da      	b.n	8006a2e <_free_r+0x22>
 8006a78:	d902      	bls.n	8006a80 <_free_r+0x74>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	e7d6      	b.n	8006a2e <_free_r+0x22>
 8006a80:	6820      	ldr	r0, [r4, #0]
 8006a82:	1821      	adds	r1, r4, r0
 8006a84:	428b      	cmp	r3, r1
 8006a86:	bf04      	itt	eq
 8006a88:	6819      	ldreq	r1, [r3, #0]
 8006a8a:	685b      	ldreq	r3, [r3, #4]
 8006a8c:	6063      	str	r3, [r4, #4]
 8006a8e:	bf04      	itt	eq
 8006a90:	1809      	addeq	r1, r1, r0
 8006a92:	6021      	streq	r1, [r4, #0]
 8006a94:	6054      	str	r4, [r2, #4]
 8006a96:	e7ca      	b.n	8006a2e <_free_r+0x22>
 8006a98:	bd38      	pop	{r3, r4, r5, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200005d4 	.word	0x200005d4

08006aa0 <sbrk_aligned>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4e0e      	ldr	r6, [pc, #56]	; (8006adc <sbrk_aligned+0x3c>)
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	6831      	ldr	r1, [r6, #0]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	b911      	cbnz	r1, 8006ab2 <sbrk_aligned+0x12>
 8006aac:	f000 f8bc 	bl	8006c28 <_sbrk_r>
 8006ab0:	6030      	str	r0, [r6, #0]
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	f000 f8b7 	bl	8006c28 <_sbrk_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	d00a      	beq.n	8006ad4 <sbrk_aligned+0x34>
 8006abe:	1cc4      	adds	r4, r0, #3
 8006ac0:	f024 0403 	bic.w	r4, r4, #3
 8006ac4:	42a0      	cmp	r0, r4
 8006ac6:	d007      	beq.n	8006ad8 <sbrk_aligned+0x38>
 8006ac8:	1a21      	subs	r1, r4, r0
 8006aca:	4628      	mov	r0, r5
 8006acc:	f000 f8ac 	bl	8006c28 <_sbrk_r>
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d101      	bne.n	8006ad8 <sbrk_aligned+0x38>
 8006ad4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ad8:	4620      	mov	r0, r4
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	200005d8 	.word	0x200005d8

08006ae0 <_malloc_r>:
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	1ccd      	adds	r5, r1, #3
 8006ae6:	f025 0503 	bic.w	r5, r5, #3
 8006aea:	3508      	adds	r5, #8
 8006aec:	2d0c      	cmp	r5, #12
 8006aee:	bf38      	it	cc
 8006af0:	250c      	movcc	r5, #12
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	4607      	mov	r7, r0
 8006af6:	db01      	blt.n	8006afc <_malloc_r+0x1c>
 8006af8:	42a9      	cmp	r1, r5
 8006afa:	d905      	bls.n	8006b08 <_malloc_r+0x28>
 8006afc:	230c      	movs	r3, #12
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	2600      	movs	r6, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	4e2e      	ldr	r6, [pc, #184]	; (8006bc4 <_malloc_r+0xe4>)
 8006b0a:	f000 f89d 	bl	8006c48 <__malloc_lock>
 8006b0e:	6833      	ldr	r3, [r6, #0]
 8006b10:	461c      	mov	r4, r3
 8006b12:	bb34      	cbnz	r4, 8006b62 <_malloc_r+0x82>
 8006b14:	4629      	mov	r1, r5
 8006b16:	4638      	mov	r0, r7
 8006b18:	f7ff ffc2 	bl	8006aa0 <sbrk_aligned>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	4604      	mov	r4, r0
 8006b20:	d14d      	bne.n	8006bbe <_malloc_r+0xde>
 8006b22:	6834      	ldr	r4, [r6, #0]
 8006b24:	4626      	mov	r6, r4
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	d140      	bne.n	8006bac <_malloc_r+0xcc>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4638      	mov	r0, r7
 8006b30:	eb04 0803 	add.w	r8, r4, r3
 8006b34:	f000 f878 	bl	8006c28 <_sbrk_r>
 8006b38:	4580      	cmp	r8, r0
 8006b3a:	d13a      	bne.n	8006bb2 <_malloc_r+0xd2>
 8006b3c:	6821      	ldr	r1, [r4, #0]
 8006b3e:	3503      	adds	r5, #3
 8006b40:	1a6d      	subs	r5, r5, r1
 8006b42:	f025 0503 	bic.w	r5, r5, #3
 8006b46:	3508      	adds	r5, #8
 8006b48:	2d0c      	cmp	r5, #12
 8006b4a:	bf38      	it	cc
 8006b4c:	250c      	movcc	r5, #12
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff ffa5 	bl	8006aa0 <sbrk_aligned>
 8006b56:	3001      	adds	r0, #1
 8006b58:	d02b      	beq.n	8006bb2 <_malloc_r+0xd2>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	442b      	add	r3, r5
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	e00e      	b.n	8006b80 <_malloc_r+0xa0>
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	1b52      	subs	r2, r2, r5
 8006b66:	d41e      	bmi.n	8006ba6 <_malloc_r+0xc6>
 8006b68:	2a0b      	cmp	r2, #11
 8006b6a:	d916      	bls.n	8006b9a <_malloc_r+0xba>
 8006b6c:	1961      	adds	r1, r4, r5
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	6025      	str	r5, [r4, #0]
 8006b72:	bf18      	it	ne
 8006b74:	6059      	strne	r1, [r3, #4]
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	bf08      	it	eq
 8006b7a:	6031      	streq	r1, [r6, #0]
 8006b7c:	5162      	str	r2, [r4, r5]
 8006b7e:	604b      	str	r3, [r1, #4]
 8006b80:	4638      	mov	r0, r7
 8006b82:	f104 060b 	add.w	r6, r4, #11
 8006b86:	f000 f865 	bl	8006c54 <__malloc_unlock>
 8006b8a:	f026 0607 	bic.w	r6, r6, #7
 8006b8e:	1d23      	adds	r3, r4, #4
 8006b90:	1af2      	subs	r2, r6, r3
 8006b92:	d0b6      	beq.n	8006b02 <_malloc_r+0x22>
 8006b94:	1b9b      	subs	r3, r3, r6
 8006b96:	50a3      	str	r3, [r4, r2]
 8006b98:	e7b3      	b.n	8006b02 <_malloc_r+0x22>
 8006b9a:	6862      	ldr	r2, [r4, #4]
 8006b9c:	42a3      	cmp	r3, r4
 8006b9e:	bf0c      	ite	eq
 8006ba0:	6032      	streq	r2, [r6, #0]
 8006ba2:	605a      	strne	r2, [r3, #4]
 8006ba4:	e7ec      	b.n	8006b80 <_malloc_r+0xa0>
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	6864      	ldr	r4, [r4, #4]
 8006baa:	e7b2      	b.n	8006b12 <_malloc_r+0x32>
 8006bac:	4634      	mov	r4, r6
 8006bae:	6876      	ldr	r6, [r6, #4]
 8006bb0:	e7b9      	b.n	8006b26 <_malloc_r+0x46>
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	f000 f84c 	bl	8006c54 <__malloc_unlock>
 8006bbc:	e7a1      	b.n	8006b02 <_malloc_r+0x22>
 8006bbe:	6025      	str	r5, [r4, #0]
 8006bc0:	e7de      	b.n	8006b80 <_malloc_r+0xa0>
 8006bc2:	bf00      	nop
 8006bc4:	200005d4 	.word	0x200005d4

08006bc8 <_realloc_r>:
 8006bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	4680      	mov	r8, r0
 8006bce:	4614      	mov	r4, r2
 8006bd0:	460e      	mov	r6, r1
 8006bd2:	b921      	cbnz	r1, 8006bde <_realloc_r+0x16>
 8006bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd8:	4611      	mov	r1, r2
 8006bda:	f7ff bf81 	b.w	8006ae0 <_malloc_r>
 8006bde:	b92a      	cbnz	r2, 8006bec <_realloc_r+0x24>
 8006be0:	f7ff ff14 	bl	8006a0c <_free_r>
 8006be4:	4625      	mov	r5, r4
 8006be6:	4628      	mov	r0, r5
 8006be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bec:	f000 f838 	bl	8006c60 <_malloc_usable_size_r>
 8006bf0:	4284      	cmp	r4, r0
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	d802      	bhi.n	8006bfc <_realloc_r+0x34>
 8006bf6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bfa:	d812      	bhi.n	8006c22 <_realloc_r+0x5a>
 8006bfc:	4621      	mov	r1, r4
 8006bfe:	4640      	mov	r0, r8
 8006c00:	f7ff ff6e 	bl	8006ae0 <_malloc_r>
 8006c04:	4605      	mov	r5, r0
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d0ed      	beq.n	8006be6 <_realloc_r+0x1e>
 8006c0a:	42bc      	cmp	r4, r7
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	4631      	mov	r1, r6
 8006c10:	bf28      	it	cs
 8006c12:	463a      	movcs	r2, r7
 8006c14:	f7fe fedc 	bl	80059d0 <memcpy>
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4640      	mov	r0, r8
 8006c1c:	f7ff fef6 	bl	8006a0c <_free_r>
 8006c20:	e7e1      	b.n	8006be6 <_realloc_r+0x1e>
 8006c22:	4635      	mov	r5, r6
 8006c24:	e7df      	b.n	8006be6 <_realloc_r+0x1e>
	...

08006c28 <_sbrk_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4d06      	ldr	r5, [pc, #24]	; (8006c44 <_sbrk_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7f9 fff0 	bl	8000c18 <_sbrk>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_sbrk_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_sbrk_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	200005cc 	.word	0x200005cc

08006c48 <__malloc_lock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	; (8006c50 <__malloc_lock+0x8>)
 8006c4a:	f7ff bec3 	b.w	80069d4 <__retarget_lock_acquire_recursive>
 8006c4e:	bf00      	nop
 8006c50:	200005d0 	.word	0x200005d0

08006c54 <__malloc_unlock>:
 8006c54:	4801      	ldr	r0, [pc, #4]	; (8006c5c <__malloc_unlock+0x8>)
 8006c56:	f7ff bebe 	b.w	80069d6 <__retarget_lock_release_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	200005d0 	.word	0x200005d0

08006c60 <_malloc_usable_size_r>:
 8006c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c64:	1f18      	subs	r0, r3, #4
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	bfbc      	itt	lt
 8006c6a:	580b      	ldrlt	r3, [r1, r0]
 8006c6c:	18c0      	addlt	r0, r0, r3
 8006c6e:	4770      	bx	lr

08006c70 <_init>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr

08006c7c <_fini>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr
